<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>区间dp</title>
      <link href="/2022/03/24/%E5%8C%BA%E9%97%B4dp/"/>
      <url>/2022/03/24/%E5%8C%BA%E9%97%B4dp/</url>
      
        <content type="html"><![CDATA[<p>讲课，ps</p><span id="more"></span><h1 id="什么是区间dp"><a href="#什么是区间dp" class="headerlink" title="什么是区间dp"></a>什么是区间dp</h1><p>区间 $dp$ 就是在区间上进行动态规划，求解一段区间上的最优解。主要是通过合并小区间的最优解进而得出整个大区间上最优解的 $dp$ 算法（实际上不需要是最优解）。</p><h2 id="石子合并问题"><a href="#石子合并问题" class="headerlink" title="石子合并问题"></a>石子合并问题</h2><p>有若干个石子排成一行，每个石子有一定的质量，现在要将它们合并成一堆，每一次合并产生的价值是两堆石子的质量和（只能合并相邻的石子），求最大/最小价值。</p><p>以最小值为例，对于这个问题，如果我们用$f_{i, j}$表示从$i$到$j$的代价最小值，那么这一块区域可以被分割成两个小的区域，通过不断调整分割点，我们就可以找到$f_{i, j}$，转移方程如下：<br>$$<br>f_{i, j} = \min(f_{i, j}, f_{i, k} + f_{k + 1, j} + s[j] - s[i - 1]) (i \le k &lt; j)<br>$$<br>初始值：<br>$$<br>f_{i, i} = 0<br>$$<br>时间复杂度$O(n ^ 3)$。</p><p>如果石子排成了一个环呢？</p><h2 id="环形石子合并问题"><a href="#环形石子合并问题" class="headerlink" title="环形石子合并问题"></a>环形石子合并问题</h2><p>一般来说，有下面几种转换方法：</p><ol><li>把环变成链，枚举那个缺口，时间复杂度$O(n ^ 4)$；</li><li>考虑到变成环之后，问题转换为求$n$条链上的石子合并问题，那么可以把长度为$n$的链拆开，复制一次，变成长度为$2n$的链，用石子合并的方法求出$f_{i, j}$后，求出$\min(f_{i, i + n - 1})$，时间复杂度$O(8n ^ 3)$；</li></ol><p>显然第二种更好。</p><h2 id="洛谷-P1880-NOI1995-石子合并"><a href="#洛谷-P1880-NOI1995-石子合并" class="headerlink" title="洛谷-P1880-[NOI1995] 石子合并"></a><a href="https://www.luogu.com.cn/problem/P1880">洛谷-P1880-[NOI1995] 石子合并</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">205</span>, PosInf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N], s[N], f[N][N], g[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j)</span><br><span class="line">                f[i][i] = g[i][i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                f[i][j] = PosInf;</span><br><span class="line">                g[i][j] = -PosInf;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">        a[i + n] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++)</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= n; len++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l + len - <span class="number">1</span> &lt;= n * <span class="number">2</span>; l++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r = l + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt; r; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                f[l][r] = std::<span class="built_in">min</span>(f[l][r], f[l][k] + f[k + <span class="number">1</span>][r] + s[r] - s[l - <span class="number">1</span>]);</span><br><span class="line">                g[l][r] = std::<span class="built_in">max</span>(g[l][r], g[l][k] + g[k + <span class="number">1</span>][r] + s[r] - s[l - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wMin = PosInf, wMax = -PosInf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; l++)</span><br><span class="line">    &#123;</span><br><span class="line">        wMin = std::<span class="built_in">min</span>(wMin, f[l][l + n - <span class="number">1</span>]);</span><br><span class="line">        wMax = std::<span class="built_in">max</span>(wMax, g[l][l + n - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; wMin &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; wMax &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题拓展"><a href="#问题拓展" class="headerlink" title="问题拓展"></a>问题拓展</h3><h2 id="AcWing-320-能量项链"><a href="#AcWing-320-能量项链" class="headerlink" title="AcWing-320-能量项链"></a><a href="https://www.acwing.com/problem/content/322/">AcWing-320-能量项链</a></h2><p>本题和前面的合并略有不同，待合并的两个区间不是由点构成，而是由点与点之间的空隙构成。因此区间长度至少是3，至多是$n + 1$，且断点$k$不能和左端点相等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">205</span>, PosInf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N], f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">        a[i + n] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">3</span>; len &lt;= n + <span class="number">1</span>; len++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l + len - <span class="number">1</span> &lt;= n * <span class="number">2</span>; l++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r = l + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = l + <span class="number">1</span>; k &lt; r; k++)</span><br><span class="line">                f[l][r] = std::<span class="built_in">max</span>(f[l][r], f[l][k] + f[k][r] + a[l] * a[k] * a[r]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wMax = -PosInf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; l++)</span><br><span class="line">        wMax = std::<span class="built_in">max</span>(wMax, f[l][l + n]);</span><br><span class="line">    std::cout &lt;&lt; wMax &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LibreOJ-10149-凸多边形的划分"><a href="#LibreOJ-10149-凸多边形的划分" class="headerlink" title="LibreOJ-10149-凸多边形的划分"></a><a href="https://loj.ac/p/10149">LibreOJ-10149-凸多边形的划分</a></h2><p>可以将一个多边形的划分拆为三部分：左，中（三角形），右。最小价值即为这三者的价值和，于是可以发现转移方程和能量项链类似：<br>$$<br>f_{i, j} = \min(f_{i, j}, f_{i, k} + f{k, j} + w_i w_k w_j)<br>$$<br>注意，本题数据较大，需要做高精度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>, M = <span class="number">35</span>, PosInf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, w[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[N][N][M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a[], <span class="keyword">long</span> <span class="keyword">long</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> c[M];</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(c));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t += a[i] + b[i];</span><br><span class="line">        c[i] = t % <span class="number">10</span>;</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(a, c, <span class="built_in"><span class="keyword">sizeof</span></span>(c));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mul</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a[], <span class="keyword">long</span> <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> c[M];</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(c));</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t += a[i] * b;</span><br><span class="line">        c[i] = t % <span class="number">10</span>;</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(a, c, <span class="built_in"><span class="keyword">sizeof</span></span>(c));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Comp</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a[], <span class="keyword">long</span> <span class="keyword">long</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = M - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; b[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &lt; b[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        std::cin &gt;&gt; w[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> temp[M];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">3</span>; len &lt;= n + <span class="number">1</span>; len++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l + len - <span class="number">1</span> &lt;= n; l++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r = l + len - <span class="number">1</span>;</span><br><span class="line">            f[l][r][M - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = l + <span class="number">1</span>; k &lt; r; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(temp));</span><br><span class="line">                temp[<span class="number">0</span>] = w[l];</span><br><span class="line">                <span class="built_in">Mul</span>(temp, w[k]);</span><br><span class="line">                <span class="built_in">Mul</span>(temp, w[r]);</span><br><span class="line">                <span class="built_in">Add</span>(temp, f[l][k]);</span><br><span class="line">                <span class="built_in">Add</span>(temp, f[k][r]);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Comp</span>(f[l][r], temp) &gt; <span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">memcpy</span>(f[l][r], temp, <span class="built_in"><span class="keyword">sizeof</span></span>(temp));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = M - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; f[<span class="number">1</span>][n][k] == <span class="number">0</span>)</span><br><span class="line">        k--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        std::cout &lt;&lt; f[<span class="number">1</span>][n][i];</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-479-加分二叉树"><a href="#AcWing-479-加分二叉树" class="headerlink" title="AcWing-479-加分二叉树"></a><a href="https://www.acwing.com/problem/content/481/">AcWing-479-加分二叉树</a></h2><p>这个题乍一看似乎和动态规划没有关系，但我们仔细分析“中序”，可以发现，正如区间中用点分割，中序遍历中，左右子树和根正好可以通过区间型动态规划的经典处理方式划分。因此用$f_{i, j}$表示中序遍历为输入数组的$i$到$j$位的二叉树中加分的最大值，但由于要输出具体方案，还要用$g_{i, j}$表示中序遍历为输入数组的$i$到$j$位的二叉树的根的序号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, w[N];</span><br><span class="line"><span class="keyword">int</span> f[N][N], g[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> root = g[l][r];</span><br><span class="line">    std::cout &lt;&lt; root &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">Print</span>(l, root - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Print</span>(root + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        std::cin &gt;&gt; w[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= n; len++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l + len - <span class="number">1</span> &lt;= n; l++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r = l + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                f[l][r] = w[l];</span><br><span class="line">                g[l][r] = l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt;= r; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> subl = (k == l) ? <span class="number">1</span> : f[l][k - <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">int</span> subr = (k == r) ? <span class="number">1</span> : f[k + <span class="number">1</span>][r];</span><br><span class="line">                    <span class="keyword">int</span> score = subl * subr + w[k];</span><br><span class="line">                    <span class="keyword">if</span> (f[l][r] &lt; score)</span><br><span class="line">                    &#123;</span><br><span class="line">                        f[l][r] = score;</span><br><span class="line">                        g[l][r] = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; f[<span class="number">1</span>][n] &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">Print</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DCOJ2008-蜜雪冰城"><a href="#DCOJ2008-蜜雪冰城" class="headerlink" title="DCOJ2008. 蜜雪冰城"></a><a href="http://dcoj/problem/2008">DCOJ2008. 蜜雪冰城</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>, M = <span class="number">4005</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[M], b[M], c[M];</span><br><span class="line"><span class="keyword">int</span> f[N][N][M], g[N][N][M];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">int</span> cnt[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(cnt));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= a[i] &amp;&amp; b[i] &lt;= r &amp;&amp; a[i] &lt;= k &amp;&amp; k &lt;= b[i]) cnt[c[i]] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ba[N][N][M], reba[N][N][M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wh = ba[l][r][id];</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= wh - <span class="number">1</span>) <span class="built_in">out</span>(l, ba[l][r][id] - <span class="number">1</span>, reba[l][wh - <span class="number">1</span>][id]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, s[id - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(wh + <span class="number">1</span> &lt;= r) <span class="built_in">out</span>(wh + <span class="number">1</span>, r, reba[wh + <span class="number">1</span>][r][id]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++) cin &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; c[i], s.<span class="built_in">push_back</span>(c[i]);</span><br><span class="line">    <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    s.<span class="built_in">erase</span>(<span class="built_in">unique</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>()), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++) c[i] = <span class="built_in">lower_bound</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), c[i]) - s.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l = n;l &gt;= <span class="number">1</span>;l --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r = l;r &lt;= n;r ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = l, sum;k &lt;= r;k ++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">init</span>(l, r, k);</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = s.<span class="built_in">size</span>(), ans;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum += cnt[i];</span><br><span class="line">                    ans = sum * s[i - <span class="number">1</span>] + g[l][k - <span class="number">1</span>][i] + g[k + <span class="number">1</span>][r][i];</span><br><span class="line">                    <span class="keyword">if</span>(ans &gt; f[l][r][i] || !f[l][r][i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        f[l][r][i] = ans;</span><br><span class="line">                        ba[l][r][i] = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = s.<span class="built_in">size</span>();k &gt;= <span class="number">1</span>;k --)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(f[l][r][k] &gt; g[l][r][k + <span class="number">1</span>] || !g[l][r][k + <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    g[l][r][k] = f[l][r][k];</span><br><span class="line">                    reba[l][r][k] = k;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    g[l][r][k] = g[l][r][k + <span class="number">1</span>];</span><br><span class="line">                    reba[l][r][k] = reba[l][r][k + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, g[<span class="number">1</span>][n][<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">out</span>(<span class="number">1</span>, n, reba[<span class="number">1</span>][n][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-321-棋盘分割"><a href="#AcWing-321-棋盘分割" class="headerlink" title="AcWing-321-棋盘分割"></a><a href="https://www.acwing.com/problem/content/323/">AcWing-321-棋盘分割</a></h2><p>先来一波推导。<br>$$<br>ans^2=\dfrac{\sum_{i=1}^{n}(x_i -\overline x)}{n}\ =\dfrac1n(\sum_{i=1}^n(x_i^2-2x_i\overline x+\overline x^2))<br>$$</p><p>$$<br>=\dfrac1n(\sum_{i=1}^nx_i^2-2\overline x\sum_{i=1}^nx_i+n \overline x^2)<br>$$</p><p>$$<br>=\dfrac {\sum_{i=1}^nx_i^2}n-\overline x^2<br>$$</p><p>本题的划分分为横向和纵向，同时区间也由一维扩展到了二维，因此实现时可以用记忆化搜索的方式减少代码量。用$f_{x1, y1, x2, y2, k}$表示$(x1, y1)$到$(x2, y2)$这个二维区间分割$k$次的最小均方差，那么这个区间可以横向或纵向划分，且可以任意选取划分后的两个子区间，按照这个逻辑，可以写出下面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> m = <span class="number">8</span>, M = <span class="number">9</span>, N = <span class="number">20</span>, PosInf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, s[M][M];</span><br><span class="line"><span class="keyword">double</span> f[M][M][M][M][N];</span><br><span class="line"><span class="keyword">double</span> average;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = s[x2][y2] - s[x2][y1 - <span class="number">1</span>] - s[x1 - <span class="number">1</span>][y2] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> (sum - average) * (sum - average) / n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">Search</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> &amp;v = f[x1][y1][x2][y2][k];</span><br><span class="line">    <span class="keyword">if</span> (v &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> v = <span class="built_in">Calc</span>(x1, y1, x2, y2);</span><br><span class="line"></span><br><span class="line">    v = PosInf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x1; i &lt; x2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(x1, y1, i, y2, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(i + <span class="number">1</span>, y1, x2, y2));</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(i + <span class="number">1</span>, y1, x2, y2, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(x1, y1, i, y2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = y1; i &lt; y2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(x1, y1, x2, i, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(x1, i + <span class="number">1</span>, x2, y2));</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(x1, i + <span class="number">1</span>, x2, y2, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(x1, y1, x2, i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cin &gt;&gt; s[i][j];</span><br><span class="line">            s[i][j] += s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    average = (<span class="keyword">double</span>)s[m][m] / n;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; std::fixed &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">3</span>) &lt;&lt; <span class="built_in">sqrt</span>(<span class="built_in">Search</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>, n)) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="洛谷-P1436-棋盘分割"><a href="#洛谷-P1436-棋盘分割" class="headerlink" title="洛谷-P1436-棋盘分割"></a><a href="https://www.luogu.com.cn/problem/P1436">洛谷-P1436-棋盘分割</a></h2><p>这个跟上面一题其实是一样的，经过数学推导，上题求均方差，也就是求平方和，但均方差可以直接求。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> m = <span class="number">8</span>, M = <span class="number">9</span>, N = <span class="number">20</span>, PosInf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, s[M][M];</span><br><span class="line"><span class="keyword">double</span> f[M][M][M][M][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = s[x2][y2] - s[x2][y1 - <span class="number">1</span>] - s[x1 - <span class="number">1</span>][y2] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> sum * sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Search</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> &amp;v = f[x1][y1][x2][y2][k];</span><br><span class="line">    <span class="keyword">if</span> (v &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> v = <span class="built_in">Calc</span>(x1, y1, x2, y2);</span><br><span class="line"></span><br><span class="line">    v = PosInf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x1; i &lt; x2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(x1, y1, i, y2, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(i + <span class="number">1</span>, y1, x2, y2));</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(i + <span class="number">1</span>, y1, x2, y2, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(x1, y1, i, y2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = y1; i &lt; y2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(x1, y1, x2, i, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(x1, i + <span class="number">1</span>, x2, y2));</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(x1, i + <span class="number">1</span>, x2, y2, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(x1, y1, x2, i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cin &gt;&gt; s[i][j];</span><br><span class="line">            s[i][j] += s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">Search</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>, n) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间型动态规划的两种实现方式"><a href="#区间型动态规划的两种实现方式" class="headerlink" title="区间型动态规划的两种实现方式"></a>区间型动态规划的两种实现方式</h2><h3 id="迭代式（推荐）"><a href="#迭代式（推荐）" class="headerlink" title="迭代式（推荐）"></a>迭代式（推荐）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= n; len++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l + len - <span class="number">1</span> &lt;= n; l++)</span><br><span class="line">    &#123;</span><br><span class="line">        r = l + len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt; r; k++)</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="记忆化搜索式（适合状态定义较为复杂的情况）"><a href="#记忆化搜索式（适合状态定义较为复杂的情况）" class="headerlink" title="记忆化搜索式（适合状态定义较为复杂的情况）"></a>记忆化搜索式（适合状态定义较为复杂的情况）</h3><p>如果状态定义中数组维数太多，需要些很多重循环，这时可以用记忆化搜索的形式来写。</p><h2 id="2D-1D-的四边形不等式优化"><a href="#2D-1D-的四边形不等式优化" class="headerlink" title="2D/1D 的四边形不等式优化"></a>2D/1D 的四边形不等式优化</h2><p> $2D/1D$ $dp$ 的方程模型如下：<br>$$<br>d[i, j] = \min_{l(i, j) \le k \le r(k, j)} (d[i, k] + d[k + 1, j] + val(i, j))<br>$$</p><p>其中 $2D$ 指枚举的状态数， $1D$ 指枚举的决策数，最典型的是区间 $dp$ ，明显，直接 $dp$ 时间为 $O(n^3)$ （一定要注意 $val(i, j)$ 与 $k$ 无关）</p><p><strong>警告！下面的证明都很繁琐且没啥用（完全不影响做题），可以只记结论</strong></p><h3 id="2D-状态四边形不等式判定"><a href="#2D-状态四边形不等式判定" class="headerlink" title="2D 状态四边形不等式判定"></a>2D 状态四边形不等式判定</h3><p>对于 $2D/1D$ $dp$ 的方程：<br>$$<br>d[i, j] = \min_{l(i, j) \le k \le r(k, j)} (d[i, k] + d[k + 1, j] + val(i, j))<br>$$<br>若 $val$ 满足<strong>四边形不等式</strong>和<strong>区间包含单调性</strong>， $d$ 满足 $d[i, i] =  val(i, i) = 0$ ，且 $i \le l(i, j) \le r(i, j) &lt; j$ 则 $d[i, j]$ 满足四边形不等式</p><p>证明（又臭又长）：</p><p>当 $j = i + 1$ 时， $d[i, j + 1] + d[i + 1, j] = d[i, i + 2] + d[i + 1, i + 1]$ ，又因为 $d[i + 1, i + 1] = 0$ ，故 $d[i, j + 1] + d[i + 1, j] = d[i, i + 2]$ </p><p>由于 $i \le l(i, j) \le r(i, j) &lt; j$ ， $d[i, i + 2]$ 的决策最多只有 $i$ 和 $i + 1$ </p><ol><li><p>若 $d[i, i + 2]$ 的最优决策为 $i + 1$ ，则<br>$$<br>d[i, i + 2] = d[i, i + 1] + d[i + 2, i + 2] + val(i, i + 2) = d[i, i + 1] + val(i, i + 2)<br>$$<br> ，发现 $d[i, i + 1]$ 的决策只有 $i$ ，故 $d[i, i + 1] = d[i, i] + d[i + 1, i + 1] + val(i, i + 1) = val(i, i + 1)$ ，综合两式，有 $d[i, i + 2] = val(i, i + 1) + val(i, i + 2) = d[i, j + 1] + d[i + 1, j]$  </p><p>同样因为 $d[i, i] = 0$ ，有 $d[i, i + 1] + d[i + 1, i + 2] = val(i, i + 2) + val(i + 1, i + 2) = d[i, j] + d[i + 1, j + 1]$ </p><p>由于 $val$ 满足四边形不等式，有 $val(i, i + 1) + val(i, i + 2) \ge val(i, i + 1) + val(i + 1, i + 2)$ </p><p>故 $d[i, j + 1] + d[i + 1, j] \ge d[i, j] + d[i + 1, j + 1]$ ，即 $d$ 满足四边形不等式</p></li><li><p>若 $d[i, i + 2]$ 的最优决策为 $i$  ，同理有<br>$$<br>d[i, i + 2] = d[i, i] + d[i + 1, i + 2] + val(i, i + 2) = d[i + 1, i + 2] + val(i, i + 2) = val(i + 1, i + 2) + val(i, i + 2)<br>$$<br>$d[i + 1, i + 2] + d[i, i + 1] = val(i + 1, i + 2) + val(i, i + 1) = d[i + 1, j + 1] + d[i, j]$ </p><p>同样由 $val$ 满足四边形不等式，得 $d[i, j + 1] + d[i + 1, j] \ge d[i, j] + d[i + 1, j + 1]$ </p></li></ol><p>综上，当 $j = i + 1$ ，即 $j - i = 1$ 时， $d$ 满足四边形不等式</p><p>假设当 $j - i &lt; k$ 时四边形不等式成立，下面证明 $j - i = k$ 时成立</p><p>设 $d[i, j + 1]$ 最优决策为 $x$ ， $d[i + 1, j]$ 最优决策为 $y$  </p><p>有等式 $(1)$ ：<br>$$<br>d[i, j + 1] + d[i + 1, j] = d[i, x] + d[x + 1, j + 1] + val(i, j + 1) + d[i + 1, y] + d[y + 1, j] + val(i + 1, j)<br>$$<br>而对于 $d[i, j]$ 和 $d[i + 1, j + 1]$ ，  $x, y$ 就不一定是最优决策了</p><p>当 $x \le y$ 时，取 $x$ 为 $d[i, j]$ 的决策， $y$ 为 $d[i + 1, j + 1]$ 的决策，由不优得不等式 $(2)$ ：<br>$$<br>d[i, x] + d[x + 1, j] + val(i, j) + d[i + 1, y] + d[y + 1, j + 1] + val(i + 1, j + 1) \ge d[i, j] + d[i + 1, j + 1]<br>$$<br> $(1) + (2)$ 得 $(3)$ ：<br>$$<br>\begin{aligned}<br>d[i, x] + d[x + 1, j] + val(i, j) + d[i + 1, y] + d[y + 1, j + 1] + val(i + 1, j + 1) + d[i, j + 1] + d[i + 1, j] &amp; \ge d[i, j] + d[i + 1, j + 1] + d[i, x] + d[x + 1, j + 1] + val(i, j + 1) + d[i + 1, y] + d[y + 1, j] + val(i + 1, j) \\<br>d[x + 1, j] + d[i + 1, y] + d[y + 1, j + 1] + d[i, j + 1] + d[i + 1, j] + val(i, j) + val(i + 1, j + 1) &amp; \ge d[i, j] + d[i + 1, j + 1] + d[x + 1, j + 1] + d[y + 1, j] + val(i, j + 1) + val(i + 1, j) \\<br>\end{aligned}<br>$$<br>有 $x + 1 \le y + 1 \le j &lt; j + 1$ ，由归纳假设，有 $d[x + 1, j + 1] + d[y + 1, j] \ge d[x + 1, j] + d[y + 1, j + 1]$ ，结合 $val$ 满足四边形不等式，与 $(3)$ 比较得：<br>$$<br>d[i, j + 1] + d[i + 1, j] \ge d[i, j] + d[i + 1, j + 1]<br>$$<br>则 $j - i = k$ 时满足四边形不等式；</p><p>当 $x \ge y$ 时，取 $y$ 为 $d[i, j]$ 的决策， $x$ 为 $d[i + 1, j + 1]$ 的决策，同理可证得 $j - i = k$ 时满足四边形不等式</p><p>由数学归纳法原理，原命题得证</p><p>QED</p><h3 id="2D-决策单调性定理"><a href="#2D-决策单调性定理" class="headerlink" title="2D 决策单调性定理"></a>2D 决策单调性定理</h3><p>对于 2D/1D dp 的方程：<br>$$<br>d[i, j] = \min_{l(i, j) \le k \le r(k, j)} (d[i, k] + d[k + 1, j] + val(i, j))<br>$$<br>记 $d[i, j]$ 的最优决策点为 $bp[i, j]$ ，若 $\forall i &lt; j$ 有 $bp[i, j - 1] \le bp[i, j] \le bp[i + 1, j]$ ，则称 $d$ 具有决策单调性</p><p>若 $d$ 满足 $d[i, i] =  val(i, i) = 0$ ， $i \le l(i, j) \le r(i, j) &lt; j$ ，且 $d$ 满足四边形不等式，则 $d$ 具有决策单调性</p><p>证明：</p><p>记 $p = bp[i, j]$ ，则 $\forall i &lt; k \le p$ ，因为 $d$ 满足四边形不等式，有：<br>$$<br>\begin{aligned}<br>d[i, p] + d[i + 1, k] &amp; \ge d[i, k] + d[i + 1, p] \\<br>d[i + 1, k] - d[i + 1, p] &amp; \ge d[i, k] - d[i, p] \\<br>\end{aligned}<br>$$<br>又由 $p$ 的最优性（带 dp 方程消去 $val$ 可得）：<br>$$<br>\begin{aligned}<br>d[i, k] + d[k + 1, j] &amp; \ge d[i, p] + d[p + 1, j] \\<br>d[i, k] - d[i, p] + d[k + 1, j] - d[p + 1, j] &amp; \ge 0 \\<br>\end{aligned}<br>$$<br>考虑对于 $d[i + 1, j]$ 用 $k$ 为决策减用 $p$ 为决策：<br>$$<br>\begin{aligned}<br>&amp; (d[i + 1, k] + d[k + 1, j] + val(i + 1, j)) - (d[i + 1, p] + d[p + 1, j] + val(i + 1, j)) \\<br>= &amp; (d[i + 1, k] - d[i + 1, p]) + (d[k + 1, j] - d[p + 1, j]) \\<br>\ge &amp; (d[i, k] - d[i, p]) + (d[k + 1, j] - d[p + 1, j]) \\<br>\ge &amp; 0<br>\end{aligned}<br>$$<br>也就是说，对于 $d[i + 1, j]$ ， $p$ 比任意 $k \le p$ 更优，故 $bp[i + 1, j] \ge bp[i, j]$ ，同理可证明 $bp[i, j - 1] \le bp[i, j]$ </p><p>QED</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p> 2D/1D 的实现没有 1D/1D 那么花里胡哨，就是直接记录 $bp$ ，对于 $d[i, j]$ ，只在 $bp[i, j - 1] \le k \le bp[i + 1, j]$ 的范围枚举 $k$ 维护 $d, bp$ </p><p>时间也很好分析：<br>$$<br>\begin{aligned}<br>&amp; \sum _{i = 1}^{n - 1} \sum _{j = i + 1}^{n} (bp[i + 1, j] - bp[i, j - 1] + 1) \\<br>= &amp; \sum _{i = 1} ^ {n - 1} (bp[i + 1, n] - bp[1, n - i] + n - i) \\<br>\le &amp; n^2<br>\end{aligned}<br>$$<br>故时间复杂度优化到了 $O(n^2)$ </p><p>你可能觉得似乎没有 1D/1D 优化的厉害，但其实， 1D/1D 状态数是 $O(n)$ 的，四边形不等式把转移从 $O(n)$ 优化到了 $O(\log n)$ （斜率优化在最简单的情况下可以优化到 $O(1)$ ，最麻烦情况下只有 $O(\log^2 n)$ ）；而 2D/1D 状态数是 $O(n^2)$ 的，四边形不等式把转移从 $O(n)$ 直接优化到 $O(1)$ ，作为<strong>对转移的优化</strong>，已经非常优秀了（事实上，如果你不考虑重新设计状态/排除无用状态， $O(n^2)$ 已经是最好复杂度了）</p><p>最后提醒一点：以上的复杂度分析都没有考虑计算 $val$ 的复杂度！（这一点从例题十中也能看出）</p><h2 id="例题十一"><a href="#例题十一" class="headerlink" title="例题十一"></a>例题十一</h2><p><a href="https://www.acwing.com/problem/content/307/">一个古老的石头游戏</a></p><p>题意同“石子合并”，但要求 $O(n^2)$ ，太经典了，就是板子</p><p>话说好像有 $O(n \log n)$ 做法，但那和我们要讲的没关系了……</p><p>艹，好像数据加强了， $O(n^2)$ 过不了了！ shit ！</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>呃呃，还要思路吗？</p><p>写个方程吧：设 $d[i, j]$ 表示“合并区间 $[i, j]$ 的最小代价”，转移有：<br>$$<br>d[i, j] = \min _{i \le k &lt; j} (d[i, k] + d[k + 1, j]) + \sum _{t = i}^j a _t<br>$$<br> $val(i, j)$ 显然可以前缀和做到 $O(1)$ </p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5000</span> + <span class="number">5</span>, INF = <span class="number">1e9</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N], d[N][N], bp[N][N];</span><br><span class="line">LL sum[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), n; sum[<span class="number">0</span>] = <span class="number">0</span>, <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d[<span class="number">1</span>][n]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), sum[i] = sum[i - <span class="number">1</span>] + a[i], d[i][i] = <span class="number">0</span>, bp[i][i] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; ++len)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j, k; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">for</span> (d[i][j = i + len - <span class="number">1</span>] = INF, k = bp[i][j - <span class="number">1</span>]; k &lt;= bp[i + <span class="number">1</span>][j] &amp;&amp; k &lt; j; ++k)</span><br><span class="line">                    <span class="keyword">if</span> (d[i][k] + d[k + <span class="number">1</span>][j] + sum[j] - sum[i - <span class="number">1</span>] &lt; d[i][j]) d[i][j] = d[i][bp[i][j] = k] + d[k + <span class="number">1</span>][j] + sum[j] - sum[i - <span class="number">1</span>];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 区间dp </tag>
            
            <tag> 讲课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蒲公英</title>
      <link href="/2022/03/18/%E8%92%B2%E5%85%AC%E8%8B%B1/"/>
      <url>/2022/03/18/%E8%92%B2%E5%85%AC%E8%8B%B1/</url>
      
        <content type="html"><![CDATA[<p>经典的区间众数（分块永远的神）。</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4168">蒲公英</a></p><p> 考虑分块，令块的大小为 $ \frac{n}{len}$，则一共就有 $len$ 块，预处理出从 $l$  到 $r$ 的区间数的个数和区间众数。</p><p>对于查询，将答案区间分为三部分：$[l,hh)$，$[hh, tt]$，$(tt, r]$ 即将区间分成散块和整块，那么答案只可能是散块中的数或整块中的数。</p><ul><li>当答案的贡献仅来自于整块时，一定是已经与处理好的整块众数。</li><li>如果不是，说明答案一定在散块中存在过，直接扫描散块，然后查询即可。</li></ul><p>关于 $len$ 的取值，考虑时间复杂度为：$O(NT^2 + MN/T)$，空间复杂度为：$O(NT^2)$，不妨设$M=N$，此时可以发现 $T = \sqrt [3] {N}$ 复杂度分配较为平均，可以通过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> last, ans, res;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">40</span>][<span class="number">40</span>], a[N], seg[<span class="number">40</span>][<span class="number">40</span>][N];</span><br><span class="line"><span class="keyword">int</span> len, limit;</span><br><span class="line"><span class="keyword">int</span> pos[N], l[N], r[N], num[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; d;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed, <span class="keyword">int</span> &amp;hh, <span class="keyword">int</span> &amp;tt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i ++)</span><br><span class="line">        <span class="keyword">if</span>(st &lt;= l[i] &amp;&amp; r[i] &lt;= ed) </span><br><span class="line">        &#123; hh = i; <span class="keyword">break</span>; &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">        <span class="keyword">if</span>(st &lt;= l[i] &amp;&amp; r[i] &lt;= ed)</span><br><span class="line">        &#123; tt = i; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]), d.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    <span class="built_in">sort</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>());</span><br><span class="line">    d.<span class="built_in">erase</span>(<span class="built_in">unique</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>()), d.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) a[i] = <span class="built_in">lower_bound</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), a[i]) - d.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">    limit = n / (<span class="built_in">cbrt</span>(n) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; len * limit) r[len] = i - <span class="number">1</span>, len ++, l[len] = i;</span><br><span class="line">        pos[i] = len;</span><br><span class="line">    &#125;</span><br><span class="line">    r[len] = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i, ans;j &lt;= len;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = l[i];k &lt;= r[j];k ++)</span><br><span class="line">            &#123;</span><br><span class="line">                seg[i][j][a[k]] ++;</span><br><span class="line">                <span class="keyword">if</span>(seg[i][j][a[k]] == ans) s[i][j] = <span class="built_in">min</span>(s[i][j], a[k]);</span><br><span class="line">                <span class="keyword">if</span>(seg[i][j][a[k]] &gt; ans) ans = seg[i][j][a[k]], s[i][j] = a[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> st, ed, hh, tt;</span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(st), <span class="built_in">read</span>(ed);</span><br><span class="line">        st = (st + last - <span class="number">1</span>) % n + <span class="number">1</span>, ed = (ed + last - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(st &gt; ed) <span class="built_in">swap</span>(st, ed);</span><br><span class="line">        hh = tt = <span class="number">0</span>;</span><br><span class="line">        ans = res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">ask</span>(st, ed, hh, tt);</span><br><span class="line">        <span class="keyword">if</span>(hh) <span class="keyword">for</span>(<span class="keyword">int</span> i = st;i &lt; l[hh];i ++) num[a[i]] ++;</span><br><span class="line">        <span class="keyword">if</span>(tt) <span class="keyword">for</span>(<span class="keyword">int</span> i = r[tt] + <span class="number">1</span>;i &lt;= ed;i ++) num[a[i]] ++;</span><br><span class="line">        <span class="keyword">if</span>(!hh &amp;&amp; !tt) <span class="keyword">for</span>(<span class="keyword">int</span> i = st;i &lt;= ed;i ++) num[a[i]] ++;</span><br><span class="line">        ans = num[s[hh][tt]] + seg[hh][tt][s[hh][tt]], res = s[hh][tt];</span><br><span class="line">        <span class="keyword">if</span>(hh &amp;&amp; tt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = st;i &lt; l[hh];i ++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(num[a[i]] + seg[hh][tt][a[i]] == ans) res = <span class="built_in">min</span>(res, a[i]);</span><br><span class="line">                <span class="keyword">if</span>(num[a[i]] + seg[hh][tt][a[i]] &gt; ans) ans = num[a[i]] + seg[hh][tt][a[i]], res = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = r[tt] + <span class="number">1</span>;i &lt;= ed;i ++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(num[a[i]] + seg[hh][tt][a[i]] == ans) res = <span class="built_in">min</span>(res, a[i]);</span><br><span class="line">                <span class="keyword">if</span>(num[a[i]] + seg[hh][tt][a[i]] &gt; ans) ans = num[a[i]] + seg[hh][tt][a[i]], res = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = st;i &lt;= ed;i ++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(num[a[i]] == ans) res = <span class="built_in">min</span>(res, a[i]);</span><br><span class="line">                <span class="keyword">if</span>(num[a[i]] &gt; ans) ans = num[a[i]], res = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        last = d[res - <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, last);</span><br><span class="line">        <span class="keyword">if</span>(hh) <span class="keyword">for</span>(<span class="keyword">int</span> i = st;i &lt; l[hh];i ++) num[a[i]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(tt) <span class="keyword">for</span>(<span class="keyword">int</span> i = r[tt] + <span class="number">1</span>;i &lt;= ed;i ++) num[a[i]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!hh &amp;&amp; !tt) <span class="keyword">for</span>(<span class="keyword">int</span> i = st;i &lt;= ed;i ++) num[a[i]] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 分块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小割树</title>
      <link href="/2022/03/16/%E6%9C%80%E5%B0%8F%E5%89%B2%E6%A0%91/"/>
      <url>/2022/03/16/%E6%9C%80%E5%B0%8F%E5%89%B2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>考试时再一次撞到了，依旧不会，爆蛋（<del>小编不理解啊</del>）</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>先看看它是干什么的：将一个无向图转化成树，满足树上任意两点的最小割等于原图的最小割。</p><p>抄抄定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义一棵树T为最小割树，如果对于树上的所有边(s,t)，树上去掉(s,t)后产生的两个集合恰好是原图上(s,t)的最小割把原图分成的两个集合，且边(u,v)的权值等于原图上(u,v)的最小割</span><br></pre></td></tr></table></figure><p>这时我们就需要构造最小割树，我们得知 $dinic$ 的最后一次增广会以最小割的代价将图割开，此时 我们考虑分治：</p><p>​    <img src="1.png"></p><p>定义 $val[x][y]$ 为 $x$ 和 $y$ 之间的最小割。</p><p>可以发现，$val[x][y] = min(min(val[x][S],val[S][T]),val[T][y])$。证明据巨佬说不显然，有兴趣的童鞋可以上网查一查。</p><p>之后就可以在当前点集随意选取两个点 $u,v$，在原图上跑出他们之间的最小割，然后就在树上连一条从 $u$ 到 $v$,权值为 $val[u][v]$的边，之后递归处理即可。</p><p>时间复杂度：$O(n^3m)$ 然而根本跑不满。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500</span> + <span class="number">5</span>, M = <span class="number">6000</span> + <span class="number">5</span>, Inf = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">namespace</span> flow&#123;</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> e[M], ne[M], h[N];</span><br><span class="line">    <span class="keyword">int</span> w[M];</span><br><span class="line">    <span class="keyword">int</span> S, T;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        idx ++;</span><br><span class="line">        e[idx] = y, ne[idx] = h[x], h[x] = idx, w[idx] = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addage</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">add</span>(x, y, z), <span class="built_in">add</span>(y, x, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> depth[N], now[N];</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(depth, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(depth));</span><br><span class="line">        <span class="built_in">memcpy</span>(now, h, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line">        depth[S] = <span class="number">1</span>;</span><br><span class="line">        queue&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">        q.<span class="built_in">push</span>(S);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> o = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = h[o]; ~i;i = ne[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> j = e[i];</span><br><span class="line">                <span class="keyword">if</span>(depth[j] || !w[i]) <span class="keyword">continue</span>;</span><br><span class="line">                depth[j] = depth[o] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(T == j) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == T || !last) <span class="keyword">return</span> last;</span><br><span class="line">        <span class="keyword">int</span> rest = last, k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = now[x]; ~i &amp;&amp; rest;i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            now[x] = i;</span><br><span class="line">            <span class="keyword">if</span>(depth[j] == depth[x] + <span class="number">1</span> &amp;&amp; w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                k = <span class="built_in">dfs</span>(j, <span class="built_in">min</span>(w[i], rest));</span><br><span class="line">                <span class="keyword">if</span>(!k) </span><br><span class="line">                &#123;</span><br><span class="line">                    depth[j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                w[i] -= k;</span><br><span class="line">                w[i ^ <span class="number">1</span>] += k;</span><br><span class="line">                rest -= k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> last - rest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= idx;i += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            w[i] += w[i ^ <span class="number">1</span>];</span><br><span class="line">            w[i ^ <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        S = s, T = t;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">bfs</span>())</span><br><span class="line">            <span class="keyword">while</span>(res = <span class="built_in">dfs</span>(S, Inf)) ans += res;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[N][N];</span><br><span class="line"><span class="keyword">namespace</span> Seg&#123;</span><br><span class="line">    <span class="keyword">int</span> id[N];</span><br><span class="line">    <span class="keyword">int</span> q[N], p[N];</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> e[M], ne[M], h[N], w[M];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        idx ++;</span><br><span class="line">        e[idx] = y, ne[idx] = h[x], h[x] = idx, w[idx] = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addage</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">add</span>(x, y, z), <span class="built_in">add</span>(y, x, z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">int</span> num = flow:: <span class="built_in">dinic</span>(id[l], id[r]), st = id[l], ed = id[r];</span><br><span class="line">        ans[id[l]][id[r]] = ans[id[r]][id[l]] = num;</span><br><span class="line">        <span class="keyword">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l;i &lt;= r;i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(flow:: depth[id[i]]) q[++ hh] = id[i];</span><br><span class="line">            <span class="keyword">else</span> p[++ tt] = id[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= hh;i ++) id[i + l - <span class="number">1</span>] = q[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= tt;i ++) id[i + hh + l - <span class="number">1</span>] = p[i];</span><br><span class="line">        <span class="built_in">build</span>(l, l + hh - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">build</span>(l + hh, r);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= hh;i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>, o, u;j &lt;= tt;j ++)</span><br><span class="line">            &#123;</span><br><span class="line">                o = id[i + l - <span class="number">1</span>], u = id[j + hh + l - <span class="number">1</span>];</span><br><span class="line">                ans[o][u] = ans[u][o] = <span class="built_in">min</span>(<span class="built_in">min</span>(ans[o][st], ans[st][ed]), ans[ed][u]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">    <span class="built_in">memset</span>(flow:: h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(flow:: h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u, z;i &lt;= m;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;o, &amp;u, &amp;z);</span><br><span class="line">        flow:: <span class="built_in">addage</span>(o, u, z);</span><br><span class="line">        flow:: <span class="built_in">addage</span>(u, o, z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i ++) Seg:: id[i] = i;</span><br><span class="line">    Seg:: <span class="built_in">build</span>(<span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="keyword">while</span>(q --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> o, u;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;o, &amp;u);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[o][u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 最大流 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APIO2014 Split the sequence</title>
      <link href="/2022/02/15/APIO2014-Split-the-sequence/"/>
      <url>/2022/02/15/APIO2014-Split-the-sequence/</url>
      
        <content type="html"><![CDATA[<p>学不动了，做到<em>dp</em>都不顺利<em>QWQ</em>。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>可以证明：切的顺序和答案无关。</p><p>伪证明：对于最后块为$a,b,c$的切法共三种：<br>$$<br>\begin{aligned}<br>1.&amp;(a+b)c+ab=ac+ab+bc \\<br>2.&amp;(a+c)b+ac=ac+ab+bc<br>\end{aligned}<br>$$<br>然后推广（本人数学不太好，只会找规律）</p><p>然后<em>dp</em>方程就显然了：<br>$$<br>f[i][k]=f[j][k-1]+s<a href="s%5Bi%5D-s%5Bj%5D">j</a>，s[i]= \sum_1^ia[i]<br>$$<br>观察数据范围发现无法通过此题。</p><p>考虑优化：因为下一层的答案一定只可能由本层推出，所以令本层的答案为：$g[i]$，下一层的答案：$f[i]$。</p><p>当对于<em>i</em>来说取<em>j</em>比取<em>k</em>优秀时：<br>$$<br>\begin{aligned}<br>&amp;g[j]+s<a href="s%5Bi%5D-s%5Bj%5D">j</a>&gt;g[k]+s<a href="s%5Bi%5D-s%5Bk%5D">k</a>\\<br>&amp;\frac{g[j]-s[j]*s[j]-(g[k]-s[k]*s[k])}{-s[j]-(-s[k])}&gt;s[i]<br>\end{aligned}<br>$$<br>所以每个点都可以表示为：$(-s[j],g[j]-s[j]*s[j])$。</p><p>用斜率优化即可。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span> + <span class="number">5</span>, M = <span class="number">1e6</span> + <span class="number">5</span>, Inf = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line">LL g[N], f[N], hh = <span class="number">1</span>, tt = <span class="number">0</span>, q[N];</span><br><span class="line">LL s[N];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_k</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL y1 = g[x] - s[x] * s[x], y2 = g[y] - s[y] * s[y];</span><br><span class="line">    LL x1 = -s[x], x2 = -s[y];</span><br><span class="line">    <span class="keyword">if</span>(x1 == x2) <span class="keyword">return</span> - Inf;</span><br><span class="line">    <span class="keyword">return</span> (y1 - y2) / (<span class="keyword">double</span>)(x1 - x2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> from[<span class="number">205</span>][N];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x - y) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= m;k ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) g[i] = f[i];</span><br><span class="line">        hh = <span class="number">1</span>, tt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(hh &lt; tt &amp;&amp; <span class="built_in">compare</span>(<span class="built_in">get_k</span>(q[hh], q[hh + <span class="number">1</span>]), s[i]) != <span class="number">1</span>) hh ++;</span><br><span class="line">            from[k][i] = q[hh];</span><br><span class="line">            f[i] = g[q[hh]] + s[i] * s[q[hh]] - s[q[hh]] * s[q[hh]];</span><br><span class="line">            <span class="keyword">while</span>(hh &lt; tt &amp;&amp; <span class="built_in">compare</span>(<span class="built_in">get_k</span>(q[tt], q[tt - <span class="number">1</span>]), <span class="built_in">get_k</span>(q[tt - <span class="number">1</span>], i)) != <span class="number">-1</span>) tt --;</span><br><span class="line">            q[++ tt] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, f[n]);</span><br><span class="line">    ans = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, from[i][ans]);</span><br><span class="line">        ans = from[i][ans];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 斜率优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ynoi2015 盼君勿忘</title>
      <link href="/2022/02/14/Ynoi2015-%E7%9B%BC%E5%90%9B%E5%8B%BF%E5%BF%98/"/>
      <url>/2022/02/14/Ynoi2015-%E7%9B%BC%E5%90%9B%E5%8B%BF%E5%BF%98/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P5072">题目传送门</a></p><p><em>Ynoi</em>为数不多的可做的题（因为一个垃圾错误，调了一天，<del>醉了</del>）。</p><p>在此，<em>orz</em> wfy。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><em>lxl</em>的题，观察题面可以发现，没有修改操作，再审视题面，我们可以得到每一个相同数对区间的贡献：<br>$$<br>\begin{aligned}<br>ans += (2^{length} - 2^{length - k}) * a[i]<br>\end{aligned}<br>$$<br>区间总长度为$length$，$a[i]$在区间中出现的次数为$k$次。</p><p>证明：考虑简单容斥，总的方案数为$2^{length}$，不取$a[i]$的情况共$2^{length-k}$种，由于子序列已经去重，所以$a[i]$的贡献就为：$(2^{length} - 2^{length - k}) * a[i]$。</p><p>想到这里，不难看出这道题较为适合用莫队解决，但是由于区间长度在改变，修改操作并不是很好进行，我们考虑将每个数的出现次数分块，总区间中出现次数$&gt; \sqrt n$的数单独统计次数（其数量一定小于$\sqrt n$个），而出现次数相同时，上式显然满足乘法结合律，统计出现次数为$cnt$的数的值的和，可以发现只需枚举$cnt$即可，而$cnt$显然小于等于$\sqrt n$即可。</p><p>此时的时间复杂度已经降为$O(n \sqrt n \log n)$，可以拿到暴力分：18分。</p><p>想办法优化掉<em>log</em>，我们看出所有的快速幂的底数都为<em>2</em>，直接套光速幂，预处理出$2^{k \sqrt n}$和$2^k$的值，计算是直接取即可。</p><p>时间复杂度： $O((m + n) \sqrt n)$。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> pos[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">int</span> id, mod;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (node b) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos[l] == pos[b.l]) <span class="keyword">return</span> r &lt; b.r;</span><br><span class="line">        <span class="keyword">return</span> l &lt; b.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line">LL a[N];</span><br><span class="line"><span class="keyword">int</span> len, limit, cnt, tot[N], num[N];</span><br><span class="line">LL seg[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt ++;</span><br><span class="line">    <span class="keyword">if</span>(tot[a[x]] &gt; limit) <span class="keyword">return</span> num[a[x]] ++, <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    seg[num[a[x]]] -= a[x];</span><br><span class="line">    num[a[x]] ++;</span><br><span class="line">    seg[num[a[x]]] += a[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt --;</span><br><span class="line">    <span class="keyword">if</span>(tot[a[x]] &gt; limit) <span class="keyword">return</span> num[a[x]] --, <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    seg[num[a[x]]] -= a[x];</span><br><span class="line">    num[a[x]] --;</span><br><span class="line">    seg[num[a[x]]] += a[x];</span><br><span class="line">&#125;</span><br><span class="line">LL ans[N];</span><br><span class="line">LL maxn = <span class="number">0</span>;</span><br><span class="line">LL sum[N], val[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    val[<span class="number">0</span>] = sum[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= limit;i ++)</span><br><span class="line">        val[i] = (val[i - <span class="number">1</span>] + val[i - <span class="number">1</span>]) % mod;</span><br><span class="line">    sum[<span class="number">1</span>] = val[limit];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= limit;i ++)</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] * sum[<span class="number">1</span>] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">make</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum[x / limit] * val[x % limit] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) tot[a[i]] ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;q[i].l, &amp;q[i].r, &amp;q[i].mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++) q[i].id = i;</span><br><span class="line">    limit = <span class="built_in">sqrt</span>(n) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">1e5</span>;i ++)</span><br><span class="line">        <span class="keyword">if</span>(tot[i] &gt; limit) s.<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; limit * len) len ++;</span><br><span class="line">        pos[i] = len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="number">1</span>, r = <span class="number">0</span>; i &lt;= m;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mod = q[i].mod;</span><br><span class="line">        <span class="built_in">init</span>(mod);</span><br><span class="line">        <span class="keyword">while</span>(l &gt; q[i].l) <span class="built_in">add</span>(-- l);</span><br><span class="line">        <span class="keyword">while</span>(r &lt; q[i].r) <span class="built_in">add</span>(++ r);</span><br><span class="line">        <span class="keyword">while</span>(l &lt; q[i].l) <span class="built_in">del</span>(l ++);</span><br><span class="line">        <span class="keyword">while</span>(r &gt; q[i].r) <span class="built_in">del</span>(r --);</span><br><span class="line">        maxn = <span class="built_in">make</span>(cnt, mod);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= limit; j ++)</span><br><span class="line">            ans[q[i].id] += seg[j] * (maxn - <span class="built_in">make</span>(cnt - j, mod) + mod) % mod;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="keyword">int</span>)s.<span class="built_in">size</span>(); j ++)</span><br><span class="line">            <span class="keyword">if</span>(num[s[j]] != <span class="number">0</span>) ans[q[i].id] += s[j] * (maxn - <span class="built_in">make</span>(cnt - num[s[j]], mod) + mod) % mod;</span><br><span class="line">        </span><br><span class="line">        ans[q[i].id] = ans[q[i].id] % q[i].mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AT2382</title>
      <link href="/2022/02/13/AT2382/"/>
      <url>/2022/02/13/AT2382/</url>
      
        <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/agc015/tasks/agc015_d">题目传送门</a></p><span id="more"></span><p>考试总是考原题，以后还是要将刷题量提上去。</p><p>观察题目，分类讨论两个异或数的定义域。</p><p>1.我们先找出二进制下$A$和$B$最高的的不同位（最低位放右边，位数不同就补零）时（设其为$id$），因为$[A，2^{id} - 1)$之间进行$or$运算一定不会进位，也不会变小，所以$2^{id} - 1 - ((l &gt;&gt; id) &lt;&lt; id) + 1$这些数都可以取（值域还是$[A,2^{id} - 1)$），因为$B$和$A$在$id$左边的位都相同，所以$((B &gt;&gt; id) &lt;&lt; id) - l == (1 &lt;&lt; id) - ((l &gt;&gt; id) &lt;&lt; id)$，故第一部分的答案为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">z = (B &gt;&gt; id) &lt;&lt; id;</span><br><span class="line">ans += z - l; <span class="comment">// (z - 1) - (l - 1)</span></span><br></pre></td></tr></table></figure><p>2.再考虑最高位左边的相同位，$[2^{id},B]$ 间内的数相互运算 , 我们找出$B$中最高不同位以下的最高的一（设位数为$k$) ， 即$AxorB$的倒数第二个$1$，则设数$P$等于将$B$中$k$位以后的所有位改为$1$的值。</p><p>同理也可以证明，其值域也就为：$[2^{id}, P]$。</p><p>3.两个区间内的数相互异或，同理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">LL x, y, z, k, maxn;</span><br><span class="line"><span class="keyword">int</span> T, id, i;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">    <span class="keyword">if</span>(x == y) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    z = x ^ y;</span><br><span class="line">    <span class="keyword">while</span>(z)</span><br><span class="line">    &#123;</span><br><span class="line">        id ++;</span><br><span class="line">        z &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    id --;</span><br><span class="line">    z = (y &gt;&gt; id) &lt;&lt; id;</span><br><span class="line">    k = z ^ y;</span><br><span class="line">    ans = z - x;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        i ++;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i --;</span><br><span class="line">    maxn = y | ((<span class="number">1ll</span> &lt;&lt; (i + <span class="number">1</span>)) - <span class="number">1</span>);</span><br><span class="line">    LL l = x | z, r = z | (z - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(maxn &lt; l) ans += maxn - z + <span class="number">1</span> + r - l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> ans += r - z + <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ATCoder </tag>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AT2390</title>
      <link href="/2022/02/06/AT2390/"/>
      <url>/2022/02/06/AT2390/</url>
      
        <content type="html"><![CDATA[<p>被Dyd教育了（QWQ）。</p><span id="more"></span><p>讲课的第一题，理论应该不是很难，但涉及$SG$函数，本人不会，被现场教育了。</p><p><a href="https://atcoder.jp/contests/agc016/tasks/agc016_f">题目传送门</a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>$n$个点，$m$条边，所有的边$(u, v)$满足：$u &lt; v$，求$SG(1) \ != SG(2)$的方案数。<br>$$<br>\begin{aligned}<br>n &amp;\le 15 \\<br>m &amp;\le n*(n-1)<br>\end{aligned}<br>$$</p><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p>题目要求过于苛刻，考虑转化。可以发现总方案数为：$2^m$，所以我们只要求出$SG(1) = SG(2)$的方案数即可，于是我们考虑状压$dp$，令$dp[S]$为点集为$S$的方案数,考虑转移方程怎么写。</p><p>根据由小推大的原则，考虑$S$的子集$T$和$U=S-T$，令$ \forall SG_{i|U}=0$且$\forall SG_{i|T} \ !=0$，那么我们可以发现：</p><ul><li>1和2必须在同一子集，否则根据定义$SG(1)$不可能等于$SG(2)$。</li><li>根据$SG$函数的<a href="https://baike.baidu.com/item/SG%E5%87%BD%E6%95%B0/1004609?fr=aladdin">定义</a>，$T$中必定有一条边连向$U$，且$U$中有多少条边连向$T$却无所谓。</li></ul><p>那么可以得到$U$，$T$对$dp[S]$的影响就是：<br>$$<br>\begin{aligned}<br>dp[S] &amp;+= 2^{count(g[i] \ \wedge \ U)}, i \in U \\<br>dp[S] &amp;+= 2^{count(g[i] \ \wedge \ T) - 1}, i \in T<br>\end{aligned}<br>$$<br>$g[i]$指从$i$可以一次到达的边的集合。</p><p>其实也非常好理解，对于任意一条从$U$出发到$T$的边（总数为$tem1$）在不影响正确性的情况下可以有任意两种选择，而从$U$出发到$T$的边（总数为$tem2$）只有$tem2 - 1$条边可以有任意两种选择（至少有一条边连向$U$）。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">16</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">LL g[N], dp[<span class="number">1</span> &lt;&lt; N], pow2[<span class="number">1</span> &lt;&lt; N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    dp[<span class="number">0</span>] = pow2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++) pow2[i] = (pow2[i - <span class="number">1</span>] * <span class="number">2</span>) % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> o, u;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;o, &amp;u);</span><br><span class="line">        o --, u --;</span><br><span class="line">        g[o] |= (<span class="number">1</span> &lt;&lt; u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">1</span>; S &lt; (<span class="number">1</span> &lt;&lt; n); S ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((S &amp; <span class="number">1</span>) != (S &gt;&gt; <span class="number">1</span> &amp; <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u = S; u;u = u - <span class="number">1</span> &amp; S)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((u &amp; <span class="number">1</span>) != (u &gt;&gt; <span class="number">1</span> &amp; <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                LL ans = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++)</span><br><span class="line">                    <span class="keyword">if</span>(S &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(u &gt;&gt; i &amp; <span class="number">1</span>) ans = ans * pow2[__builtin_popcount(g[i] &amp; (S ^ u))] % mod;</span><br><span class="line">                        <span class="keyword">else</span> ans = ans * (pow2[__builtin_popcount(g[i] &amp; u)] - <span class="number">1</span>) % mod;</span><br><span class="line">                    &#125;</span><br><span class="line">                dp[S] = (dp[S] + dp[S ^ u] * ans % mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,(pow2[m] - dp[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>] + mod) % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Atcoder </tag>
            
            <tag> SG函数 </tag>
            
            <tag> 状压dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4117 [Ynoi2018] 五彩斑斓的世界</title>
      <link href="/2022/01/26/P4117-Ynoi2018-%E4%BA%94%E5%BD%A9%E6%96%91%E6%96%93%E7%9A%84%E4%B8%96%E7%95%8C/"/>
      <url>/2022/01/26/P4117-Ynoi2018-%E4%BA%94%E5%BD%A9%E6%96%91%E6%96%93%E7%9A%84%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>P7447 [Ynoi2007] rgxsxrs</title>
      <link href="/2022/01/25/P7447-Ynoi2007-rgxsxrs/"/>
      <url>/2022/01/25/P7447-Ynoi2007-rgxsxrs/</url>
      
        <content type="html"><![CDATA[<p>毒瘤的出题人，怪物一样的题目。</p><span id="more"></span><h1 id="题目简介"><a href="#题目简介" class="headerlink" title="题目简介"></a>题目简介</h1><p>维护一个序列，执行一下操作：</p><ul><li><p>$1 \ l \ r \ x$：表示将区间 $[l,r]$ 中所有 $&gt;x$ 的元素减去 $x$。</p></li><li><p>$2 \ l \ r$：表示询问区间 $[l,r]$ 的和，最小值，最大值。</p></li></ul><p>没了，就没了（<del>人没了</del>）。</p><p>数据范围：对于 $100%$ 的数据，$n,m≤5×10^5，1≤a_i,x≤10^9$ 。</p><p>时间：$3.00s$ ~ $6.00s$。</p><p>空间：$64.00MB$</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>观察题面，数据范围，时空限制，然后我们可以（<del>放弃</del>）联想到区间的最大值一定不会变化，在和传说中的第二分块联想了一下，可以联想到值域分块，然而值域过于巨大，我们考虑再次将值域细化成：$B^{i-1}-B^i$ ，这样的话我们发现如果最小值 $\ge$ $x$，打上标记然后返回，最大值 $\le$ $x$ 直接跳过，然后就到了最关键的最大值 $\ge$ x $\ge$ 最小值的时候。</p><p>仔细思考这一步应该怎么处理，如果使用普通线段树的话，时间必定爆炸，于是考虑二次分块，首先分块数列，然后再在每一块中建立一颗值域线段树，在线段树中执行上述操作。</p><p>设上述块的数量为 $cnt$，特殊情况的块长为 $len$，故在值域线段树中最多每次执行$ \frac {len}{x}$次操作，那么最后就要使$\frac{len}{x} * cnt$最小，当 $x$ 很大时我们可以发现没有多少数比它大，当 $x$ 很小的时候我们同理可以发现没有多少数比他小，故我们需要特殊考虑的就是刚好卡在中间的数，此时令$\frac{len}{x} = B$，此时$cnt = \log _{B}{10^9}$时，此时的时间复杂度可以证明当$B = 16$时最小为 $O((n+m) × \log _{B}{10^9} × \log n + n × B × \log n× \log _B 10^9)$。</p><p>然而你打完一交，$MLE$ 了，再次考虑优化，因为线段树的空间随层数的递增而成倍增长，所以重点放在优化叶子节点，我们不妨设置一个数 $limit$ ，让线段树 $\le \ limit$ 的区间直接暴力（底层分块：底层暴力分块）， 理论上 $limit = 4$ 时最优。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(x) x &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(x) x &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">32</span>, mod = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> limit = <span class="number">40</span>; <span class="comment">// 事实上40更优秀</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment</span>&#123;</span> <span class="comment">// 线段树的底层 </span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line">&#125;tree[N / limit &lt;&lt; <span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> now[N];</span><br><span class="line"><span class="keyword">int</span> bet[N];</span><br><span class="line"><span class="keyword">int</span> minn, maxn;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line">LL sum;</span><br><span class="line"><span class="keyword">int</span> down[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span>&#123;</span> <span class="comment">// 分块 </span></span><br><span class="line">LL l, r;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span> <span class="comment">// 建树</span></span><br><span class="line"><span class="keyword">int</span> minn = <span class="number">2147483647</span>, maxn, cnt;</span><br><span class="line">LL add, sum;</span><br><span class="line">&#125;tr[N / limit &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[x].sum = tr[x].cnt = tr[x].maxn = <span class="number">0</span>, tr[x].minn = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = tree[x].l;i &lt;= tree[x].r; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(bet[i] == id)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].cnt ++;</span><br><span class="line">tr[x].sum += a[i];</span><br><span class="line">tr[x].minn = <span class="built_in">min</span>(tr[x].minn, a[i]);</span><br><span class="line">tr[x].maxn = <span class="built_in">max</span>(tr[x].maxn, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[x].flag) <span class="built_in">change</span>(x); <span class="comment">// 小于就暴力</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tr[x].sum = tr[<span class="built_in">l</span>(x)].sum + tr[<span class="built_in">r</span>(x)].sum;</span><br><span class="line">tr[x].cnt = tr[<span class="built_in">l</span>(x)].cnt + tr[<span class="built_in">r</span>(x)].cnt;</span><br><span class="line">tr[x].minn = <span class="built_in">min</span>(tr[<span class="built_in">l</span>(x)].minn, tr[<span class="built_in">r</span>(x)].minn);</span><br><span class="line">tr[x].maxn = <span class="built_in">max</span>(tr[<span class="built_in">l</span>(x)].maxn, tr[<span class="built_in">r</span>(x)].maxn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addage</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">// 将y下传给x</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[x].sum += tr[x].cnt * tr[y].add;</span><br><span class="line">tr[x].add += tr[y].add;</span><br><span class="line">tr[x].minn += tr[y].add;</span><br><span class="line">tr[x].maxn += tr[y].add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tr[x].add) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(tree[x].flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = tree[x].l;i &lt;= tree[x].r;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(bet[i] == id) a[i] += tr[x].add;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">addage</span>(<span class="built_in">l</span>(x), x), <span class="built_in">addage</span>(<span class="built_in">r</span>(x), x);</span><br><span class="line">tr[x].add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change_all</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">1</span>) <span class="built_in">change_all</span>(x &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> val = a[x];</span><br><span class="line"><span class="built_in">change_all</span>(now[x]);</span><br><span class="line">a[x] = val;</span><br><span class="line">x = now[x];</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">for</span>(x &gt;&gt;= <span class="number">1</span>; x;x &gt;&gt;= <span class="number">1</span>) <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= tree[x].l &amp;&amp; tree[x].r &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">minn = <span class="built_in">min</span>(minn, tr[x].minn);</span><br><span class="line">maxn = <span class="built_in">max</span>(maxn, tr[x].maxn);</span><br><span class="line">sum += tr[x].sum;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">if</span>(tree[x].flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = tree[x].l;i &lt;= tree[x].r;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i &gt;= l &amp;&amp; i &lt;= r &amp;&amp; bet[i] == id)</span><br><span class="line">&#123;</span><br><span class="line">minn = <span class="built_in">min</span>(minn, a[i]);</span><br><span class="line">maxn = <span class="built_in">max</span>(maxn, a[i]);</span><br><span class="line">sum += a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[<span class="built_in">l</span>(x)].r &gt;= l) <span class="built_in">ask</span>(x &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span>(tree[<span class="built_in">r</span>(x)].l &lt;= r) <span class="built_in">ask</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, LL w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].maxn &lt;= w) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(tree[x].l &gt;= l &amp;&amp; tree[x].r &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].minn &gt; w)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].add -= w;</span><br><span class="line">tr[x].maxn -= w;</span><br><span class="line">tr[x].minn -= w;</span><br><span class="line">tr[x].sum -= tr[x].cnt * w;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">if</span>(tree[x].flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = tree[x].l;i &lt;= tree[x].r;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(bet[i] == id) a[i] -= (a[i] &gt; w) * w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">modify</span>(<span class="built_in">l</span>(x), l, r, w), <span class="built_in">modify</span>(<span class="built_in">r</span>(x), l, r, w);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">if</span>(tree[x].flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = tree[x].l;i &lt;= tree[x].r;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= i &amp;&amp; i &lt;= r &amp;&amp; bet[i] == id) a[i] -= (a[i] &gt; w) * w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[<span class="built_in">l</span>(x)].r &gt;= l) <span class="built_in">modify</span>(<span class="built_in">l</span>(x), l, r, w);</span><br><span class="line"><span class="keyword">if</span>(tree[<span class="built_in">r</span>(x)].l &lt;= r) <span class="built_in">modify</span>(<span class="built_in">r</span>(x), l, r, w);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].minn &gt;= l) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">if</span>(tree[x].flag)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].sum = tr[x].cnt = tr[x].maxn = <span class="number">0</span>, tr[x].minn = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = tree[x].l;i &lt;= tree[x].r;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(bet[i] == id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= l)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].cnt ++;</span><br><span class="line">tr[x].sum += a[i];</span><br><span class="line">tr[x].maxn = <span class="built_in">max</span>(tr[x].maxn, a[i]);</span><br><span class="line">tr[x].minn = <span class="built_in">min</span>(tr[x].minn, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> down[++ tot] = i, bet[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">del</span>(<span class="built_in">l</span>(x)), <span class="built_in">del</span>(<span class="built_in">r</span>(x));</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;seg[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(seg[i].l &lt;= a[x] &amp;&amp; seg[i].r &gt;= a[x])</span><br><span class="line">&#123;</span><br><span class="line">bet[x] = i, seg[i].<span class="built_in">modify</span>(x);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[x].l = l, tree[x].r = r;</span><br><span class="line"><span class="keyword">if</span>(r - l &gt; limit)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">tree[x].flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;l &lt;= r;l ++) now[l] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">minn = <span class="number">2147483647</span>, maxn = sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt;i ++)</span><br><span class="line">seg[i].<span class="built_in">ask</span>(<span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt;i ++)</span><br><span class="line">&#123;</span><br><span class="line">seg[i].<span class="built_in">modify</span>(<span class="number">1</span>, l, r, w);</span><br><span class="line">seg[i].<span class="built_in">del</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;tot;tot --) <span class="built_in">add</span>(down[tot]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> last;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span>(LL j = <span class="number">1</span>;;j *= B)<span class="comment">// 初始化</span></span><br><span class="line">&#123;</span><br><span class="line">seg[++ cnt].l = j;</span><br><span class="line">seg[cnt].id = cnt;</span><br><span class="line">seg[cnt].r = j * B - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(seg[cnt].r &gt;= <span class="number">1e9</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">add</span>(i);</span><br><span class="line"><span class="keyword">int</span> op, l, r, w;</span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(op), <span class="built_in">read</span>(l), <span class="built_in">read</span>(r);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(w);</span><br><span class="line">l ^= last, r ^= last, w ^= last;</span><br><span class="line"><span class="comment">// if(l &gt; r) swap(l, r);</span></span><br><span class="line"><span class="built_in">add</span>(l, r, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">l ^= last, r ^= last;</span><br><span class="line"><span class="comment">// if(l &gt; r) swap(l, r); // 出题人较为良心</span></span><br><span class="line"><span class="built_in">ask</span>(l, r);</span><br><span class="line">last = sum % mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %d %d\n&quot;</span>, sum, minn, maxn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟费用流</title>
      <link href="/2022/01/24/%E6%A8%A1%E6%8B%9F%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
      <url>/2022/01/24/%E6%A8%A1%E6%8B%9F%E8%B4%B9%E7%94%A8%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>这东西强，好用，就是难（<del>其实是本人太菜了</del>）。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>当一类问题被转化成费用流时，一般来讲时间复杂度的上限是 $O(n^2m)$ 只要出题人想卡，分分钟卡掉（前提是出题人能写出更优的算法，<del>这种都不是人</del>），在这类分支中就有一类优化：模拟费用流。</p><p>过于抽象，从模板题讲起走。</p><h1 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h1><h2 id="P5470-NOI2019-序列"><a href="#P5470-NOI2019-序列" class="headerlink" title="P5470 [NOI2019] 序列"></a><a href="https://www.luogu.com.cn/problem/P5470">P5470 [NOI2019] 序列</a></h2><p>不难想到这是费用流，但观察数据范围发现貌似并不可过。</p><p><img src="1.jpg" alt="image"></p><p>由此建图可以跑满暴力分，高贵的 $dinic$ 连暴力分都没有跑满，在 $48$ 分在折戟沉沙。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, M = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL Inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> e[M], ne[M], h[N], w[M], cost[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx, w[idx] = z, cost[idx] = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addage</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">add</span>(x, y, z, c), <span class="built_in">add</span>(y, x, <span class="number">0</span>, -c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, S, T;</span><br><span class="line"><span class="keyword">int</span> dis[N], now[N];</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line">LL ret;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line"><span class="built_in">memcpy</span>(now, h, <span class="built_in"><span class="keyword">sizeof</span></span>(now));</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">q.<span class="built_in">push</span>(S);</span><br><span class="line">dis[S] = <span class="number">1</span>;</span><br><span class="line">dis[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> o = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">vis[o] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[o]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(w[i] &amp;&amp; dis[j] &gt; dis[o] + cost[i])</span><br><span class="line">&#123;</span><br><span class="line">dis[j] = dis[o] + cost[i];</span><br><span class="line"><span class="keyword">if</span>(!vis[j]) q.<span class="built_in">push</span>(j), vis[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[T] != Inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, LL last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == T || !last) <span class="keyword">return</span> last;</span><br><span class="line">LL rest = last, k;</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = now[x]; ~i &amp;&amp; rest; i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line">now[x] = i;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(!vis[j] &amp;&amp; w[i] &amp;&amp; dis[j] == dis[x] + cost[i])</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="built_in">dfs</span>(j, <span class="built_in">min</span>((LL)w[i], rest));</span><br><span class="line"><span class="keyword">if</span>(!k)</span><br><span class="line">&#123;</span><br><span class="line">dis[j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">rest -= k;</span><br><span class="line">w[i] -= k;</span><br><span class="line">w[i ^ <span class="number">1</span>] += k;</span><br><span class="line">ret += cost[i] * k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[x] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> last - rest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL ans = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>())</span><br><span class="line"><span class="keyword">while</span>(res = <span class="built_in">dfs</span>(S, Inf)) ans += res;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k, l;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line">idx = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;l);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">T = <span class="number">2</span> * n + <span class="number">4</span>;</span><br><span class="line"><span class="built_in">addage</span>(S, <span class="number">2</span> * n + <span class="number">1</span>, k, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">addage</span>(<span class="number">2</span> * n + <span class="number">2</span>, <span class="number">2</span> * n + <span class="number">3</span>, k - l, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">addage</span>(<span class="number">2</span> * n + <span class="number">1</span>, i, <span class="number">1</span>, -a[i]);</span><br><span class="line"><span class="built_in">addage</span>(i, i + n, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">addage</span>(i, n * <span class="number">2</span> + <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">addage</span>(<span class="number">2</span> * n + <span class="number">3</span>, i + n, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">addage</span>(i + n, T, <span class="number">1</span>, -b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dinic</span>();</span><br><span class="line">cout &lt;&lt; -ret &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察建图，不难发现有效流量都集中在左右两边，可以使用带悔贪心的思想找增广路。</p><p>可以发现每一条增广路的选择只可能有以下几种情况：</p><p><img src="2.png" alt="image"></p><p>所以一共5种更新可能：</p><ul><li><p>选择$a_x+b_x$中最大的。</p></li><li><p>选择$a_i + b_i$中最大的。</p></li><li><p>选择$a$和$b$中最大的（$k &gt; l$）。</p></li><li><p>选择$a$中最大的和$b_x$中最大的。</p></li><li><p>选择$a_x$中最大的和$b$中最大的。</p></li></ul><p>其中$a_x$表示取了$b_x$但没有取$a_x$的$a_x$值（$b_x$同理）。</p><p>由上，维护4个堆即可。</p><ul><li>1：可取的$a$中的最大值。</li><li>2：可取的$b$中的最大值。</li><li>3：可取的$a_x$中的最大值。</li><li>4：可取的$b_x$中的最大值。</li></ul><p>每次更新答案即可：</p><ul><li>$1 + 2$($k &gt; l, k-(id_{a_{front}} != id_{b_{front}})$)</li><li>$2 + 3$($l &gt; 0$)</li><li>$1 + 4$($l &gt; 0$)</li><li>$3 + 4$($k ++$)</li></ul><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;LL, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n, k, l;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line">priority_queue&lt;PII&gt;q[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">bool</span> p[N], d[N];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i ++) </span><br><span class="line"><span class="keyword">while</span>(!q[i].<span class="built_in">empty</span>()) q[i].<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i ++)</span><br><span class="line">p[i] = d[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q[<span class="number">0</span>].<span class="built_in">empty</span>() &amp;&amp; (p[q[<span class="number">0</span>].<span class="built_in">top</span>().y] || d[q[<span class="number">0</span>].<span class="built_in">top</span>().y])) q[<span class="number">0</span>].<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">while</span>(!q[<span class="number">1</span>].<span class="built_in">empty</span>() &amp;&amp; p[q[<span class="number">1</span>].<span class="built_in">top</span>().y]) q[<span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">while</span>(!q[<span class="number">2</span>].<span class="built_in">empty</span>() &amp;&amp; d[q[<span class="number">2</span>].<span class="built_in">top</span>().y]) q[<span class="number">2</span>].<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">while</span>(!q[<span class="number">3</span>].<span class="built_in">empty</span>() &amp;&amp; (p[q[<span class="number">3</span>].<span class="built_in">top</span>().y] || !d[q[<span class="number">3</span>].<span class="built_in">top</span>().y])) q[<span class="number">3</span>].<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">while</span>(!q[<span class="number">4</span>].<span class="built_in">empty</span>() &amp;&amp; (!p[q[<span class="number">4</span>].<span class="built_in">top</span>().y] || d[q[<span class="number">4</span>].<span class="built_in">top</span>().y])) q[<span class="number">4</span>].<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_a</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(d[x]) <span class="keyword">return</span> ;</span><br><span class="line">q[<span class="number">4</span>].<span class="built_in">push</span>(<span class="built_in">mp</span>(b[x], x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_b</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[x]) <span class="keyword">return</span> ;</span><br><span class="line">q[<span class="number">3</span>].<span class="built_in">push</span>(<span class="built_in">mp</span>(a[x], x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;l);</span><br><span class="line"><span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(b[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line">q[<span class="number">0</span>].<span class="built_in">push</span>(<span class="built_in">mp</span>(a[i] + b[i], i));</span><br><span class="line">q[<span class="number">1</span>].<span class="built_in">push</span>(<span class="built_in">mp</span>(a[i], i));</span><br><span class="line">q[<span class="number">2</span>].<span class="built_in">push</span>(<span class="built_in">mp</span>(b[i], i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(k --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">check</span>();</span><br><span class="line">LL cnt = q[<span class="number">0</span>].<span class="built_in">top</span>().x, type = <span class="number">0</span>;</span><br><span class="line">            LL o, u, e, m;</span><br><span class="line">            <span class="keyword">if</span>(!q[<span class="number">1</span>].<span class="built_in">empty</span>()) o = q[<span class="number">1</span>].<span class="built_in">top</span>().x;</span><br><span class="line"><span class="keyword">if</span>(!q[<span class="number">2</span>].<span class="built_in">empty</span>()) u = q[<span class="number">2</span>].<span class="built_in">top</span>().x;</span><br><span class="line"><span class="keyword">if</span>(!q[<span class="number">3</span>].<span class="built_in">empty</span>()) e = q[<span class="number">3</span>].<span class="built_in">top</span>().x;</span><br><span class="line"><span class="keyword">if</span>(!q[<span class="number">4</span>].<span class="built_in">empty</span>()) m = q[<span class="number">4</span>].<span class="built_in">top</span>().x;</span><br><span class="line">            <span class="keyword">if</span>(!q[<span class="number">3</span>].<span class="built_in">empty</span>() &amp;&amp; !q[<span class="number">4</span>].<span class="built_in">empty</span>() &amp;&amp; e + m &gt; cnt) cnt = e + m, type = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span>(!q[<span class="number">1</span>].<span class="built_in">empty</span>() &amp;&amp; !q[<span class="number">4</span>].<span class="built_in">empty</span>() &amp;&amp; o + m &gt; cnt) cnt = o + m, type = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(!q[<span class="number">2</span>].<span class="built_in">empty</span>() &amp;&amp; !q[<span class="number">3</span>].<span class="built_in">empty</span>() &amp;&amp; u + e &gt; cnt) cnt = u + e, type = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span>(l &lt;= k &amp;&amp; !q[<span class="number">1</span>].<span class="built_in">empty</span>() &amp;&amp; !q[<span class="number">2</span>].<span class="built_in">empty</span>() &amp;&amp; o + u &gt; cnt) cnt = o + u, type = <span class="number">1</span>;</span><br><span class="line">ans += cnt;</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">0</span>) p[q[<span class="number">0</span>].<span class="built_in">top</span>().y] = d[q[<span class="number">0</span>].<span class="built_in">top</span>().y] = <span class="number">1</span>, l --;</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">1</span>) p[q[<span class="number">1</span>].<span class="built_in">top</span>().y] = d[q[<span class="number">2</span>].<span class="built_in">top</span>().y] = <span class="number">1</span>, <span class="built_in">make_a</span>(q[<span class="number">1</span>].<span class="built_in">top</span>().y), <span class="built_in">make_b</span>(q[<span class="number">2</span>].<span class="built_in">top</span>().y);</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">2</span>) p[q[<span class="number">1</span>].<span class="built_in">top</span>().y] = d[q[<span class="number">4</span>].<span class="built_in">top</span>().y] = <span class="number">1</span>, l --, <span class="built_in">make_a</span>(q[<span class="number">1</span>].<span class="built_in">top</span>().y);</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">3</span>) p[q[<span class="number">3</span>].<span class="built_in">top</span>().y] = d[q[<span class="number">2</span>].<span class="built_in">top</span>().y] = <span class="number">1</span>, l --, <span class="built_in">make_b</span>(q[<span class="number">2</span>].<span class="built_in">top</span>().y);</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">4</span>) p[q[<span class="number">3</span>].<span class="built_in">top</span>().y] = d[q[<span class="number">4</span>].<span class="built_in">top</span>().y] = <span class="number">1</span>, l -= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4189 [CTSC2010]星际旅行</title>
      <link href="/2022/01/24/P4189-CTSC2010-%E6%98%9F%E9%99%85%E6%97%85%E8%A1%8C/"/>
      <url>/2022/01/24/P4189-CTSC2010-%E6%98%9F%E9%99%85%E6%97%85%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>看到讨论中有费用流了，就直接上了。</p><p>然而，开始不会建图，建完图后发现图又出现了死循环，弄死过不去，回去看题解发现是模拟费用流，泪目了。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>仔细想想我们建出来的*一样的图，可以发现除了中间有费用交叉以外没有其他费用，神似<a href="https://www.luogu.com.cn/problem/P5470">P5470 [NOI2019] 序列</a>，然后我们在题目中发现这玩意儿是棵树，我们仔细分析每一个终点在 $0$ 号点的情况又可以得出类似于 <a href="https://www.luogu.com.cn/problem/CF453C">CF453C</a>的震荡操作，于是我们可以得到 $0$ 的答案：</p><ul><li>对于每一条链，由于链两端的值均大于 $1$ 所以我们可以一直从 $x$ 出发走到 $y$ 再回到 $x$（两个值同时减1），故对 $x$ 的答案贡献就是：$\min(val[x], val[y])$，由于根节点始终保证可以走回来，所以我们不妨优先走叶子节点，将叶子压榨干净之后，再回来压榨路径上的其他节点。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(father == j) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(j, x);</span><br><span class="line"><span class="keyword">int</span> v = <span class="built_in">min</span>(val[x], val[j]);</span><br><span class="line">val[x] -= v;</span><br><span class="line">val[j] -= v;</span><br><span class="line">cnt += v * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(val[j]) son[x] = j; <span class="comment">// 记录最后还可以从哪来的 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时不管那个注释，我们接着思考如何由父节点推及其他儿子节点，不难发现如果最后是由这个儿子走到父节点的话我们完全可以不再震荡，故这个儿子可以完全继承父节点的权值，而如果父节点还有值，但儿子节点没有值了我们就可以从父亲再走到儿子，儿子就等于父节点权值 $+ 1$，而当父节点和子节点都没有值了，那就不能上传了，子节点权值等于父节点权值 $- 1$。</p><p>那么就做完了。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[N &lt;&lt; <span class="number">1</span>], ne[N &lt;&lt; <span class="number">1</span>], h[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> val[N], cnt;</span><br><span class="line"><span class="keyword">int</span> son[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(father == j) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(j, x);</span><br><span class="line"><span class="keyword">int</span> v = <span class="built_in">min</span>(val[x], val[j]);</span><br><span class="line">val[x] -= v;</span><br><span class="line">val[j] -= v;</span><br><span class="line">cnt += v * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(val[j]) son[x] = j; <span class="comment">// 记录最后还可以从哪来的 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans[x] = cnt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i], type;</span><br><span class="line"><span class="keyword">if</span>(j == father) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(val[x]) val[x] --, cnt ++, type = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(son[j]) val[son[j]] --, cnt ++, type = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> val[j] ++, cnt --, type = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(j, x);</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">1</span>) val[x] ++, cnt --;</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">2</span>) val[son[j]] ++, cnt --;</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">3</span>) val[j] --, cnt ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;val[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> o, u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;o, &amp;u);</span><br><span class="line"><span class="built_in">add</span>(o, u);</span><br><span class="line"><span class="built_in">add</span>(u, o);</span><br><span class="line">val[o] --, val[u] --, cnt += <span class="number">2</span>; <span class="comment">// 特别注意1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">-1</span>), <span class="built_in">dfs1</span>(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注，特别注意1：必须要减，上方的贪心过后一定能保证清零。这里减的即为费用流的的贪心流量，如果不减，那就是个裸的贪心。</p>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 模拟费用流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带花树</title>
      <link href="/2022/01/23/%E5%B8%A6%E8%8A%B1%E6%A0%91/"/>
      <url>/2022/01/23/%E5%B8%A6%E8%8A%B1%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>其他博客已经鸽了几篇了，但我依然不会放弃它（<del>考了不下5次，一次都不会QAQ</del>）。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>它是干什么的，解决一般图的最大匹配的，但联想到图的最大匹配，匈牙利坐不住了，但注意看题，是一般图（<del>图是褐的</del>）：</p><p><img src="1.jpg" alt="image"></p><p>此时我们发现，当我们从度数最小的 $1$ 开始走时，遍历途径：$1-&gt;2-&gt;4-&gt;5-&gt;3$，但实际我们不难看出正确的增广路：$1-&gt;3-&gt;5-&gt;4-&gt;2-&gt;6$，显然匈牙利错了。</p><p>但这是为什么呢？当我们多构造几组数据（<del>被毒瘤出题人卡个几遍</del>），就可以总结出规律：错误是因为有奇环（下文将其称之为花）。</p><p>但信息学的勇敢精神（<del>WC上听到的广告</del>）促使毒瘤出题人勇敢探索，追求卓越，终于发明了这么个算法：带花树。</p><p>顾名思义： 将图中的花缩成点，将这棵无奇环的树处理完后，再处理花。</p><p>那么这个花有什么性质呢？</p><h2 id="花的性质"><a href="#花的性质" class="headerlink" title="花的性质"></a>花的性质</h2><p>我们首先在图$G = (V, E)$中找到一个树中找到一个奇环：$v_1-&gt;v_2…-&gt;v_k-&gt;v_1,k \equiv (1 \mod2)$ 大胆假设 $v_1$ 是花中度数最小的点（换成其他点也同理），那么 $v_1$ 的配对点一定不在花中（除去 $v_1$ 点，花中的点的个数为偶数个，一定可以两两匹配，且花与外界相连的只有 $v_1$，证毕），且$(v_2,v_3)…..(v_{k - 1},v_k)$ 一定是匹配边，那么我们可以构建一个图<br>$$<br>\begin{aligned}<br>G’ &amp;= (V’, E’) \\<br>V’ &amp;= V / \{\ v_2,v_3…..,v_k \}\, \\<br>E’ &amp;= \{\ (f(a), f(b)) | (a, b) \in E,(a,b \ != v_i,i \in \{\ 1…k \}\ ) \}\<br>\end{aligned}<br>$$<br> 其中 $f(i) = v_i$，我们可以得到 $G’$中存在增广路 $⇔$ $G$ 中存在增广路。</p><p>证明实在是不会证了，大家看一下巨佬的证明：</p><p>$⇒$：对于<em>G</em>中的任意一条增广路，若其不经过这朵花，那么在<em>G</em>′中也存在这条增广路；否则，令这条从<em>s</em>开始的增广路上的最后一个在花上的点为$v_j$那么这条增广路形如 $s⇝v_j⇝t$，我们在<em>G</em>′上构造如下增广路：先从，其中$s⇝v_1⇝t$第一段路程沿着 $bfs/dfs$树走，第二段路程沿着原图中的增广路走，唯一不同的是$v_j$变成了$v_1$（这是合法的，因为所有从$v_j$出发的边都被连到了$v_1$上，而且我们根据所有$v$都是已覆盖点可以知道$v_j$出发的边是非匹配边，花中的点数为奇数）。</p><p>$⇐$：对于<em>G</em>′中的一条增广路，若它不经过$v_1$，则<em>G</em>中也存在；否则，设这条增广路为$s⇝v_1→x⇝t$（<em>x</em>可能等于<em>t</em>），根据<em>E</em>′的定义存在$(v_i, x) \in E$，从而我们构造<em>G</em>中的增广路：$s⇝v_1⇝v_i→x⇝t$，其中第一段和第三段不变（因为增广路上$v_1$至多出现1次，所以这两段在<em>G</em>中存在），第二段是在花里走（或者精确一点，若<em>i</em>是奇数，走$v_1→v_2…v_i$，否则走$v_1→v_k…v_i$。证毕。</p><p>$bfs$时，我们可以$O(n)$求出$LCA$并$O(kn)$缩花，从而单次$bfs$至多$O(n^2)$，总复杂度至多$O(n^3)$。</p><p>实现上，我们不实际缩点，而是对于每个点维护一个$fa$，表示它所处的最大的花的$LCA$（就是$v_1$）。由于花里可能还有花，这个$fa$要用并查集维护。在证明中构造增广路是通过判断$i$奇偶性，但实际上我们可以直接维护每个点要往哪边走，也即维护一个$link_i$表示如果$i$失配要和谁匹配（例如，$link_{v_2}=v_1, link_{v_3}=v_4$）。找$LCA$的时候直接暴力$O(n)$，但要注意只找每个并查集的根节点（因为非根节点都缩到花里了）；缩花时要注意如果两个点已经在一朵花里就不要再缩了。</p><p>在此，$orz$巨佬。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">5</span>, M = <span class="number">2.5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, idx;</span><br><span class="line"><span class="keyword">int</span> h[N], ne[M], e[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> vis[N], father[N], chain[N], mate[N]; <span class="comment">// chain就是link，**的luogu不能用link </span></span><br><span class="line"><span class="keyword">int</span> q[N], st, ed;</span><br><span class="line"><span class="keyword">int</span> ss[N], cnt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> father[x] == x ? x : father[x] = <span class="built_in">find</span>(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt ++;</span><br><span class="line"><span class="keyword">while</span>(ss[x] != cnt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">ss[x] = cnt;</span><br><span class="line">x = <span class="built_in">find</span>(chain[mate[x]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flower</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">find</span>(x) != p)</span><br><span class="line">&#123;</span><br><span class="line">chain[x] = y;</span><br><span class="line">y = mate[x];</span><br><span class="line">father[y] = father[x] = p;</span><br><span class="line"><span class="keyword">if</span>(vis[y] == <span class="number">1</span>) q[ed ++] = y, vis[y] = <span class="number">2</span>;</span><br><span class="line">x = chain[y];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">st = ed = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) father[i] = i, vis[i] = <span class="number">0</span>;</span><br><span class="line">q[ed ++] = x;</span><br><span class="line">vis[x] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(st != ed)</span><br><span class="line">&#123;</span><br><span class="line">x = q[st ++];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(!vis[j])</span><br><span class="line">&#123;</span><br><span class="line">vis[j] = <span class="number">1</span>;</span><br><span class="line">chain[j] = x;</span><br><span class="line"><span class="keyword">if</span>(mate[j]) q[ed ++] = mate[j], vis[mate[j]] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(j)</span><br><span class="line">&#123;</span><br><span class="line">x = mate[chain[j]];</span><br><span class="line">mate[j] = chain[j];</span><br><span class="line">mate[chain[j]] = j;</span><br><span class="line">j = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[j] == <span class="number">2</span> &amp;&amp; <span class="built_in">find</span>(j) != <span class="built_in">find</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span>  p = <span class="built_in">lca</span>(x, j);</span><br><span class="line"><span class="built_in">flower</span>(x, j, p);</span><br><span class="line"><span class="built_in">flower</span>(j, x, p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m, ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">add</span>(x, y);</span><br><span class="line"><span class="built_in">add</span>(y, x);</span><br><span class="line"><span class="keyword">if</span>(!mate[x] &amp;&amp; !mate[y]) mate[x] = y, mate[y] = x, ans ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line"><span class="keyword">if</span>(!mate[i] &amp;&amp; <span class="built_in">match</span>(i)) ans ++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, mate[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自适应辛普森</title>
      <link href="/2022/01/23/%E8%87%AA%E9%80%82%E5%BA%94%E8%BE%9B%E6%99%AE%E6%A3%AE/"/>
      <url>/2022/01/23/%E8%87%AA%E9%80%82%E5%BA%94%E8%BE%9B%E6%99%AE%E6%A3%AE/</url>
      
        <content type="html"><![CDATA[<p>先搁着。</p><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李超线段树</title>
      <link href="/2022/01/23/%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2022/01/23/%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>考试的时候就听到巨佬们在说了，但一直不会，现在学了，赶快补一下。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>当我们在一定值域内的插入线段，从上往下看查询 $x = k$ 时与线段的最高交点，可支持返回该线段的编号。</p><p>要求时间复杂度：$O(nlog^2(m))$，$n$ 是线段数，$m$ 是值域。</p><p>这玩意根本不可做，所以考试时暴力拿了个 $10$ 分就溜号了（<del>在此orz wfy-暴力拿80的巨佬</del>）。</p><p>在此环境下，李超线段树诞生了。</p><h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><p>我们在线段树上维护优势线段的编号，由于每一个点都进行更改的话时间复杂度会超标，故我们在每个区间内存储的是区间中点的优势线段，查询时必须递归到单节点。</p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>我们将两条线段在公共区间讨论可得：</p><ul><li>没有优势线段，直接更改编号。</li><li>插入线段完全更优，直接更改编号。</li><li>中点处更优，更改编号并递归处理。</li><li>若两端更高，且中间更低，递归处理。</li></ul><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(st &lt;= l &amp;&amp; r &lt;= ed)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[x], mid), <span class="built_in">calc</span>(line[tr[root]], mid)) &gt; <span class="number">0</span>) <span class="built_in">swap</span>(tr[root], x); <span class="comment">// 由于懒没有递归到单点，保证优势线段存在后（就一定可以更新答案），更新上一条优势线段的优势区间</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[x], l), <span class="built_in">calc</span>(line[tr[root]], l)) &gt; <span class="number">0</span>) <span class="built_in">modify</span>(root &lt;&lt; <span class="number">1</span>, l, mid, st, ed, x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[x], r), <span class="built_in">calc</span>(line[tr[root]], r)) &gt; <span class="number">0</span>) <span class="built_in">modify</span>(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, st, ed, x);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>查询到单点就行了，没有太多问题。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[root];</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= mid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tem = <span class="built_in">query</span>(root &lt;&lt; <span class="number">1</span>, l, mid, x);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[tem], x), <span class="built_in">calc</span>(line[tr[root]], x)) &gt; <span class="number">0</span> ? tem : tr[root];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> tem = <span class="built_in">query</span>(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[tem], x), <span class="built_in">calc</span>(line[tr[root]], x)) &gt; <span class="number">0</span> ? tem : tr[root];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="luogu-P4097-HEOI2013-Segment"><a href="#luogu-P4097-HEOI2013-Segment" class="headerlink" title="luogu P4097 [HEOI2013]Segment"></a><a href="https://www.luogu.com.cn/problem/P4097">luogu P4097 [HEOI2013]Segment</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, M = <span class="number">4e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> k, b;</span><br><span class="line">&#125;line[N];</span><br><span class="line"><span class="keyword">int</span> tr[M * <span class="number">4</span> + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> cnt, last;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">(Line x, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.b + d * x.k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(x - y) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> st, <span class="keyword">int</span> ed, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(st &lt;= l &amp;&amp; r &lt;= ed)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[x], mid), <span class="built_in">calc</span>(line[tr[root]], mid)) &gt; <span class="number">0</span>) <span class="built_in">swap</span>(tr[root], x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[x], l), <span class="built_in">calc</span>(line[tr[root]], l)) &gt; <span class="number">0</span>) <span class="built_in">modify</span>(root &lt;&lt; <span class="number">1</span>, l, mid, st, ed, x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[x], r), <span class="built_in">calc</span>(line[tr[root]], r)) &gt; <span class="number">0</span>) <span class="built_in">modify</span>(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, st, ed, x);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(st &lt;= mid) <span class="built_in">modify</span>(root &lt;&lt; <span class="number">1</span>, l, mid, st, ed, x);</span><br><span class="line"><span class="keyword">if</span>(ed &gt; mid) <span class="built_in">modify</span>(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, st, ed, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[root];</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= mid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tem = <span class="built_in">query</span>(root &lt;&lt; <span class="number">1</span>, l, mid, x);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[tem], x), <span class="built_in">calc</span>(line[tr[root]], x)) &gt; <span class="number">0</span> ? tem : tr[root];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> tem = <span class="built_in">query</span>(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[tem], x), <span class="built_in">calc</span>(line[tr[root]], x)) &gt; <span class="number">0</span> ? tem : tr[root];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = (x + last - <span class="number">1</span>) % <span class="number">39989</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ma</span><span class="params">(<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">y = (y + last - <span class="number">1</span>) % <span class="number">1000000000</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> o, <span class="keyword">int</span> u)</span> <span class="comment">// 建立新线段</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == o) line[++ cnt] = &#123;<span class="number">0</span>, <span class="built_in">max</span>(y, u)&#125;;</span><br><span class="line"><span class="keyword">else</span> line[++ cnt] = &#123;<span class="number">1.0</span> * (u - y) / (o - x), y - <span class="number">1.0</span> * (u - y) / (o - x) * x&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> op;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line"><span class="keyword">if</span>(!op)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">x = (x + last - <span class="number">1</span>) % <span class="number">39989</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, last = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, M, x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, o, u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;o, &amp;u);</span><br><span class="line"><span class="built_in">make</span>(x), <span class="built_in">ma</span>(y), <span class="built_in">make</span>(o), <span class="built_in">ma</span>(u);</span><br><span class="line"><span class="keyword">if</span>(x &gt; o) <span class="built_in">swap</span>(x, o), <span class="built_in">swap</span>(y, u);</span><br><span class="line"><span class="built_in">add</span>(x, y, o, u);</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, M, x, o, cnt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三角剖分</title>
      <link href="/2022/01/21/%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86/"/>
      <url>/2022/01/21/%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>先搁着。</p><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转卡壳</title>
      <link href="/2022/01/21/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/"/>
      <url>/2022/01/21/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<p>还是先搁着。</p><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>半平面交</title>
      <link href="/2022/01/21/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/"/>
      <url>/2022/01/21/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<p>又是一篇鸽了许久的博客。</p><span id="more"></span><p>本着以前学的东西就简单写的原则，我们只写重点。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>点积： $a.x * b.y + a.y * b.y$。</li><li>叉积：$a.x * b.y - a.y * b.x$。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三维计算几何基础</title>
      <link href="/2022/01/20/%E4%B8%89%E7%BB%B4%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/01/20/%E4%B8%89%E7%BB%B4%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<ol><li><p>三维向量表示(x, y, z)</p> <span id="more"></span></li><li><p>向量加减法、数乘运算，与二维相同</p></li><li><p>模长 |A| = sqrt(x * x + y * y + z * z)</p></li><li><p>点积<br> (1) 几何意义：A·B = |A| * |B| * cos(C)<br> (2) 代数求解：(x1, y1, z1) · (x2, y2, z2) = (x1x2, y1y2, z1z2);</p></li><li><p>叉积<br> (1) 几何意义：AxB = |A| * |B| * sin(C)，方向：右手定则<br> (2) 代数求解：AxB = (y1z2 - z1y2, z1x2 - x1z2, x1y2 - x2y1)</p></li><li><p>如何求平面法向量<br> 任取平面上两个不共线的向量A、B：AxB</p></li><li><p>判断点D是否在平面里<br> 任取平面上两个不共线的向量A、B：先求法向量C = AxB，然后求平面上任意一点到D的向量E与C的点积，判断点积是否为0。</p></li><li><p>求点D到平面的距离<br> 任取平面上两个不共线的向量A、B：先求法向量C = AxB。然后求平面上任意一点到D的向量E在C上的投影长度即可。即：E·C / |C|</p></li><li><p>多面体欧拉定理<br> 顶点数 - 棱长数 + 表面数 = 2</p></li><li><p>三维凸包</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最小圆覆盖</title>
      <link href="/2022/01/20/%E6%9C%80%E5%B0%8F%E5%9C%86%E8%A6%86%E7%9B%96/"/>
      <url>/2022/01/20/%E6%9C%80%E5%B0%8F%E5%9C%86%E8%A6%86%E7%9B%96/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><span id="more"></span><h2 id="相关性质"><a href="#相关性质" class="headerlink" title="相关性质"></a>相关性质</h2><ul><li>最小覆盖圆是唯一的。</li><li>若 $P$ 不在 $S$ 的最小覆盖圆的内部， 则 $P$ 一定在 ${P}\cup S$ 的最小覆盖圆的边上。</li></ul><h2 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h2><p>由上面的性质我，如果前 $i - 1$ 个点的最小圆覆盖是 $C$  那么我们可以得到：</p><ul><li>如果第 $i$ 个点在圆上的话，那么前$i - 1$ 个点的最小圆覆盖是 $C$。 </li><li>如果不在，那么 $i$ 一定在前 $i$ 个点的最小覆盖圆上。</li><li>因此，我们固定 $i$，以 $P_i$ 为圆心，以0为半径，继续寻找还有那两个点在前 $i$ 个点的最小圆覆盖上。</li><li>从 1 到 $i - 1$ 枚举 $j$ ，找到第一个点 $j$ 不在 $C$ 上，当前圆心就为 $\frac{P_i + P_j} 2$，半径就为 $ |P_i P_j|$。</li><li>紧接着再固定圆心，继续不停寻找第三个点 $P_k$，根据三点固定一圆，$C$ 即可固定。</li></ul><h2 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h2><ul><li>将点随机化。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)</span><br><span class="line">    <span class="keyword">if</span>(i不在圆内则i必须在<span class="number">1</span>~i的圆的边上)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">// 插入i，重构圆</span></span><br><span class="line">遍历圆</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; i;j ++)</span><br><span class="line">             <span class="keyword">if</span>(j不在圆内，则j就必须在<span class="number">1</span>~j - <span class="number">1</span>和i，且i在圆边上的最小圆的边上)</span><br><span class="line">                 圆&lt;-以Pi，Pj为直径的圆</span><br><span class="line">                 <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt; j;k ++)</span><br><span class="line">                        <span class="keyword">if</span>(k不在圆内，则j就必须在<span class="number">1</span>~k - <span class="number">1</span>和i，j，且i，j在圆边上的最小圆的边上)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="外接圆的补充说明"><a href="#外接圆的补充说明" class="headerlink" title="外接圆的补充说明"></a>外接圆的补充说明</h2><p>初中的中垂线确定圆心的方法给予我们启示，我们需要以下工具：</p><ul><li>求得两个向量的中点。</li><li>将一个向量旋转 $90^\circ$。</li><li>用一点和一条向量确定一条直线。</li><li>求两条直线的交点。</li></ul><p>第一个任务，将向量直接 $/2$。</p><p>第二个任务，$rotate$ 函数即可解决。</p><p>第三个任务，不说了。</p><p>第四个任务，根据向量的叉乘我们可以知道    </p><p><img src="1.png" alt="image"></p><p>用 $O = I + Vt$，$(I + Vt - P) * W = 0$ 解得<br>$$<br>\begin{align}<br>t &amp;= \frac {(P - I) * W}{V*W} \\<br>O &amp;= I + Vt<br>\end{align}<br>$$<br>由此，圆心即求出来了。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="P1742-最小圆覆盖"><a href="#P1742-最小圆覆盖" class="headerlink" title="P1742 最小圆覆盖"></a><a href="https://www.luogu.com.cn/problem/P1742">P1742 最小圆覆盖</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">PII q[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">PII p;</span><br><span class="line"><span class="keyword">double</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sign</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(x - y) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 基本运算 </span></span><br><span class="line">PII <span class="keyword">operator</span>- (PII a, PII b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x - b.x, a.y - b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>+ (PII a, PII b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x + b.x, a.y + b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>* (PII a, <span class="keyword">double</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x * b, a.y * b&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>/ (PII a, <span class="keyword">double</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x / b, a.y / b&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">operator</span>* (PII a, PII b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function">PII <span class="title">rotate</span><span class="params">(PII a, <span class="keyword">double</span> b)</span> <span class="comment">// 将向量a旋转b角度 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x * <span class="built_in">cos</span>(b) + a.y * <span class="built_in">sin</span>(b), -a.x * <span class="built_in">sin</span>(b) + a.y * <span class="built_in">cos</span>(b)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_dist</span><span class="params">(PII a, PII b)</span> <span class="comment">// 计算a到 b的距离 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dx = a.x - b.x;</span><br><span class="line">    <span class="keyword">double</span> dy = a.y - b.y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(dx * dx + dy * dy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PII <span class="title">get_line_intersection</span><span class="params">(PII p, PII v, PII q, PII w)</span> <span class="comment">// 求交点 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PII u = p - q;</span><br><span class="line"><span class="keyword">double</span> t = w * u / (v * w);</span><br><span class="line"><span class="keyword">return</span> p + v * t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pair&lt;PII, PII&gt; <span class="title">get_line</span><span class="params">(PII a, PII b)</span> <span class="comment">// 求中垂线 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;(a + b) / <span class="number">2</span>, <span class="built_in">rotate</span>(b - a, PI / <span class="number">2</span>)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Circle <span class="title">get_circle</span><span class="params">(PII a, PII b, PII c)</span> <span class="comment">// 求圆心 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pair&lt;PII, PII&gt; u = <span class="built_in">get_line</span>(a, b), v = <span class="built_in">get_line</span>(a, c);</span><br><span class="line">PII p = <span class="built_in">get_line_intersection</span>(u.x, u.y, v.x, v.y);</span><br><span class="line"><span class="keyword">return</span> &#123;p, <span class="built_in">get_dist</span>(p, a)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;q[i].x, &amp;q[i].y);</span><br><span class="line"><span class="built_in">random_shuffle</span>(q, q + n);</span><br><span class="line"><span class="function">Circle <span class="title">c</span><span class="params">(&#123;q[<span class="number">0</span>], <span class="number">0</span>&#125;)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i ++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(c.r, <span class="built_in">get_dist</span>(c.p, q[i])) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = &#123;q[i], <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; i;j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(c.r, <span class="built_in">get_dist</span>(c.p, q[j])) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = &#123;(q[i] + q[j]) / <span class="number">2</span>, <span class="built_in">get_dist</span>(q[i], q[j]) / <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; j;k ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(c.r, <span class="built_in">get_dist</span>(c.p, q[k])) &lt; <span class="number">0</span>)</span><br><span class="line">c = <span class="built_in">get_circle</span>(q[i], q[j], q[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.10lf\n&quot;</span>, c.r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.10lf %.10lf\n&quot;</span>, c.p.x, c.p.y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P4288-SHOI2014-信号增幅仪"><a href="#P4288-SHOI2014-信号增幅仪" class="headerlink" title="P4288 [SHOI2014]信号增幅仪"></a><a href="https://www.luogu.com.cn/problem/P4288">P4288 [SHOI2014]信号增幅仪</a></h2><ul><li>严格来讲如果知道压缩椭圆，旋转坐标轴的话应该还是算模板题的。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50010</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">PII q[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">PII p;</span><br><span class="line"><span class="keyword">double</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sign</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(x - y) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>- (PII a, PII b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x - b.x, a.y - b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>+ (PII a, PII b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x + b.x, a.y + b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>* (PII a, <span class="keyword">double</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x * b, a.y * b&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>/ (PII a, <span class="keyword">double</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x / b, a.y / b&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">operator</span>* (PII a, PII b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PII <span class="title">rotate</span><span class="params">(PII a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x * <span class="built_in">cos</span>(b) + a.y * <span class="built_in">sin</span>(b), -a.x * <span class="built_in">sin</span>(b) + a.y * <span class="built_in">cos</span>(b)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_dist</span><span class="params">(PII a, PII b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dx = a.x - b.x;</span><br><span class="line">    <span class="keyword">double</span> dy = a.y - b.y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(dx * dx + dy * dy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PII <span class="title">get_line_intersection</span><span class="params">(PII p, PII v, PII q, PII w)</span> <span class="comment">// 求交点 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PII u = p - q;</span><br><span class="line"><span class="keyword">double</span> t = w * u / (v * w);</span><br><span class="line"><span class="keyword">return</span> p + v * t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pair&lt;PII, PII&gt; <span class="title">get_line</span><span class="params">(PII a, PII b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;(a + b) / <span class="number">2</span>, <span class="built_in">rotate</span>(b - a, PI / <span class="number">2</span>)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Circle <span class="title">get_circle</span><span class="params">(PII a, PII b, PII c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pair&lt;PII, PII&gt; u = <span class="built_in">get_line</span>(a, b), v = <span class="built_in">get_line</span>(a, c);</span><br><span class="line">PII p = <span class="built_in">get_line_intersection</span>(u.x, u.y, v.x, v.y);</span><br><span class="line"><span class="keyword">return</span> &#123;p, <span class="built_in">get_dist</span>(p, a)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;q[i].x, &amp;q[i].y);</span><br><span class="line"><span class="keyword">double</span> a, p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;a, &amp;p);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++)</span><br><span class="line">&#123;</span><br><span class="line">q[i] = <span class="built_in">rotate</span>(q[i], a / <span class="number">180</span> * PI);</span><br><span class="line">q[i].x /= p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">random_shuffle</span>(q, q + n);</span><br><span class="line"><span class="function">Circle <span class="title">c</span><span class="params">(&#123;q[<span class="number">0</span>], <span class="number">0</span>&#125;)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i ++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(c.r, <span class="built_in">get_dist</span>(c.p, q[i])) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = &#123;q[i], <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; i;j ++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(c.r, <span class="built_in">get_dist</span>(c.p, q[j])) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = &#123;(q[i] + q[j]) / <span class="number">2</span>, <span class="built_in">get_dist</span>(q[i], q[j]) / <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; j;k ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(c.r, <span class="built_in">get_dist</span>(c.p, q[k])) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = <span class="built_in">get_circle</span>(q[i], q[j], q[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3lf&quot;</span>, c.r);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算几何</title>
      <link href="/2022/01/19/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
      <url>/2022/01/19/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/</url>
      
        <content type="html"><![CDATA[<p>毒瘤码量类。</p><span id="more"></span><h1 id="前置知识点"><a href="#前置知识点" class="headerlink" title="前置知识点"></a>前置知识点</h1><ul><li>$pi = acos(-1)$。</li><li>余弦定理 $c^2 = a^2 + b^2 - 2ab \cos(t)$。</li></ul><h1 id="浮点数的比较"><a href="#浮点数的比较" class="headerlink" title="浮点数的比较"></a>浮点数的比较</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sign</span><span class="params">(<span class="keyword">double</span> x)</span>  <span class="comment">// 符号函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span>  <span class="comment">// 比较函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - y) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><ul><li>向量的加减法和数乘运算</li></ul><h2 id="内积（点积）"><a href="#内积（点积）" class="headerlink" title="内积（点积）"></a>内积（点积）</h2><ul><li><p>$ A·B = |A||B|cos(C)$</p></li><li><p>几何意义：向量A在向量B上的投影与B的长度的乘积。</p></li><li><p>代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="外积（叉积）"><a href="#外积（叉积）" class="headerlink" title="外积（叉积）"></a>外积（叉积）</h2><ul><li><p>$AxB = |A||B| \sin(C)$</p></li><li><p>几何意义：向量A与B张成的平行四边形的有向面积。B在A的逆时针方向为正。</p></li><li><p>代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x * b.y - b.x * a.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ul><li><p>取模</p><pre><code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_length</span><span class="params">(Point a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">dot</span>(a, a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>计算向量夹角</p><pre><code>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_angle</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">acos</span>(<span class="built_in">dot</span>(a, b) / <span class="built_in">get_length</span>(a) / <span class="built_in">get_length</span>(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>计算两个向量构成的平行四边形有向面积</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(Point a, Point b, Point c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cross</span>(b - a, c - a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>向量A顺时针旋转C的角度：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Point <span class="title">rotate</span><span class="params">(Point a, <span class="keyword">double</span> angle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Point</span>(a.x * <span class="built_in">cos</span>(angle) + a.y * <span class="built_in">sin</span>(angle), -a.x * <span class="built_in">sin</span>(angle) + a.y * <span class="built_in">cos</span>(angle));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="点与线"><a href="#点与线" class="headerlink" title="点与线"></a>点与线</h1><h2 id="直线定理"><a href="#直线定理" class="headerlink" title="直线定理"></a>直线定理</h2><ul><li><p>一般式 $ax + by + c = 0$</p></li><li><p>点向式 $p_0 + \vec vt$</p></li><li><p>斜截式 $y = kx + b$</p></li></ul><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><ul><li><p>判断点在直线上 $\vec A \times \vec B = 0$</p></li><li><p>两直线相交</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  cross(v, w) == 0则两直线平行或者重合</span></span><br><span class="line">    <span class="function">Point <span class="title">get_line_intersection</span><span class="params">(Point p, Vector v, Point q, vector w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vector u = p - q;</span><br><span class="line">        <span class="keyword">double</span> t = <span class="built_in">cross</span>(w, u) / <span class="built_in">cross</span>(v, w);</span><br><span class="line">        <span class="keyword">return</span> p + v * t;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>点到直线的距离</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">distance_to_line</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       vector v1 = b - a, v2 = p - a;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">cross</span>(v1, v2) / <span class="built_in">get_length</span>(v1));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>点到线段的距离</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">distance_to_segment</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (a == b) <span class="keyword">return</span> <span class="built_in">get_length</span>(p - a);</span><br><span class="line">       Vector v1 = b - a, v2 = p - a, v3 = p - b;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">sign</span>(<span class="built_in">dot</span>(v1, v2)) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">get_length</span>(v2);</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">sign</span>(<span class="built_in">dot</span>(v1, v3)) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">get_length</span>(v3);</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">distance_to_line</span>(p, a, b);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>点在直线上的投影</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_line_projection</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       Vector v = b - a;</span><br><span class="line">       <span class="keyword">return</span> a + v * (<span class="built_in">dot</span>(v, p - a) / <span class="built_in">dot</span>(v, v));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>点是否在线段上</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">on_segment</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">sign</span>(<span class="built_in">cross</span>(p - a, p - b)) == <span class="number">0</span> &amp;&amp; <span class="built_in">sign</span>(<span class="built_in">dot</span>(p - a, p - b)) &lt;= <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>判断两线段是否相交</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">segment_intersection</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">double</span> c1 = <span class="built_in">cross</span>(a2 - a1, b1 - a1), c2 = <span class="built_in">cross</span>(a2 - a1, b2 - a1);</span><br><span class="line">       <span class="keyword">double</span> c3 = <span class="built_in">cross</span>(b2 - b1, a2 - b1), c4 = <span class="built_in">cross</span>(b2 - b1, a1 - b1);</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">sign</span>(c1) * <span class="built_in">sign</span>(c2) &lt;= <span class="number">0</span> &amp;&amp; <span class="built_in">sign</span>(c3) * <span class="built_in">sign</span>(c4) &lt;= <span class="number">0</span>;</span><br><span class="line">   &#125; </span><br></pre></td></tr></table></figure></li></ul><h1 id="多边形"><a href="#多边形" class="headerlink" title="多边形"></a>多边形</h1><h2 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h2><ul><li><p>面积</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1) 叉积</span><br><span class="line">(2) 海伦公式:</span><br><span class="line">       p = (a + b + c) / 2;</span><br><span class="line">       S = sqrt(p(p - a) * (p - b) * (p - c));</span><br></pre></td></tr></table></figure></li><li><p>三角形四心</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(1) 外心，外接圆圆心</span><br><span class="line">        三边中垂线交点。到三角形三个顶点的距离相等</span><br><span class="line">    (2) 内心，内切圆圆心</span><br><span class="line">        角平分线交点，到三边距离相等</span><br><span class="line">    (3) 垂心</span><br><span class="line">        三条垂线交点</span><br><span class="line">    (4) 重心</span><br><span class="line">        三条中线交点（到三角形三顶点距离的平方和最小的点，三角形内到三边距离之积最大的点）</span><br></pre></td></tr></table></figure><h2 id="普通多边形"><a href="#普通多边形" class="headerlink" title="普通多边形"></a>普通多边形</h2><ul><li>通常按逆时针存储所有点</li></ul><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><pre><code>  (1) 多边形      由在同一平面且不再同一直线上的多条线段首尾顺次连接且不相交所组成的图形叫多边形  (2) 简单多边形      简单多边形是除相邻边外其它边不相交的多边形  (3) 凸多边形      过多边形的任意一边做一条直线，如果其他各个顶点都在这条直线的同侧，则把这个多边形叫做凸多边形      任意凸多边形外角和均为360°      任意凸多边形内角和为(n-2)180°</code></pre><h2 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h2><ul><li><p>求多边形面积（不一定是凸多边形）</p></li><li><p>我们可以从第一个顶点除法把凸多边形分成 $n - 2$个三角形，然后把面积加起来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">polygon_area</span><span class="params">(Point p[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">double</span> s = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + <span class="number">1</span> &lt; n; i ++ )</span><br><span class="line">           s += <span class="built_in">cross</span>(p[i] - p[<span class="number">0</span>], p[i + <span class="number">1</span>] - p[i]);</span><br><span class="line">       <span class="keyword">return</span> s / <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>判断点是否在多边形内（不一定是凸多边形）</p><pre><code>1. 射线法，从该点任意做一条和所有边都不平行的射线。交点个数为偶数，则在多边形外，为奇数，则在多边形内。    2. 转角法</code></pre></li><li><p>判断点是否在凸多边形内</p><pre><code>只需判断点是否在所有边的左边（逆时针存储多边形）。</code></pre><h2 id="皮克定理"><a href="#皮克定理" class="headerlink" title="皮克定理"></a>皮克定理</h2><pre><code>皮克定理是指一个计算点阵中顶点在格点上的多边形面积公式该公式可以表示为:    S = a + b/2 - 1其中a表示多边形内部的点数，b表示多边形边界上的点数，S表示多边形的面积。</code></pre></li></ul></li></ul><h1 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h1><pre><code>(1) 圆与直线交点(2) 两圆交点(3) 点到圆的切线(4) 两圆公切线(5) 两圆相交面积</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一月三日省选集训</title>
      <link href="/2022/01/03/%E4%B8%80%E6%9C%88%E4%B8%89%E6%97%A5%E7%9C%81%E9%80%89%E9%9B%86%E8%AE%AD/"/>
      <url>/2022/01/03/%E4%B8%80%E6%9C%88%E4%B8%89%E6%97%A5%E7%9C%81%E9%80%89%E9%9B%86%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<p>还没考完就开始写总结的恐怕只有我一个吧。</p><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> 考后总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4927 梦美与线段树</title>
      <link href="/2022/01/02/P4927-%E6%A2%A6%E7%BE%8E%E4%B8%8E%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2022/01/02/P4927-%E6%A2%A6%E7%BE%8E%E4%B8%8E%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>联赛之后连裸的线段树模板都打得如此痛苦。</p><p>自闭了，$QWQ$</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><ul><li>首先考虑三个点的情况</li></ul><p><img src="https://s2.loli.net/2022/01/02/xHiAGR1ErXyLMql.png" alt="无标题.png"></p><ul><li>不难发现此时答案为：$v_{fa} * 1 + v_{s1} * \frac{v_{s1}}{v_{fa}} + v_{s2} * \frac{v_{s2}}{v_{fa}} = \frac{v_{fa}^2 + v_{s1}^2 + v_{s2}^2}{v_{fa}}$，这时我们再将三个点上推到所有情况，设每个单点的答案为 $w$，可得</li></ul><p>$$<br>w_{fa} = \frac {\sum v_{son}^2 + v_{fa}^2}{v_{fa}}<br>$$</p><ul><li><p>再考虑懒标记下传的情况，具体地，设 $s2$ 表示节点权值示平方和， $sl2$ 表示节点长度平方和（它只用算一次，是不变的）， $sm$ 是 $v_i * len_i$ 的和有：<br>$$<br>\begin{aligned}<br>pushup : \\<br>&amp; v_i = v_{lc} + v_{rc} \\<br>&amp; s2_i = v_i^2 + s2_{lc} + s2_{rc} \\<br>&amp; sl2_i = len_i^2 + sl2_{lc} + sl2_{rc} \\<br>&amp; sm_i = len_i * v_i + sm_{lc} + sm_{rc} \\<br>pushdown : \\<br>&amp; s2_i = sl2_i * d^2 + 2d * sm_i + s2_i \\<br>&amp; v_i = len_i * d + v_i \\<br>&amp; sm_i = sl2_i * d + sm_i \\<br>\end{aligned}<br>$$</p></li><li><p>然后你一交，就 $WA$ 了。</p></li><li><p>在评论区游走了许久，才发现在不约分的情况下，$q$ 可能是 $mod$ 的倍数，所以一模答案就会变成0，而且答案可能在中途爆 $long \ long$ 所以我们直接手写高精（<del>$int128$ 强行水掉</del>）卡过这道题。</p></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(x) x &lt;&lt; 1 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(x) x &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int128</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line">LL v, flag, len;</span><br><span class="line">LL sum;</span><br><span class="line">LL num;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">LL a[N];</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (res * x) % mod;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">x = (x * x) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> pol</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL len = tr[x].r - tr[x].l + <span class="number">1</span>;</span><br><span class="line">tr[x].sum = (tr[<span class="built_in">l</span>(x)].sum + tr[<span class="built_in">r</span>(x)].sum);</span><br><span class="line">tr[x].num = (tr[<span class="built_in">l</span>(x)].num + tr[<span class="built_in">r</span>(x)].num + tr[x].sum * tr[x].sum);</span><br><span class="line">tr[x].v = (tr[<span class="built_in">l</span>(x)].v + tr[<span class="built_in">r</span>(x)].v + len * tr[x].sum);</span><br><span class="line">tr[x].len = (tr[<span class="built_in">l</span>(x)].len + tr[<span class="built_in">r</span>(x)].len + len * len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> emb</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL len = tr[x].r - tr[x].l + <span class="number">1</span>;</span><br><span class="line">tr[x].sum = (tr[<span class="built_in">l</span>(x)].sum + tr[<span class="built_in">r</span>(x)].sum);</span><br><span class="line">tr[x].num = (tr[<span class="built_in">l</span>(x)].num + tr[<span class="built_in">r</span>(x)].num + tr[x].sum * tr[x].sum);</span><br><span class="line">tr[x].v = (tr[<span class="built_in">l</span>(x)].v + tr[<span class="built_in">r</span>(x)].v + len * tr[x].sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, LL w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL len = tr[x].r - tr[x].l + <span class="number">1</span>;</span><br><span class="line">tr[x].num = ((tr[x].len * w * w + <span class="number">2</span> * w * tr[x].v) + tr[x].num);</span><br><span class="line">tr[x].flag = (tr[x].flag + w);</span><br><span class="line">tr[x].sum = (tr[x].sum + w * len);</span><br><span class="line">tr[x].v = (tr[x].len * w + tr[x].v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add</span>(<span class="built_in">l</span>(x), tr[x].flag);</span><br><span class="line"><span class="built_in">add</span>(<span class="built_in">r</span>(x), tr[x].flag);</span><br><span class="line">tr[x].flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) </span><br><span class="line">&#123;</span><br><span class="line">tr[x].sum = a[l];</span><br><span class="line">tr[x].l = tr[x].r = l;</span><br><span class="line">tr[x].num = a[l] * a[l];</span><br><span class="line">tr[x].v = a[l];</span><br><span class="line">tr[x].len = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">tr[x].l = l, tr[x].r = r;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">pol:: <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, LL w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= tr[x].l &amp;&amp; tr[x].r &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add</span>(x, w);</span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= mid) <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span>, l, r, w);</span><br><span class="line"><span class="keyword">if</span>(r &gt; mid) <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, w);</span><br><span class="line">emb:: <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL x, LL y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> y ? <span class="built_in">gcd</span>(y, x % y) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">ask</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL t = <span class="built_in">gcd</span>(tr[<span class="number">1</span>].sum, tr[<span class="number">1</span>].num);</span><br><span class="line">LL x1 = tr[<span class="number">1</span>].num / t;</span><br><span class="line">LL x2 = tr[<span class="number">1</span>].sum / t;</span><br><span class="line"><span class="keyword">return</span> x1  % mod * <span class="built_in">qpow</span>(x2, mod - <span class="number">2</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">10</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> op;</span><br><span class="line"><span class="built_in">read</span>(op);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">write</span>((<span class="built_in">ask</span>() + mod) % mod);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line">LL w;</span><br><span class="line"><span class="built_in">read</span>(l), <span class="built_in">read</span>(r), <span class="built_in">read</span>(w);</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">1</span>, l, r, w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平衡树</title>
      <link href="/2022/01/01/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
      <url>/2022/01/01/%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>$splay$ 应该不用讲吧，就写写 $fhq \ Treap$ 就可以了。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="可执行的操作"><a href="#可执行的操作" class="headerlink" title="可执行的操作"></a>可执行的操作</h2><ul><li>分离（$split$）将一棵树分成两棵树。</li><li>合并（$merge$）将两棵树合成一棵树。</li></ul><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><ul><li>它的主要思想是将一个 $Treap$ 分成两个。</li><li>这样的操作有两种类型：1.按权值来分。2.按前 $k$ 个来分。</li></ul><h3 id="权值版"><a href="#权值版" class="headerlink" title="权值版"></a>权值版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> k, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!now) x = y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (val[now] &lt;= k) x = now, <span class="built_in">split</span>(ch[now][<span class="number">1</span>], k, ch[now][<span class="number">1</span>], y);</span><br><span class="line">        <span class="keyword">else</span> y = now, <span class="built_in">split</span>(ch[now][<span class="number">0</span>], k, x, ch[now][<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">pushup</span>(now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前k个"><a href="#前k个" class="headerlink" title="前k个"></a>前k个</h3><ul><li>其实这和 $Splay$ 的找 $k$ 大数差不多。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> k, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!now) x = y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(val[now] &lt;= k) x = now, <span class="built_in">split</span>(ch[now][<span class="number">1</span>], k, ch[now][<span class="number">1</span>], y);</span><br><span class="line"><span class="keyword">else</span> y = now, <span class="built_in">split</span>(ch[now][<span class="number">0</span>], k, x, ch[now][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><ul><li>将两个 $Treap$ 合成一个，保证第一个的权值小于第二个。</li><li>满足大数一定在右边，小数一定在左边，但是因为是按随机权值插入，所以树的形状不固定（考试时 $TLE$  了一定要申诉）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line"><span class="keyword">if</span>(pri[x] &lt; pri[y])</span><br><span class="line">&#123;</span><br><span class="line">ch[x][<span class="number">1</span>] = <span class="built_in">merge</span>(ch[x][<span class="number">1</span>], y);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ch[y][<span class="number">0</span>] = <span class="built_in">merge</span>(x, ch[y][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展之后的操作"><a href="#拓展之后的操作" class="headerlink" title="拓展之后的操作"></a>拓展之后的操作</h2><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><ul><li>插入一个权值为 $v$ 的点，先把树按照 $v$ 的权值 $split$ 成两个，在按照顺序merge回去。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root, v, x, y);</span><br><span class="line">root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(x, <span class="built_in">make</span>(v)), y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root, v, x, z);</span><br><span class="line"><span class="built_in">split</span>(x, v - <span class="number">1</span>, x, y);</span><br><span class="line">y = <span class="built_in">merge</span>(ch[y][<span class="number">0</span>], ch[y][<span class="number">1</span>]);</span><br><span class="line">root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(x, y), z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="near"><a href="#near" class="headerlink" title="near"></a>near</h3><ul><li>就是前驱后继</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">near</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">bool</span> op)</span> <span class="comment">// op == 1 为前驱，反之即为后继 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root, v - (op == <span class="number">0</span>), x, y);</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">0</span>) k = val[<span class="built_in">get_k</span>(x, sz[x])];</span><br><span class="line"><span class="keyword">else</span>  k = val[<span class="built_in">get_k</span>(y, <span class="number">1</span>)];</span><br><span class="line">root = <span class="built_in">merge</span>(x, y);</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例题：luoguP3369-【模板】普通平衡树"><a href="#例题：luoguP3369-【模板】普通平衡树" class="headerlink" title="例题：luoguP3369 【模板】普通平衡树"></a>例题：<a href="https://www.luogu.com.cn/problem/P3369">luoguP3369 【模板】普通平衡树</a></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100001</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>, c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line"><span class="keyword">int</span> ch[N][<span class="number">3</span>]; <span class="comment">// 儿子</span></span><br><span class="line"><span class="keyword">int</span> val[N]; <span class="comment">// 每个点的权值 </span></span><br><span class="line"><span class="keyword">int</span> pri[N]; <span class="comment">// 随机生成的附件权值？ </span></span><br><span class="line"><span class="keyword">int</span> sz[N]; <span class="comment">// 以 i 为节点的树的节点的数量 </span></span><br><span class="line"><span class="keyword">int</span> tot; <span class="comment">// 总节点数量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sz[x] = sz[ch[x][<span class="number">0</span>]] + sz[ch[x][<span class="number">1</span>]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sz[++ tot] = <span class="number">1</span>, val[tot] = v, pri[tot] = <span class="built_in">rand</span>();</span><br><span class="line"><span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">// 合并 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line"><span class="keyword">if</span>(pri[x] &lt; pri[y])</span><br><span class="line">&#123;</span><br><span class="line">ch[x][<span class="number">1</span>] = <span class="built_in">merge</span>(ch[x][<span class="number">1</span>], y);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ch[y][<span class="number">0</span>] = <span class="built_in">merge</span>(x, ch[y][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> k, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!now) x = y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(val[now] &lt;= k) x = now, <span class="built_in">split</span>(ch[now][<span class="number">1</span>], k, ch[now][<span class="number">1</span>], y);</span><br><span class="line"><span class="keyword">else</span> y = now, <span class="built_in">split</span>(ch[now][<span class="number">0</span>], k, x, ch[now][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_k</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k &lt;= sz[ch[now][<span class="number">0</span>]]) now = ch[now][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k == sz[ch[now][<span class="number">0</span>]] + <span class="number">1</span>) <span class="keyword">return</span> now;</span><br><span class="line"><span class="keyword">else</span> k -= sz[ch[now][<span class="number">0</span>]] + <span class="number">1</span>, now = ch[now][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> pol</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, z;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root, v, x, y);</span><br><span class="line">root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(x, <span class="built_in">make</span>(v)), y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root, v, x, z);</span><br><span class="line"><span class="built_in">split</span>(x, v - <span class="number">1</span>, x, y);</span><br><span class="line">y = <span class="built_in">merge</span>(ch[y][<span class="number">0</span>], ch[y][<span class="number">1</span>]);</span><br><span class="line">root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(x, y), z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">near</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">bool</span> op)</span> <span class="comment">// op == 1 为前驱，反之即为后继 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root, v - (op == <span class="number">0</span>), x, y);</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">0</span>) k = val[<span class="built_in">get_k</span>(x, sz[x])];</span><br><span class="line"><span class="keyword">else</span>  k = val[<span class="built_in">get_k</span>(y, <span class="number">1</span>)];</span><br><span class="line">root = <span class="built_in">merge</span>(x, y);</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>((<span class="keyword">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"><span class="built_in">read</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> op, a;</span><br><span class="line"><span class="built_in">read</span>(op), <span class="built_in">read</span>(a);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pol:: <span class="built_in">insert</span>(a);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">pol:: <span class="built_in">remove</span>(a);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">split</span>(root, a - <span class="number">1</span>, x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sz[x] + <span class="number">1</span>);</span><br><span class="line">root = <span class="built_in">merge</span>(x, y);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, val[<span class="built_in">get_k</span>(root, a)]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pol:: <span class="built_in">near</span>(a, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pol:: <span class="built_in">near</span>(a, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>点分治</title>
      <link href="/2022/01/01/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
      <url>/2022/01/01/%E7%82%B9%E5%88%86%E6%B2%BB/</url>
      
        <content type="html"><![CDATA[<p>又忘了写了， $whk$ 又搞不过来，先鸽一下。</p><span id="more"></span><h1 id="例题Acwing-252-树"><a href="#例题Acwing-252-树" class="headerlink" title="例题Acwing 252. 树"></a>例题<a href="https://www.acwing.com/problem/content/description/254/">Acwing 252. 树</a></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> h[N], e[M], ne[M], w[M];</span><br><span class="line"><span class="keyword">bool</span> st[N];<span class="comment">//每个数有没有被删掉</span></span><br><span class="line"><span class="keyword">int</span> p[N], q[N]; <span class="comment">// p[] 存当前重心的所有子树的距离， q[] 存当前子树的距离 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx, w[idx] = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_size</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father)</span> <span class="comment">//求子树大小</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line"><span class="keyword">if</span>(e[i] != father)</span><br><span class="line">res += <span class="built_in">get_size</span>(e[i], x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_wc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father, <span class="keyword">int</span> tot, <span class="keyword">int</span>&amp; wc)</span><span class="comment">// 求重心</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">1</span>, ms = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(j == father) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> t = <span class="built_in">get_wc</span>(j, x, tot, wc);</span><br><span class="line">ms = <span class="built_in">max</span>(ms, t);</span><br><span class="line">sum += t;</span><br><span class="line">&#125;</span><br><span class="line">ms = <span class="built_in">max</span>(ms, tot - sum);</span><br><span class="line"><span class="keyword">if</span>(ms &lt;= tot / <span class="number">2</span>) wc = x;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dist</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father, <span class="keyword">int</span> dist, <span class="keyword">int</span>&amp; qt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st[x]) <span class="keyword">return</span> ;</span><br><span class="line">q[++ qt] = dist;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line"><span class="keyword">if</span>(e[i] != father)</span><br><span class="line"><span class="built_in">get_dist</span>(e[i], x, dist + w[i], qt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + k + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = k, j = <span class="number">0</span>;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j + <span class="number">1</span> &lt; i &amp;&amp; a[j + <span class="number">1</span>] + a[i] &lt;= m) j ++;</span><br><span class="line">j = <span class="built_in">min</span>(i - <span class="number">1</span>, j);</span><br><span class="line">res += j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_wc</span>(x, <span class="number">-1</span>, <span class="built_in">get_size</span>(x, <span class="number">-1</span>), x);</span><br><span class="line">st[x] = <span class="number">1</span>; <span class="comment">// 删除重心 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i], qt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_dist</span>(j, <span class="number">-1</span>, w[i], qt);</span><br><span class="line">res -= <span class="built_in">get</span>(q, qt);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= qt;k ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q[k] &lt;= m) res ++; <span class="comment">// 其中一个点是重心 </span></span><br><span class="line">p[++ pt] = q[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res += <span class="built_in">get</span>(p, pt);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">res += <span class="built_in">calc</span>(e[i]);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m), n || m)</span><br><span class="line">&#123;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(st));</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="built_in">add</span>(a, b, c), <span class="built_in">add</span>(b, a, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">calc</span>(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多项式</title>
      <link href="/2021/12/26/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
      <url>/2021/12/26/%E5%A4%9A%E9%A1%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>大佬前辈在线讲课，无奈完全听不懂啊（<del>QWQ</del>）</p><span id="more"></span><ul><li>先写点自己的多项式没家桶。</li></ul><h1 id="多项式乘法luoguP3803-【模板】多项式乘法（FFT）"><a href="#多项式乘法luoguP3803-【模板】多项式乘法（FFT）" class="headerlink" title="多项式乘法luoguP3803 【模板】多项式乘法（FFT）"></a>多项式乘法<a href="https://www.luogu.com.cn/problem/P3803">luoguP3803 【模板】多项式乘法（FFT）</a></h1><ul><li>$NTT / FFT$ 均可。 </li><li>$FFT$</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line">Node <span class="keyword">operator</span>+(<span class="keyword">const</span> Node &amp; t) <span class="keyword">const</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;x + t.x, y + t.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">Node <span class="keyword">operator</span>-(<span class="keyword">const</span> Node &amp; t) <span class="keyword">const</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;x - t.x, y - t.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">Node <span class="keyword">operator</span>*(<span class="keyword">const</span> Node &amp; t) <span class="keyword">const</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;x * t.x - y * t.y, x * t.y + y * t.x&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;a[N], b[N];</span><br><span class="line"><span class="keyword">int</span> rev[N], bit, tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(Node a[], <span class="keyword">int</span> inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i &lt; rev[i]) <span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> mid = <span class="number">1</span>;mid &lt; tot;mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Node w1 = <span class="built_in">Node</span>(&#123;<span class="built_in">cos</span>(Pi / mid), inv * <span class="built_in">sin</span>(Pi / mid)&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i += mid * <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">Node wk = <span class="built_in">Node</span>(&#123;<span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; mid;j ++, wk = wk * w1)</span><br><span class="line">&#123;</span><br><span class="line">Node x = a[i + j], y = wk * a[i + j + mid];</span><br><span class="line">a[i + j] = x + y, a[i + j + mid] = x - y;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i].x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= m;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;b[i].x);</span><br><span class="line"><span class="keyword">while</span>((<span class="number">1</span> &lt;&lt; bit) &lt; n + m + <span class="number">1</span>) bit ++;</span><br><span class="line">tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line">rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line"><span class="built_in">fft</span>(a, <span class="number">1</span>), <span class="built_in">fft</span>(b, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= tot;i ++) a[i] = a[i] * b[i];</span><br><span class="line"><span class="built_in">fft</span>(a, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n + m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, (<span class="keyword">int</span>)(a[i].x / tot + <span class="number">0.5</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>$NTT$</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e6</span> + <span class="number">5</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> r[N], bit, tot;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * x % mod;</span><br><span class="line">x = (x * x) % mod;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot; i ++)</span><br><span class="line"><span class="keyword">if</span>(i &lt; r[i]) <span class="built_in">swap</span>(x[i], x[r[i]]);</span><br><span class="line"><span class="keyword">int</span> mid, len, gn, g, a, b;</span><br><span class="line"><span class="keyword">for</span>(mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">len = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (mod - <span class="number">1</span>) / len);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">-1</span>) gn = <span class="built_in">qpow</span>(gn, mod - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i += len)</span><br><span class="line">&#123;</span><br><span class="line">g = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; mid;j ++, g = (LL) g * gn % mod)</span><br><span class="line">&#123;</span><br><span class="line">a = x[i + j], b = (LL)g * x[i + j + mid] % mod;</span><br><span class="line">x[i + j] = (a + b) % mod;</span><br><span class="line">x[i + j + mid] = (a - b + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i] = (a[i] + mod) % mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= m;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]), b[i] = (b[i] + mod) % mod;</span><br><span class="line">bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(tot &lt;= n + m) tot &lt;&lt;= <span class="number">1</span>, bit ++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line">r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line"><span class="built_in">NTT</span>(a, <span class="number">1</span>), <span class="built_in">NTT</span>(b, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line">a[i] = (LL)a[i] * b[i] % mod;</span><br><span class="line"><span class="built_in">NTT</span>(a, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> inv = <span class="built_in">qpow</span>(tot, mod - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n + m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, (LL)a[i] * inv % mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多项式求逆luoguP4238-【模板】多项式乘法逆"><a href="#多项式求逆luoguP4238-【模板】多项式乘法逆" class="headerlink" title="多项式求逆luoguP4238 【模板】多项式乘法逆"></a>多项式求逆<a href="https://www.luogu.com.cn/problem/P4238">luoguP4238 【模板】多项式乘法逆</a></h1><ul><li><p>题目：给定一个多项式 $F(x)$ ，请求出一个多项式 $G(x)$， 满足 $F(x) * G(x) \equiv 1 \pmod{x^n}$。系数对 $998244353$ 取模。</p></li><li><p>我们考虑倍增，设 $G_1(x)$ 满足：$G_1(x) * F(x) \equiv 1 \pmod {x^{\lceil \frac{n}{2} \rceil}}$。</p></li><li><p>那么 $G(X)-G_1(x) \equiv 0 \pmod {x^{\lceil \frac{n}{2} \rceil}}$。</p></li><li><p>$(G(x) - G_0(x))^2 \equiv 0 \pmod {x^n}$。</p></li><li><p>$G^2(x) - 2G(x)G_0(x) + G_0^2(x) \equiv 0 \pmod {x^n}$。</p></li><li><p>我们再根据题目 $F(x) * G(x) \equiv 1 \pmod{x^n}$ 等价变形一下。</p></li><li><p>$G(x) - 2G_0(x) + G_0^2(x)F(x) \equiv 0 \pmod {x^n}$。</p></li><li><p>$G(x) \equiv (2 - G_0(x)F(x))G_0(x) \pmod {x^n}$。</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>, Mod = <span class="number">998244353</span>, G = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> rev[N], a[N], b[N], n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> bit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; (<span class="number">1</span> &lt;&lt; bit);i ++) rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">mod</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x %= Mod) &lt; <span class="number">0</span> ? x + Mod : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL a, LL k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (res * a) % Mod;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">a = (a * a) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> bit, <span class="keyword">int</span> inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">calc</span>(bit);</span><br><span class="line"><span class="keyword">int</span> tot = (<span class="number">1</span> &lt;&lt; bit);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line"><span class="keyword">if</span>(rev[i] &lt; i) <span class="built_in">swap</span>(a[rev[i]], a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> mid = <span class="number">1</span>;mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> gn = <span class="built_in">qpow</span>(G, (Mod - <span class="number">1</span>) / (mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span>(inv == <span class="number">-1</span>) gn = <span class="built_in">qpow</span>(gn, Mod - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i += mid * <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> g = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; mid;j ++, g = <span class="number">1ll</span> * g * gn % Mod)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = a[i + j], y = <span class="number">1ll</span> * g * a[i + j + mid] % Mod;</span><br><span class="line">a[i + j] = (x + y) % Mod, a[i + j + mid] = <span class="built_in">mod</span>(x - y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(inv == <span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">LL Inv = <span class="built_in">qpow</span>(tot, Mod - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++) a[i] = <span class="number">1ll</span> * a[i] % Mod * Inv % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ni</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">int</span> a[], <span class="keyword">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> c[N];</span><br><span class="line"><span class="keyword">if</span>(len == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">b[<span class="number">0</span>] = <span class="built_in">qpow</span>(a[<span class="number">0</span>], Mod - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">get_ni</span>((len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, a, b);</span><br><span class="line"><span class="keyword">int</span> bit = <span class="number">0</span>, tot;</span><br><span class="line"><span class="keyword">while</span>((<span class="number">1</span> &lt;&lt; bit) &lt; (len &lt;&lt; <span class="number">1</span>)) bit ++;</span><br><span class="line">tot = (<span class="number">1</span> &lt;&lt; bit);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line"><span class="keyword">if</span>(i &lt; len) c[i] = a[i];</span><br><span class="line"><span class="keyword">else</span> c[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">NTT</span>(c, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(b, bit, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line">b[i] = <span class="built_in">mod</span>(<span class="built_in">mod</span>(<span class="number">2ll</span> - <span class="number">1ll</span> * c[i] * b[i] % Mod) * b[i]);</span><br><span class="line"><span class="built_in">NTT</span>(b, bit, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len;i &lt; tot;i ++) b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="built_in">get_ni</span>(n, a, b);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多项式除法和取模"><a href="#多项式除法和取模" class="headerlink" title="多项式除法和取模[]"></a>多项式除法和取模[]</h1><ul><li>问题：</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后缀自动机</title>
      <link href="/2021/12/23/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
      <url>/2021/12/23/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>后缀数组都没懂得蒻犇就被巨佬们卷来听后缀自动机，太难了QWQ</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="SAM的性质"><a href="#SAM的性质" class="headerlink" title="SAM的性质"></a>SAM的性质</h2><ul><li>$SAM$ 是一个状态机。一个起点，若干终点。原串的所有的字串和从 $SAM$ 起点开始的所有路径一一对应，不重不漏。所以终点就是包含所有后缀的点。</li><li>每个点包含若干字串，每个子串都一一对应一条从起点到该点的路径。且这些字串一定是里面最长字串的连续后缀。</li></ul><h3 id="SAM问题中经常考虑的两种边"><a href="#SAM问题中经常考虑的两种边" class="headerlink" title="SAM问题中经常考虑的两种边"></a>SAM问题中经常考虑的两种边</h3><ul><li>普通边，类似于 $Trie$。表示在某个状态所表示的所有字串的后面添加一个字串。</li><li>$Link$、$Father$。表示将某个状态所表示的最短字串的首字母删除。这类边构成一棵树。</li></ul><h2 id="SAM的构造思路"><a href="#SAM的构造思路" class="headerlink" title="SAM的构造思路"></a>SAM的构造思路</h2><ul><li>$endpos(s)$：子串s所有出现的位置（尾字母下标）集合。$SAM$ 中的每个状态都一一对应一个 $endpos$ 的等价类。</li></ul><h3 id="endpos的性质："><a href="#endpos的性质：" class="headerlink" title="endpos的性质："></a>endpos的性质：</h3><ul><li>令 $s1,s2$ 为 S 的两个子串 ，不妨设 $|s1|≤|s2|$ （我们用 $|s|$ 表示 $s$ 的长度 ，此处等价于 $s_1$ 不长于 $s_2$ ）。则 $s_1$ 是 $s_2$ 的后缀当且仅当 $endpos(s_1)⊇endpos(s_2)$ ，$s_1$ 不是 $s_2$ 的后缀当且仅当  $endpos(s_1)∩endpos(s_2)=∅$　。</li><li>两个不同子串的 $endpos$，要么有包含关系，要么没有交集。</li><li>两个子串的 $endpos$ 相同，那么短串为长串的后缀。</li><li>对于一个状态 $st$ ，以及任意的 $longest(st)$ 的后缀 $s$ ，如果 $s$ 的长度满足：$|shortest(st)|≤|s|≤|longsest(st)|$ ，那么 $s∈substrings(st)$ 。</li></ul><h2 id="SAM的构造过程"><a href="#SAM的构造过程" class="headerlink" title="SAM的构造过程"></a>SAM的构造过程</h2><ul><li>分类讨论，具体看板书。</li><li>证明较为复杂，略。</li></ul><h2 id="SAM时间复杂度"><a href="#SAM时间复杂度" class="headerlink" title="SAM时间复杂度"></a>SAM时间复杂度</h2><ul><li>线性。</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">1</span>, last = <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> len, fa;</span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">26</span>];</span><br><span class="line">&#125;node[N];</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line">LL f[N];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[N], ne[N], h[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = last, np = last = ++ tot; <span class="comment">// 插入新状态</span></span><br><span class="line">f[tot] = <span class="number">1</span>;</span><br><span class="line">node[np].len = node[p].len + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(; p &amp;&amp; !node[p].ch[c]; p = node[p].fa) node[p].ch[c] = np;</span><br><span class="line"><span class="keyword">if</span>(!p) node[np].fa = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> q = node[p].ch[c];</span><br><span class="line"><span class="keyword">if</span>(node[q].len == node[p].len + <span class="number">1</span>) node[np].fa = q;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> nq = ++ tot;</span><br><span class="line">node[nq] = node[q], node[nq].len = node[p].len + <span class="number">1</span>;</span><br><span class="line">node[q].fa = node[np].fa = nq;</span><br><span class="line"><span class="keyword">for</span>(; p &amp;&amp; node[p].ch[c] == q; p = node[p].fa) node[p].ch[c] = nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i; i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dfs</span>(e[i]);</span><br><span class="line">f[x] += f[e[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f[x] &gt; <span class="number">1</span>) ans = <span class="built_in">max</span>(ans, f[x] * node[x].len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; str[i];i ++) <span class="built_in">extend</span>(str[i] - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= tot; i ++) <span class="built_in">add</span>(node[i].fa, i);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后缀数组</title>
      <link href="/2021/12/21/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
      <url>/2021/12/21/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>只会倍增</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="前置知识：基数排序"><a href="#前置知识：基数排序" class="headerlink" title="前置知识：基数排序"></a>前置知识：基数排序</h2><ul><li>$O(n)$，通过离散化，前缀和可求出字符串的排名（如果要稳定的话，记得从后往前枚举）。</li></ul><h2 id="算法目的"><a href="#算法目的" class="headerlink" title="算法目的"></a>算法目的</h2><ul><li>在 $O(n \log n)$ 的时间里，将所有的后缀按字典序排序。</li><li>$sa[i]$：排名第 $i$ 位的是第几个后缀。</li><li>$rk[i]$：第 $i$ 个后缀的排名是多少。</li><li>$height[i]$：$sa[i]$ 和 $sa[i - 1]$ 的最长公共前缀的长度。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li>我们从前往后处理，假设我们已经将序列的前 $k$ 个字符作为第一关键字排好了序，根据倍增思想，我们下一步就应该将前 $2k$ 个字符作为第一关键字排序。那该如何实现呢？可以发现，我们可以先将后 $k$ 个字符作为第一关键字排序，再将前 $k$ 个字符作为第一关键字排序即可。</li><li>$sa_i$ 已经求出来了，那 $height_i$ 呢？</li><li>其实关于 $height_i$ 我们有一个定理，对于 $lcp(i,j)$ 恒等于 $\min(lcp(i,k), lcp(k, j)),i \le k \le j$ 这个用夹逼法（<del>作者也一脸懵，还请读者自行证明</del>）</li></ul><h1 id="例题：Acwing2715-后缀数组"><a href="#例题：Acwing2715-后缀数组" class="headerlink" title="例题：Acwing2715. 后缀数组"></a>例题：<a href="https://www.acwing.com/problem/content/2717/">Acwing2715. 后缀数组</a></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> sa[N], x[N], y[N], c[N], rk[N], height[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) c[x[i] = s[i]] ++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= m;i ++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n; i;i --) sa[c[x[i]] --] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= n;k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n - k + <span class="number">1</span>;i &lt;= n;i ++) y[ ++ num] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sa[i] &gt; k)</span><br><span class="line">y[++ num] = sa[i] - k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++) c[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) c[x[i]] ++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= m;i ++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n; i;i --) sa[c[x[y[i]]] --] = y[i], y[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line">x[sa[<span class="number">1</span>]] = <span class="number">1</span>, num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)</span><br><span class="line">x[sa[i]] = (y[sa[i]] == y[sa[i - <span class="number">1</span>]] &amp;&amp; y[sa[i] + k] == y[sa[i - <span class="number">1</span>] + k]) ? num : ++ num;</span><br><span class="line"><span class="keyword">if</span>(num == n) <span class="keyword">break</span>;</span><br><span class="line">m = num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_height</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) rk[sa[i]] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(rk[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(k) k --;</span><br><span class="line"><span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(i + k &lt;= n &amp;&amp; j + k &lt;= n &amp;&amp; s[i + k] == s[j + k]) k ++;</span><br><span class="line">height[rk[i]] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">n = <span class="built_in">strlen</span>(s + <span class="number">1</span>), m = <span class="number">122</span>;</span><br><span class="line"><span class="built_in">get_sa</span>();</span><br><span class="line"><span class="built_in">get_height</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sa[i]);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, height[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左偏树</title>
      <link href="/2021/12/19/%E5%B7%A6%E5%81%8F%E6%A0%91/"/>
      <url>/2021/12/19/%E5%B7%A6%E5%81%8F%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>不知道为什么没保存，只能鸽着了，下次再来补。</p><p>不鸽了，开补。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>多于一个数据结构，我们需要知道这东西是用来做什么的，效率怎么样。左偏树是一种支持在 $O(\log n)$ 的时间复杂度内进行合并查询的类堆式（本来就含并查集）数据结构。</li></ul><h2 id="支持的操作"><a href="#支持的操作" class="headerlink" title="支持的操作"></a>支持的操作</h2><ul><li>插入一个新堆 $O(1)$。</li><li>合并两个堆 $O(\log n)$。</li><li>查询一个堆里的最值 $O(1)$。</li><li>删除一个堆里的最小、大值。</li></ul><h2 id="满足的基本性质"><a href="#满足的基本性质" class="headerlink" title="满足的基本性质"></a>满足的基本性质</h2><ul><li>左偏树具有 <strong>堆性质</strong> ，即若其满足小根堆的性质，则对于每个结点 $x$ ，有 $v_x≤v_{lc},v_x≤v_{rc}$。</li><li>左偏树具有 <strong>左偏性质</strong> ，即对于每个结点 $x$ ,有 $dist_{lc}\ge dist_{rc}$ 。</li></ul><h2 id="核心操作：合并操作"><a href="#核心操作：合并操作" class="headerlink" title="核心操作：合并操作"></a>核心操作：合并操作</h2><ul><li>其实需要的函数就这么一个。</li><li>定义 $merge(x,y)$ 为合并两棵分别以 $x,y$ 为根节点的左偏树，其返回值为合并之后的根节点。</li><li>首先不考虑左偏性质，我们描述一下合并两个具有堆性质的树的过程。假设我们要合并的是小根堆。</li><li>1.若$v_x \le v_y$ 则将 $x$ 作为根节点，否则交换 $x,y$。</li><li>2.向下递归使 $y$ 与 $x$ 的右儿子合并，并返回新儿子节点的编号。</li><li>3.当 $x$ 或 $y$ 之中有空节点时，返回 $x + y$（避免分类讨论）。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">cmp</span>(y, x)) <span class="built_in">swap</span>(x, y);</span><br><span class="line">r[x] = <span class="built_in">merge</span>(r[x], y);</span><br><span class="line"><span class="keyword">if</span>(dist[r[x]] &gt; dist[l[x]]) <span class="built_in">swap</span>(l[x], r[x]);</span><br><span class="line">dist[x] = dist[r[x]] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例题Acwing2714-左偏树"><a href="#例题Acwing2714-左偏树" class="headerlink" title="例题Acwing2714. 左偏树"></a>例题<a href="https://www.acwing.com/problem/content/description/2716/">Acwing2714. 左偏树</a></h1><ul><li>$luogu$ 的例题太 $large$ 了</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> v[N], dist[N], l[N], r[N];</span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v[x] != v[y]) <span class="keyword">return</span> v[x] &lt; v[y];</span><br><span class="line"><span class="keyword">return</span> x &lt; y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[x] != x) <span class="keyword">return</span> p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">cmp</span>(y, x)) <span class="built_in">swap</span>(x, y);</span><br><span class="line">r[x] = <span class="built_in">merge</span>(r[x], y);</span><br><span class="line"><span class="keyword">if</span>(dist[r[x]] &gt; dist[l[x]]) <span class="built_in">swap</span>(l[x], r[x]);</span><br><span class="line">dist[x] = dist[r[x]] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">v[<span class="number">0</span>] = <span class="number">2e9</span>;</span><br><span class="line"><span class="keyword">while</span>(n --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t, x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;t, &amp;x);</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">v[++ idx] = x;</span><br><span class="line">p[idx] = idx;</span><br><span class="line">dist[idx] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;y);</span><br><span class="line">x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span>(x != y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">cmp</span>(y, x)) <span class="built_in">swap</span>(x, y);</span><br><span class="line">p[y] = x;</span><br><span class="line"><span class="built_in">merge</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, v[<span class="built_in">find</span>(x)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">x = <span class="built_in">find</span>(x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">cmp</span>(r[x], l[x])) <span class="built_in">swap</span>(l[x], r[x]);</span><br><span class="line">p[x] = l[x], p[l[x]] = l[x];</span><br><span class="line"><span class="built_in">merge</span>(l[x], r[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>P2387 [NOI2014] 魔法森林</title>
      <link href="/2021/12/13/P2387-NOI2014-%E9%AD%94%E6%B3%95%E6%A3%AE%E6%9E%97/"/>
      <url>/2021/12/13/P2387-NOI2014-%E9%AD%94%E6%B3%95%E6%A3%AE%E6%9E%97/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2387">题目传送门</a></p><span id="more"></span><h1 id="solution："><a href="#solution：" class="headerlink" title="solution："></a>solution：</h1><ul><li>优先按照 $A$ 为关键字排序，然后按照顺序，动态加边，使边的代价变成 $B$ 的最大值，则加入第 $i$ 条边后的最小代价就是 $A_i$ + $\min_1^n{v_i}$。</li><li>动态加边， $LCT$ 的裸题，但是题目中的代价明显是在边上，怎么办呢，我们可以将边拆成（边-点-边），将边上的代价等价转移到点上。断开时在相应的选择代价最大的边就可以了</li></ul><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">150010</span>, Inf = <span class="number">1e9</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, a, b;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> Edge&amp; t) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; t.a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> s[<span class="number">2</span>], p, v;</span><br><span class="line"><span class="keyword">int</span> mx, rev;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">int</span> stk[N], p[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line"><span class="keyword">return</span> p[x]; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushrev</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">swap</span>(tr[x].s[<span class="number">0</span>], tr[x].s[<span class="number">1</span>]);</span><br><span class="line">tr[x].rev ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[x].mx = x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">2</span>;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[tr[tr[x].s[i]].mx].v &gt; tr[tr[x].mx].v)</span><br><span class="line">tr[x].mx = tr[tr[x].s[i]].mx;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].rev)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pushrev</span>(tr[x].s[<span class="number">0</span>]), <span class="built_in">pushrev</span>(tr[x].s[<span class="number">1</span>]);</span><br><span class="line">tr[x].rev = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> tr[tr[x].p].s[<span class="number">0</span>] != x &amp;&amp; tr[tr[x].p].s[<span class="number">1</span>] != x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line"><span class="keyword">int</span> k = tr[y].s[<span class="number">1</span>] == x;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isroot</span>(y)) tr[z].s[tr[z].s[<span class="number">1</span>] == y] = x;</span><br><span class="line">tr[x].p = z;</span><br><span class="line">tr[y].s[k] = tr[x].s[k ^ <span class="number">1</span>], tr[tr[x].s[k ^ <span class="number">1</span>]].p = y;</span><br><span class="line">tr[x].s[k ^ <span class="number">1</span>] = y, tr[y].p = x;</span><br><span class="line"><span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>, r = x;</span><br><span class="line">stk[++ top] = r;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isroot</span>(r)) stk[++ top] = r = tr[r].p;</span><br><span class="line"><span class="keyword">while</span>(top) <span class="built_in">pushdown</span>(stk[top --]);</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isroot</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isroot</span>(y))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((tr[y].s[<span class="number">1</span>] == x) ^ (tr[z].s[<span class="number">1</span>] == y)) <span class="built_in">rotate</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">// 建立一条从根到x的路径，同时将x变成splay的根节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> z = x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; x; y = x, x = tr[x].p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line">tr[x].s[<span class="number">1</span>] = y, <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">splay</span>(z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_root</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">// 将x变为原树的根节点 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">access</span>(x);</span><br><span class="line"><span class="built_in">pushrev</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//找到x所在的原树根节点，再将原树的根节点旋转到splay的根节点 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">access</span>(x);</span><br><span class="line"><span class="keyword">while</span>(tr[x].s[<span class="number">0</span>]) <span class="built_in">pushdown</span>(x), x = tr[x].s[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line"><span class="keyword">return</span> x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">// 给x和y之间的路径建立一个splay，其根节点是y</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_root</span>(x);</span><br><span class="line"><span class="built_in">access</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><span class="comment">// 如果x和y不连通，则加入一条x和y之间的边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_root</span>(x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find_root</span>(y) != x) tr[x].p = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><span class="comment">// 如果x和y之间存在边，则删除该边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_root</span>(x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find_root</span>(y) == x &amp;&amp; tr[y].p == x &amp;&amp; !tr[y].s[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">tr[x].s[<span class="number">1</span>] = tr[y].p = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;e[i].x, &amp;e[i].y, &amp;e[i].a, &amp;e[i].b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n + m;i ++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = i;</span><br><span class="line"><span class="keyword">if</span>(i &gt; n) tr[i].v = e[i - n].b;</span><br><span class="line">tr[i].mx = i;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> res = Inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = e[i].x, y = e[i].y, a = e[i].a, b = e[i].b;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(x) == <span class="built_in">find</span>(y))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">split</span>(x, y);</span><br><span class="line"><span class="keyword">int</span> t = tr[y].mx;</span><br><span class="line"><span class="keyword">if</span>(tr[t].v &gt; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cut</span>(e[t - n].x, t), <span class="built_in">cut</span>(t, e[t - n].y);</span><br><span class="line"><span class="built_in">link</span>(x, n + i), <span class="built_in">link</span>(n + i, y); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="built_in">link</span>(x, n + i), <span class="built_in">link</span>(n + i, y); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(<span class="number">1</span>) == <span class="built_in">find</span>(n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">split</span>(<span class="number">1</span>, n);</span><br><span class="line">res = <span class="built_in">min</span>(res, a + tr[tr[n].mx].v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(res == Inf) res = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12月13号考试</title>
      <link href="/2021/12/13/12%E6%9C%8813%E5%8F%B7%E8%80%83%E8%AF%95/"/>
      <url>/2021/12/13/12%E6%9C%8813%E5%8F%B7%E8%80%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>自从进入省选预备阶段，考一次，崩一次······</p><span id="more"></span><h1 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">取石子（a） </span><br><span class="line">【题目描述】  有 n 堆石子，第 i 堆有 ai 个。你和你的好朋友轮流取石子，每次从一堆石子 中取若干个（不能不取） 。你很绅士地让你的好朋友先手。 </span><br><span class="line">为了能确保胜利，趁你的好朋友不在的时候，你可以取走一些石子，再放入 一些石子（可以将一堆石子全部取走，但是不能创造新的石子堆）。  </span><br><span class="line">为了避免被发现，你的改动不能太大。因此，我们定义，取走和放入一个石 子需要一点代价。  你想知道，要得到一个自己必胜的局面，最少需要支付多少代价。  有多组数据。 </span><br><span class="line">【输入数据】  第一行一个整数 T 表示数据组数。 接下来 2T 行，每两行代表一组数据：第一行一个整数 n，第二行 n 个整数 a1~an。 </span><br><span class="line">【输出数据】 T 行，每行一个整数表示答案。 </span><br><span class="line">【样例输入】 </span><br><span class="line">4 </span><br><span class="line">2 </span><br><span class="line">1 3 </span><br><span class="line">3 </span><br><span class="line">1 1 1 </span><br><span class="line">4 </span><br><span class="line">10 4 5 1 </span><br><span class="line">5 </span><br><span class="line">16808 75250 50074 43659 8931 </span><br><span class="line">【样例输出】</span><br><span class="line">2 </span><br><span class="line">1 </span><br><span class="line">4 </span><br><span class="line">28192 </span><br><span class="line">【样例解释】  前三组数据的一种可能最优解为(3,3)，(1,1,0)，(7,3,5,1)。 </span><br><span class="line">【数据范围】  </span><br><span class="line">对于 5%的数据，n=2，ai&lt;=10^9。  </span><br><span class="line">对于 15%的数据，n&lt;=15，ai&lt;=10^3。  </span><br><span class="line">对于 20%的数据，n&lt;=15，ai&lt;=10^5。  </span><br><span class="line">对于 20%的数据，n&lt;=8，ai&lt;=10^9。  </span><br><span class="line">对于 15%的数据，n&lt;=10，ai&lt;=10^9。  </span><br><span class="line">对于 10%的数据，n&lt;=12，ai&lt;=10^9。  </span><br><span class="line">对于 15%的数据，n&lt;=15，ai&lt;=10^9。  </span><br><span class="line">以上各部分相互独立。  </span><br><span class="line">对于所有数据，1&lt;=T&lt;=6，1&lt;=n&lt;=15，0&lt;=ai&lt;=10^9。 </span><br></pre></td></tr></table></figure><ul><li>自己口胡了一个贪心。</li><li>不难发现当所有数的异或和为零时，后手必胜（参见SG函数），那么我们依据线性基的思路，枚举每一位，计算每一位异或后的等于零的最小代价即可，又因为使高位代价为零的代价一定远大于后面的代价，故高位的最优大概率是全局最优（<del>雾</del>)？</li><li>和巨佬的状压拍了几万组，应该没有什么问题。</li><li>先贴一下代码：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> n, T;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"><span class="keyword">int</span> res, flag, cnt;</span><br><span class="line">LL ans = <span class="number">1e13</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">bool</span> p;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL tem = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) b[i] = a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">31</span>;k &gt;= <span class="number">0</span>;k --)</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">res = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i] &amp; (<span class="number">1</span> &lt;&lt; k))</span><br><span class="line">&#123;</span><br><span class="line">flag ^= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(b[i] % (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span> &lt; res)</span><br><span class="line">&#123;</span><br><span class="line">res = b[i] % (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>;</span><br><span class="line">cnt = i;</span><br><span class="line">p = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; k) - (b[i] % (<span class="number">1</span> &lt;&lt; k)) &lt; res)</span><br><span class="line">&#123;</span><br><span class="line">res = (<span class="number">1</span> &lt;&lt; k) - (b[i] % (<span class="number">1</span> &lt;&lt; k));</span><br><span class="line">cnt = i;</span><br><span class="line">p = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!p) tem += res, b[cnt] -= res;</span><br><span class="line"><span class="keyword">else</span> tem += res, b[cnt] += res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="built_in">min</span>(ans, tem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;a.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;a.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="number">1e13</span> + <span class="number">7</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="built_in">sim</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不难发现这一定不是正解，我们根据数据范围 $n &lt;= 15$ 不难发现这题是状压 $dp$, 我们用 $f [k] [i] [S] [0/1]$表示当前考虑到从高到低第 $k$ 位，前 $i$ 个数第 $k$ 位已经 确定，$S$ 状压记录每个数大于、小于或等于初始值，第 $k$ 位当前异或和为 $0/1$ 的 最小代价。枚举这个数这一位取 $0/1$ 转移即可。时间复杂度为 $O(Tn3^n \log ai)$。<br> 当一个数小于初始值时，后面每一位取 $1$ 都要付出代价。当一个数大于初始 值时，后面每一位取 $0$ 都要付出代价，而取 $0$ 在异或意义下相当于取两次 $1$ 。因 此当一个数大于初始值时，先假定这个数之后的位都取 $1$ ，于是大于和小于可以 记在一起。多开一维$[0/1]$表示之后的位的取 $1$ 情况。 时间复杂度 $O(Tn2^n \log ai)$。</li><li>正解代码：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">\\ by mydcwfy %%%%</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">16</span>, M = (<span class="number">1</span> &lt;&lt; <span class="number">15</span>) + <span class="number">10</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], n;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">2</span>][M][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">Abs</span><span class="params">(T x)</span></span>&#123;<span class="keyword">return</span> x &gt; <span class="number">0</span> ? x : -x;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> sta = <span class="number">0</span>; sta &lt; (<span class="number">1</span> &lt;&lt; n); ++ sta)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> now = <span class="number">0</span>; now &lt; <span class="number">2</span>; ++ now)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> chg = <span class="number">0</span>; chg &lt; <span class="number">2</span>; ++ chg) f[id][sta][now][chg] = INF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">clear</span>(<span class="number">0</span>);</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> frm = <span class="number">0</span>, to = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> bit = <span class="number">30</span>; ~bit; -- bit)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> low = a[i] &amp; ((<span class="number">1</span> &lt;&lt; bit) - <span class="number">1</span>), val = a[i] &gt;&gt; bit &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> cost = !val ? (<span class="number">1</span> &lt;&lt; bit) - low : low + <span class="number">1</span>, frmval;</span><br><span class="line">            <span class="built_in">clear</span>(to);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> sta = <span class="number">0</span>; sta &lt; (<span class="number">1</span> &lt;&lt; n); ++ sta)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> now = <span class="number">0</span>; now &lt; <span class="number">2</span>; ++ now)</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> chg = <span class="number">0</span>; chg &lt; <span class="number">2</span>; ++ chg)</span><br><span class="line">                        <span class="keyword">if</span> (sta &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            frmval = f[frm][sta][now][chg];</span><br><span class="line">                            f[to][sta][now][chg] = <span class="built_in">min</span>(f[to][sta][now][chg], frmval);</span><br><span class="line">                            f[to][sta][now ^ <span class="number">1</span>][chg] = <span class="built_in">min</span>(f[to][sta][now ^ <span class="number">1</span>][chg], frmval + (<span class="number">1</span> &lt;&lt; bit));</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            frmval = f[frm][sta][now][chg];</span><br><span class="line">                            f[to][sta][now ^ val][chg] = <span class="built_in">min</span>(f[to][sta][now ^ val][chg], frmval);</span><br><span class="line">                            f[to][sta | (<span class="number">1</span> &lt;&lt; i)][now ^ val ^ <span class="number">1</span>][chg ^ val] = <span class="built_in">min</span>(f[to][sta | (<span class="number">1</span> &lt;&lt; i)][now ^ val ^ <span class="number">1</span>][chg ^ val], frmval + cost);</span><br><span class="line">                        &#125;</span><br><span class="line">            <span class="built_in">swap</span>(frm, to);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> sta = <span class="number">0</span>; sta &lt; (<span class="number">1</span> &lt;&lt; n); ++ sta)</span><br><span class="line">        &#123;</span><br><span class="line">            f[frm][sta][<span class="number">1</span>][<span class="number">0</span>] = INF;</span><br><span class="line">            f[frm][sta][<span class="number">1</span>][<span class="number">1</span>] = f[frm][sta][<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">            f[frm][sta][<span class="number">0</span>][<span class="number">1</span>] = INF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> sta = <span class="number">0</span>; sta &lt; (<span class="number">1</span> &lt;&lt; n); ++ sta)</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, <span class="built_in">min</span>(f[frm][sta][<span class="number">0</span>][<span class="number">0</span>], f[frm][sta][<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;a.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;a.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="keyword">int</span> t;cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">【题目描述】 </span><br><span class="line">小 R 种了一棵苹果树，这棵树上有 n 个节点（标号从 0 到 n-1），有 n-1 条树 枝连接这 n 个节点，这 n 个节点相互连通。每条树枝的长度为 1。 </span><br><span class="line">苹果树上的每一个节点上生长着一个苹果，这个苹果散发着香味。在0时刻， 第 i 个节点的苹果散发香味的浓郁度为 s[i]，以后每过一个单位时间，香味的 浓郁度就会增加 a[i]。 </span><br><span class="line">苹果树上还有一只蚂蚁，在 0 时刻时，这只蚂蚁在 0 号节点，在第 i 时刻， 它会朝着第 i 时刻时香味最浓郁的节点方向走 1 个单位长度。（如果两个节点的 浓郁度相同，则标号较大的节点被认为是香味更浓郁的）。如果在第 i 时刻，蚂 蚁所处的位置已经是香味最浓郁的节点了，那么它会选择在原地休息。 </span><br><span class="line">现在，小 R 有 m 个问题，他想知道在第 t[i]个时刻蚂蚁的位置。 </span><br><span class="line">【输入数据】</span><br><span class="line">第一行 2 个整数 n,m，表示点数和询问数。 </span><br><span class="line">第二行 n 个整数，表示每个节点的初始香味浓郁度 s[i]。 </span><br><span class="line">第三行 n 个整数，表示每个节点的香味浓郁度的增加值 a[i]。 </span><br><span class="line">接下来 n-1 行，每行三个整数 s,t，表示 s 和 t 之间有一条边。 </span><br><span class="line">最后一行 m 个整数，表示 m 个询问。 </span><br><span class="line">【输出数据】 </span><br><span class="line">对于每个询问输出一行答案，表示在 t[i]时刻蚂蚁的位置。 </span><br><span class="line">【样例输入】  </span><br><span class="line">3 4 </span><br><span class="line">6 3 1 </span><br><span class="line">0 6 7 </span><br><span class="line">0 1</span><br><span class="line">0 2 </span><br><span class="line">1 2 </span><br><span class="line">3 4 </span><br><span class="line">【样例输出】  </span><br><span class="line">0  </span><br><span class="line">1  </span><br><span class="line">0  </span><br><span class="line">2 </span><br><span class="line">【数据范围】 </span><br><span class="line">对于 20%的数据，n,m&lt;=100，t[i]&lt;=100。 </span><br><span class="line">对于 20%的数据，n,m&lt;=1000。 </span><br><span class="line">对于 10%的数据，n,m&lt;=100000，a[i]=0。 </span><br><span class="line">对于 30%的数据，n,m&lt;=100000，t[i]&lt;=100000。 </span><br><span class="line">对于 20%的数据，n,m&lt;=100000。 以上各部分相互独立。 </span><br><span class="line">对于所有数据，1&lt;=n,m&lt;=100000 ，0&lt;=a[i]&lt;=10^6，0&lt;=s[i]&lt;=10^15， 0&lt;=t[i]&lt;=10^9。 </span><br></pre></td></tr></table></figure><ul><li><p>考场上的大暴力永远也打不出来·····</p></li><li><p>开始就想拿部分分，直接上暴力（其实是正解）取50分跑路，写了半天不会开栈空间根本没法调，然后就裂开了。</p></li><li><p>$solution$：首先不难发现这道题求得就是 $n$ 个一次函数交点的凸包，然后就用斜率优化求出交点,.然后就知道了时间段，最后通过 $lca$ 求就完事了。</p></li><li><p>时间复杂度：$O((n+m) \log (n+m))$</p></li><li><p>代码：</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">\\ by mydcwfy</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">__int128_t</span> s128;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF = <span class="number">1e17</span>;</span><br><span class="line"><span class="keyword">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="keyword">int</span> dfn[N], top[N], f[N], son[N], sz[N], tot, dep[N], nw[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    ll k, b;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;l[N];</span><br><span class="line"><span class="keyword">int</span> stk[N], n, m, tp, pos[N], at[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> _fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[x] = _fa, sz[x] = <span class="number">1</span>, dep[x] = dep[_fa] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; ~i; i = ne[i])</span><br><span class="line">        <span class="keyword">if</span> (e[i] != _fa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs1</span>(e[i], x);</span><br><span class="line">            <span class="keyword">if</span> (sz[e[i]] &gt; sz[son[x]]) son[x] = e[i];</span><br><span class="line">            sz[x] += sz[e[i]];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[x] = ++ tot, top[x] = tp, nw[tot] = x;</span><br><span class="line">    <span class="keyword">if</span> (son[x]) <span class="built_in">dfs2</span>(son[x], tp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = h[x]; ~i; i = ne[i])</span><br><span class="line">        <span class="keyword">if</span> (e[i] != f[x] &amp;&amp; e[i] != son[x]) <span class="built_in">dfs2</span>(e[i], e[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (top[u] != top[v])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[top[u]] &lt; dep[top[v]]) <span class="built_in">swap</span>(u, v);</span><br><span class="line">        u = f[top[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[u] &lt; dep[v] ? u : v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; dfn[u] - dfn[top[u]] &amp;&amp; u) k -= dfn[u] - dfn[top[u]] + <span class="number">1</span>, u = f[top[u]];</span><br><span class="line">    <span class="keyword">return</span> nw[dfn[u] - k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">jump_to</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="built_in">LCA</span>(u, v);</span><br><span class="line">    <span class="keyword">if</span> (dep[u] - dep[l] &gt;= k) <span class="keyword">return</span> <span class="built_in">jump</span>(u, k);</span><br><span class="line">    k -= dep[u] - dep[l];</span><br><span class="line">    <span class="keyword">if</span> (dep[v] - dep[l] &gt;= k) <span class="keyword">return</span> <span class="built_in">jump</span>(v, dep[v] - dep[l] - k);</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(<span class="keyword">const</span> Line &amp;l1, <span class="keyword">const</span> Line &amp;l2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1.b == l2.b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l1.k == l2.k) <span class="keyword">return</span> l1.b &lt; l2.b ? -INF : INF;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> * (l1.b - l2.b) / (l2.k - l1.k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Line &amp;l1, <span class="keyword">const</span> Line &amp;l2)</span></span>&#123;<span class="keyword">return</span> l1.k == l2.k ? (l1.b == l2.b ? l1.id &lt; l2.id : l1.b &lt; l2.b) : l1.k &lt; l2.k;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;ant.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;ant.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) l[i].id = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;l[i].b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;l[i].k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">        <span class="built_in">add</span>(++ u, ++ v), <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(l + <span class="number">1</span>, l + n + <span class="number">1</span>, cmp);</span><br><span class="line">    stk[tp = <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (tp &gt; <span class="number">1</span> &amp;&amp; (<span class="built_in">cross</span>(l[stk[tp - <span class="number">1</span>]], l[stk[tp]]) &gt; <span class="built_in">cross</span>(l[stk[tp - <span class="number">1</span>]], l[i]) ||</span><br><span class="line">        (<span class="built_in">cross</span>(l[stk[tp - <span class="number">1</span>]], l[stk[tp]]) == <span class="built_in">cross</span>(l[stk[tp - <span class="number">1</span>]], l[i]) &amp;&amp; l[stk[tp]].id &lt; l[i].id))) tp --;</span><br><span class="line">        <span class="keyword">while</span> (tp &amp;&amp; (<span class="built_in">cross</span>(l[stk[tp]], l[i]) &lt; <span class="number">0</span> || (<span class="built_in">cross</span>(l[stk[tp]], l[i]) == <span class="number">0</span> &amp;&amp; l[stk[tp]].id &lt; l[i].id))) tp --;</span><br><span class="line">        stk[++ tp] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    pos[<span class="number">1</span>] = <span class="number">1</span>, at[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= tp; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> cr = <span class="built_in">cross</span>(l[stk[i - <span class="number">1</span>]], l[stk[i]]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">ceil</span>(cr) - cr &lt; <span class="number">1e-10</span>) at[i] = <span class="built_in">ceil</span>(cr) + (l[stk[i]].id &lt; l[stk[i - <span class="number">1</span>]].id);</span><br><span class="line">        <span class="keyword">else</span> at[i] = <span class="built_in">ceil</span>(cr);</span><br><span class="line">        pos[i] = <span class="built_in">jump_to</span>(pos[i - <span class="number">1</span>], l[stk[i - <span class="number">1</span>]].id, at[i] - at[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    pos[tp + <span class="number">1</span>] = l[stk[tp]].id;</span><br><span class="line">    ll t;</span><br><span class="line">    <span class="keyword">while</span> (m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;t);</span><br><span class="line">        <span class="keyword">int</span> now = <span class="built_in">upper_bound</span>(at + <span class="number">1</span>, at + tp + <span class="number">1</span>, t) - at - <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">jump_to</span>(pos[now], pos[now + <span class="number">1</span>], t - at[now]) - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">数列（sequence） </span><br><span class="line">【题目描述】  </span><br><span class="line">小 A 有 N 个正整数，紧接着，他打算依次在黑板上写下这 N 个数。对于每 一个数，他可以决定将这个数写在当前数列的最左边或最右边。现在他想知道， 他写下的数列的可能的最长严格上升子序列的长度是多少，同时他还想知道有多 少种不同的最长的严格上升子序列。 </span><br><span class="line">两个子序列被认为是不同的当且仅当：两个子序列属于两个不同的写序列方 案（两个写序列方案中有至少一步是不一样的）或两个子序列位于同一写序列方 案的不同位置。 </span><br><span class="line">由于结果可能很大，所以小 A 只需要知道最长严格上升子序列的方案数对 10^9+7 取模的结果。 【输入数据】 第一行一个正整数 N。 第二行包含 N 个由空格隔开的正整数，表示小 A 写下的初始序列。序列中 的每一个元素小于等于 10^9。 </span><br><span class="line">【输出数据】</span><br><span class="line">输出包含一行，输出最长严格上升子序列的长度以及方案数对 10^9+7 取模 的结果。 </span><br><span class="line">【样例输入】  </span><br><span class="line">2  </span><br><span class="line">1 1 </span><br><span class="line">【样例输出】  </span><br><span class="line">1 4 </span><br><span class="line">【数据范围】 </span><br><span class="line">对于 30%的数据，N&lt;=20。 </span><br><span class="line">对于 50%的数据，N&lt;=1000。 </span><br><span class="line">对于 100%的数据，N&lt;=200000。 </span><br></pre></td></tr></table></figure><ul><li>完全不会，写了个暴力还写挂了QWQ。</li><li>贴一下标准题解：考虑最长上升子序列中，在初始序列最靠前的一个数。这个最长上升子序列 一定由原序列中以这个数开头的最长上升子序列和最长下降子序列组成。 dp+树状数组求出以每个点开头的最长上升子序列长度 a、数量 b，最长下 降子序列长度 c，数量 d，如果 a+c-1 是最大值的话，那么对答案的贡献为 $2^{n-a-c+1}$。 时间复杂度 $O(n \log n)$ </li><li>顺便提一句，题解是用克罗地亚语命名的，麻烦出题人抄题时还是改一下别人的标程，别抄的这么简陋。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRACE(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> llint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; par;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y second</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">500010</span>, MOD = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret = a + b;</span><br><span class="line">  <span class="keyword">if</span>(ret &gt;= MOD) ret -= MOD;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  llint ret = (llint)a * b;</span><br><span class="line">  <span class="keyword">if</span>(ret &gt;= MOD) ret %= MOD;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> niz[MAXN], dva[MAXN];</span><br><span class="line"></span><br><span class="line">par A[MAXN], B[MAXN];</span><br><span class="line">par FWT_gore[MAXN], FWT_dolje[MAXN];</span><br><span class="line"></span><br><span class="line">par rj;</span><br><span class="line"></span><br><span class="line"><span class="function">par <span class="title">spoji</span><span class="params">(par a, par b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(b.X &gt; a.X)</span><br><span class="line"> &#123;</span><br><span class="line">   a.X = b.X;</span><br><span class="line">   a.Y = b.Y;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(b.X == a.X)</span><br><span class="line">   a.Y = <span class="built_in">add</span>(a.Y, b.Y);</span><br><span class="line"> <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ubaci_gore</span><span class="params">(<span class="keyword">int</span> x, par v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x += <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">for</span>(; x &lt; MAXN; x += x &amp; -x)</span><br><span class="line">    FWT_gore[x] = <span class="built_in">spoji</span>(FWT_gore[x], v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">par <span class="title">upit_gore</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x += <span class="number">5</span>;</span><br><span class="line">  <span class="function">par <span class="title">ret</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span>(; x &gt; <span class="number">0</span>; x -= x &amp; -x)</span><br><span class="line">    ret = <span class="built_in">spoji</span>(ret, FWT_gore[x]);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ubaci_dolje</span><span class="params">(<span class="keyword">int</span> x, par v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x += <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">for</span>(; x &gt; <span class="number">0</span>; x -= x &amp; -x)</span><br><span class="line">    FWT_dolje[x] = <span class="built_in">spoji</span>(FWT_dolje[x], v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">par <span class="title">upit_dolje</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  x += <span class="number">5</span>;</span><br><span class="line">  <span class="function">par <span class="title">ret</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">  <span class="keyword">for</span>(; x &lt; MAXN; x += x &amp; -x)</span><br><span class="line">    ret = <span class="built_in">spoji</span>(ret, FWT_dolje[x]);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sazmi</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    v.<span class="built_in">push_back</span>(niz[i]);</span><br><span class="line">  <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">  v.<span class="built_in">resize</span>(<span class="built_in">unique</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()) - v.<span class="built_in">begin</span>());</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    niz[i] = <span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), niz[i]) - v.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sredi_gore</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">  &#123;</span><br><span class="line">    par p = <span class="built_in">upit_gore</span>(niz[i] - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(p.X == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      A[i] = <span class="built_in">par</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">ubaci_gore</span>(niz[i], <span class="built_in">par</span>(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">      A[i] = p;</span><br><span class="line">      p.X++;</span><br><span class="line">      <span class="built_in">ubaci_gore</span>(niz[i], p);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sredi_dolje</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">  &#123;</span><br><span class="line">    par p = <span class="built_in">upit_dolje</span>(niz[i] + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(p.X == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      B[i] = <span class="built_in">par</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">ubaci_dolje</span>(niz[i], <span class="built_in">par</span>(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      B[i] = p;</span><br><span class="line">      p.X++;</span><br><span class="line">      <span class="built_in">ubaci_dolje</span>(niz[i], p);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postavi</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  dva[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAXN; i++)</span><br><span class="line">    dva[i] = <span class="built_in">mul</span>(dva[i - <span class="number">1</span>], <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">glavno</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    rj = <span class="built_in">spoji</span>(rj, <span class="built_in">par</span>(A[i].X + <span class="number">1</span> + B[i].X, <span class="built_in">mul</span>(A[i].Y, B[i].Y)));</span><br><span class="line">  rj.Y = <span class="built_in">mul</span>(rj.Y, dva[n - rj.X]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;sequence.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;sequence.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">  <span class="built_in">postavi</span>();</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;niz[i]);</span><br><span class="line">  <span class="built_in">sazmi</span>();</span><br><span class="line">  <span class="built_in">sredi_gore</span>();</span><br><span class="line">  <span class="built_in">sredi_dolje</span>();</span><br><span class="line">  <span class="built_in">glavno</span>();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, rj.X, rj.Y);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 考后总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态树</title>
      <link href="/2021/12/12/%E5%8A%A8%E6%80%81%E6%A0%91/"/>
      <url>/2021/12/12/%E5%8A%A8%E6%80%81%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>思想类似于树链剖分。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>建立虚边和实边，动态在线查询两点间的路径</li></ul><h2 id="可实现的操作"><a href="#可实现的操作" class="headerlink" title="可实现的操作"></a>可实现的操作</h2><ul><li>$access(x)$：建立一条从 $x$ 到根节点的实边路径。</li><li>$make-root(x)$：将x变成根节点。</li><li>$find-root(x)$：找到 $x$ 所在树的根节点。</li><li>$splay(x, y)$：将 $x$ 到 $y$ 的路径变成实边路径。</li><li>$link(x, y)$：若 $x$ 和 $y$ 不连通的话，则加入$(x, y)$这条边。</li><li>$cut(x, y)$：若 $x$ 和 $y$ 之间有边的话就删掉这条边。</li><li>$isroot$：$x$ 是否是所在 $splay$ 的根节点。</li></ul><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><ul><li>用 $Splay$ 维护所有实边路径的中序遍历（本质上是维护实边），用 $splay$ 的后继前驱来维护原树的父子关系，其中虚边用 $splay$ 的根节点来维护</li><li>$access(x)$：首先将 $x$ 转到当前树的根节点去，再使x所在树的父亲节点y成为另一棵树的根节点，然后删去 $y$ 的右儿子，使 $y$ 的右儿子等于 $x$ （其中序遍历不变），然后不断的进行操作。</li><li>$make-root(x)$：同理先 $access(x)$再翻转 $x$ 所在的子树（原来 $x$ 在右下角，根在左下角，所以需要将 $x$ 转到左下角，使其成为根（一般还会将它转到最上面）。</li><li>$find-root$：一直向当前左子树走，直到走不动为止。</li><li>$splay(x, y)$：就是将 $x$ 转到 $y$ 的子树上，特别的 $splay(x, 0)$ 就是将 $x$ 转到根。</li><li>$link(x, y)$：$make-root(x)$，再$access(y)$。</li><li>$cut(x, y)$：先$make-root(x)$，再判断 $x$ 的右子树是不是 $y$，若不是，则 $x$ 和 $y$ 之间没有边，如果是，再判断 $y$ 有无左儿子，若有，则 $x$ 和 $y$ 之间没有边，否则断掉 $x$ 和 $y$ 的边，使 $x$ 的右儿子为 $y$ 的右儿子</li><li>$isroot$：找到 $x$ 的父节点 $y$，判断 $x$ 是否是 $y$ 的左右儿子，如果是，则 $x$ 不是根，否则 $x$ 就是根。</li></ul><h1 id="例题P3690-【模板】动态树（Link-Cut-Tree）："><a href="#例题P3690-【模板】动态树（Link-Cut-Tree）：" class="headerlink" title="例题P3690 【模板】动态树（Link Cut Tree）："></a>例题<a href="https://www.luogu.com.cn/problem/P3690">P3690 【模板】动态树（Link Cut Tree）</a>：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> s[<span class="number">2</span>], p, v;</span><br><span class="line"><span class="keyword">int</span> sum, rev;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">int</span> stk[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushrev</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// 翻转 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">swap</span>(tr[x].s[<span class="number">0</span>], tr[x].s[<span class="number">1</span>]);</span><br><span class="line">tr[x].rev ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[x].sum = tr[tr[x].s[<span class="number">0</span>]].sum ^ tr[x].v ^ tr[tr[x].s[<span class="number">1</span>]].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// 下传懒标记 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].rev)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pushrev</span>(tr[x].s[<span class="number">0</span>]), <span class="built_in">pushrev</span>(tr[x].s[<span class="number">1</span>]);</span><br><span class="line">tr[x].rev = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//是否是当前splay的根 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> tr[tr[x].p].s[<span class="number">0</span>] != x &amp;&amp; tr[tr[x].p].s[<span class="number">1</span>] != x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line"><span class="keyword">int</span> k = tr[y].s[<span class="number">1</span>] == x;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isroot</span>(y)) tr[z].s[tr[z].s[<span class="number">1</span>] == y] = x;</span><br><span class="line">tr[x].p = z;</span><br><span class="line">tr[y].s[k] = tr[x].s[k ^ <span class="number">1</span>], tr[tr[x].s[k ^ <span class="number">1</span>]].p = y;</span><br><span class="line">tr[x].s[k ^ <span class="number">1</span>] = y, tr[y].p = x;</span><br><span class="line"><span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// 动态树是无根树，所以默认直接转到根 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>, r = x;</span><br><span class="line">stk[++ top] = r;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isroot</span>(r)) stk[++ top] = r = tr[r].p; <span class="comment">//动态暴搜到根节点，stk存储 </span></span><br><span class="line"><span class="keyword">while</span>(top) <span class="built_in">pushdown</span>(stk[top --]);</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isroot</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isroot</span>(y))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((tr[y].s[<span class="number">1</span>] == x) ^ (tr[z].s[<span class="number">1</span>] == y)) <span class="built_in">rotate</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// 建立一条x到根的路 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> z = x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; x; y = x, x = tr[x].p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line">tr[x].s[<span class="number">1</span>] = y, <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">splay</span>(z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_root</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">// 将x变为原树的根节点 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">access</span>(x);</span><br><span class="line"><span class="built_in">pushrev</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//找到x所在的原树根节点，再将原树的根节点旋转到splay的根节点 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">access</span>(x);</span><br><span class="line"><span class="keyword">while</span>(tr[x].s[<span class="number">0</span>]) <span class="built_in">pushdown</span>(x), x = tr[x].s[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line"><span class="keyword">return</span> x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_root</span>(x);</span><br><span class="line"><span class="built_in">access</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_root</span>(x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find_root</span>(y) != x) tr[x].p = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_root</span>(x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find_root</span>(y) == x &amp;&amp; tr[y].p == x &amp;&amp; !tr[y].s[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">tr[x].s[<span class="number">1</span>] = tr[y].p = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;tr[i].v);</span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t, x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;t, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">split</span>(x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tr[y].sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">1</span>) <span class="built_in">link</span>(x, y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">2</span>) <span class="built_in">cut</span>(x, y);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line">tr[x].v = y;</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF600E Lomsat gelral</title>
      <link href="/2021/12/05/CF600E-Lomsat-gelral/"/>
      <url>/2021/12/05/CF600E-Lomsat-gelral/</url>
      
        <content type="html"><![CDATA[<p>启发式合并裸的模板题，就是要用树剖优化</p><span id="more"></span><p>存个代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>;</span><br><span class="line">c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> h[N], e[M], ne[M];</span><br><span class="line">LL ans[N], sum;</span><br><span class="line"><span class="keyword">int</span> color[N], cnt[N], sz[N], son[N];</span><br><span class="line"><span class="keyword">int</span> mx;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sz[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(j == father) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(j, x);</span><br><span class="line">sz[x] += sz[j];</span><br><span class="line"><span class="keyword">if</span>(sz[j] &gt; sz[son[x]]) son[x] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father, <span class="keyword">int</span> y, <span class="keyword">int</span> pson)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = color[x];</span><br><span class="line">cnt[c] += y;</span><br><span class="line"><span class="keyword">if</span>(cnt[c] &gt; mx) mx = cnt[c], sum = c;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cnt[c] == mx) sum += c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(j == father || j == pson) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">update</span>(j, x, y, pson);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i; i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(j == son[x] || j == father) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(j, x, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(son[x]) <span class="built_in">dfs2</span>(son[x], x, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">update</span>(x, father, <span class="number">1</span>, son[x]);</span><br><span class="line">ans[x] = sum;</span><br><span class="line"><span class="keyword">if</span>(!op) <span class="built_in">update</span>(x, father, <span class="number">-1</span>, <span class="number">0</span>), sum = mx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="built_in">read</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(color[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">read</span>(a), <span class="built_in">read</span>(b);</span><br><span class="line"><span class="built_in">add</span>(a, b), <span class="built_in">add</span>(b, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CF </tag>
            
            <tag> 启发式合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启发式合并</title>
      <link href="/2021/12/05/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
      <url>/2021/12/05/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<p>暴力的优化？</p><span id="more"></span><h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><ul><li>类似于并查集的按积合并。</li><li>思想：观察每个元素，计算最终计算量的贡献</li><li>时间复杂度：对于每个元素所在集合进行合并，最终进行 $n &gt;&gt; i$ 的合并，可见最多只会合并 $\log n$次，最坏情况下会合并 $n$ 个数， 故时间复杂度为 $O(n \log n)$ 。</li></ul><h2 id="操作方法："><a href="#操作方法：" class="headerlink" title="操作方法："></a>操作方法：</h2><ul><li>将两个数据结构合并时，应将小的数据结构中的元素一个一个分别插入大的数据结构（<del>真的好像就这个</del>）。</li></ul><h2 id="例题P3201-HNOI2009-梦幻布丁："><a href="#例题P3201-HNOI2009-梦幻布丁：" class="headerlink" title="例题P3201 [HNOI2009] 梦幻布丁："></a>例题<a href="https://www.luogu.com.cn/problem/P3201">P3201 [HNOI2009] 梦幻布丁</a>：</h2><h2 id="solution："><a href="#solution：" class="headerlink" title="solution："></a>solution：</h2><ul><li>不难看出这道题就只需要瞎暴力就可以（被<del>毒瘤</del>hack了，<del>为什么线段树合并没有被hack？</del>）</li><li>虽然暴力被干点掉了，但这道题我们好像也想不到什么奇奇怪怪的算法，那么正解只有一个——优化暴力。</li><li>怎么优化呢，我们考虑将每一种颜色拉成链，每次只将小的链接到大的链上，这样貌似巨快<del>雾</del>，但是我们的正确性呢？如图：</li></ul><p><img src="https://s2.loli.net/2021/12/05/bqjEgsapczZLd3R.png" alt="无标题.png"></p><ul><li>如果我们考虑讲1接到2上，2接到3上的话，无疑会发现，当我们将1接到2上的时候，实际上是将2接到1上，而我们要将2接到3上时，2已经空了。所以单是这样的做法的话，正确性是有误的，我们不得不考虑如何修正。</li><li>事实上，2接到1上是可取的，我们只需要离散化出一个数组，用它来存储元素的实际颜色，再用另一个数组指向它所对应的颜色即可，我们按照如图所示的方式将2接到1上：</li></ul><p><img src="https://s2.loli.net/2021/12/05/5hNMsqHYEor3tQm.png" alt="无标题.png"></p><ul><li>不难发现，此时2的实质颜色是1，再将3接到2所对的1下方就完全没有问题了。</li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> h[M], e[M], ne[M];</span><br><span class="line"><span class="keyword">int</span> color[M], sz[M], p[M];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>;</span><br><span class="line">c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">sz[x] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == y) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(sz[x] &gt; sz[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line">ans -= (color[j - <span class="number">1</span>] == y) + (color[j + <span class="number">1</span>] == y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line">color[j] = y;</span><br><span class="line"><span class="keyword">if</span>(ne[i] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ne[i] = h[y], h[y] = h[x];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">h[x] = <span class="number">-1</span>;</span><br><span class="line">sz[y] += sz[x], sz[x] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(color[i]);</span><br><span class="line"><span class="keyword">if</span>(color[i] != color[i - <span class="number">1</span>]) ans ++;</span><br><span class="line"><span class="built_in">add</span>(color[i], i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; M;i ++) p[i] = i;<span class="comment">//离散化，必须初始化到M</span></span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> op;</span><br><span class="line"><span class="built_in">read</span>(op);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">read</span>(x), <span class="built_in">read</span>(y);</span><br><span class="line"><span class="built_in">merge</span>(p[x], p[y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 启发式合并 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2538 城堡</title>
      <link href="/2021/12/02/P2538-%E5%9F%8E%E5%A0%A1/"/>
      <url>/2021/12/02/P2538-%E5%9F%8E%E5%A0%A1/</url>
      
        <content type="html"><![CDATA[<p>退火模板题</p><span id="more"></span><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><ul><li>对于这道题， 也没什么好说的，退火那些建立城堡，对于单次询问，跑一边最短路就结束了。</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || <span class="string">&#x27;9&#x27;</span> &lt; c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>;</span><br><span class="line">c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">uniform_int_distribution&lt;<span class="keyword">unsigned</span>&gt; p;</span><br><span class="line">default_random_engine mu&#123;<span class="built_in">time</span>(<span class="number">0</span>)&#125;;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[N &lt;&lt; <span class="number">1</span>], ne[N &lt;&lt; <span class="number">1</span>], h[N], w[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx, w[idx] = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> r[N];</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> b[N], tot; </span><br><span class="line"><span class="keyword">int</span> ans = Inf;</span><br><span class="line"><span class="keyword">int</span> dist[N];</span><br><span class="line"><span class="keyword">bool</span> d[N];</span><br><span class="line">priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt; &gt; q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++)</span><br><span class="line">&#123;</span><br><span class="line">d[i] = <span class="number">0</span>;</span><br><span class="line">dist[i] = Inf;</span><br><span class="line"><span class="keyword">if</span>(vis[i])</span><br><span class="line">&#123;</span><br><span class="line">dist[i] = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> o = q.<span class="built_in">top</span>().second;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(d[o]) <span class="keyword">continue</span>;</span><br><span class="line">d[o] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[o]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(dist[j] &gt; dist[o] + w[i])</span><br><span class="line">&#123;</span><br><span class="line">dist[j] = dist[o] + w[i];</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dist[j], j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) res = <span class="built_in">max</span>(res, dist[i]);</span><br><span class="line">ans = <span class="built_in">min</span>(ans, res);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= tot;i ++) vis[b[i]] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">shuffle</span>(b + <span class="number">1</span>, b + tot + <span class="number">1</span>, mu);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;i ++) vis[b[i]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> o = <span class="built_in">calc</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span> t = <span class="number">1e4</span>;t &gt; <span class="number">1e-4</span>;t *= <span class="number">0.997</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">p</span>(mu), y = <span class="built_in">p</span>(mu);</span><br><span class="line"><span class="built_in">swap</span>(vis[b[x]], vis[b[y]]);</span><br><span class="line"><span class="keyword">int</span> u = <span class="built_in">calc</span>();</span><br><span class="line"><span class="keyword">int</span> delte = u - o;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>(-delte / t) &lt; (<span class="keyword">double</span>)<span class="built_in">rand</span>() / RAND_MAX) <span class="built_in">swap</span>(vis[b[x]], vis[b[y]]);</span><br><span class="line"><span class="keyword">else</span> o = u;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(k);</span><br><span class="line"><span class="keyword">if</span>(m + k == n)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++)</span><br><span class="line"><span class="built_in">read</span>(r[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> o;</span><br><span class="line"><span class="built_in">read</span>(o);</span><br><span class="line"><span class="keyword">if</span>(i == r[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">add</span>(i, r[i], o);</span><br><span class="line"><span class="built_in">add</span>(r[i], i, o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j ++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> o;</span><br><span class="line"><span class="built_in">read</span>(o);</span><br><span class="line">vis[o] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++)</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) b[++ tot] = i;</span><br><span class="line">p.<span class="built_in">param</span>(uniform_int_distribution&lt;<span class="keyword">unsigned</span>&gt;::param_type&#123;<span class="number">1</span>, tot&#125;);</span><br><span class="line"><span class="keyword">while</span>((<span class="keyword">double</span>)<span class="built_in">clock</span>() / CLOCKS_PER_SEC &lt; <span class="number">0.6</span>) <span class="built_in">sim</span>();</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 模拟退火 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟退火</title>
      <link href="/2021/12/02/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
      <url>/2021/12/02/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/</url>
      
        <content type="html"><![CDATA[<p>很久之前学的了，这次算是补个漏</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><p>退火，来自于物理，模拟退火算法来源于固体退火原理，是一种基于概率的算法，将固体加温至充分高，再让其徐徐冷却，加温时，固体内部<a href="https://baike.baidu.com/item/%E7%B2%92%E5%AD%90/81757">粒子</a>随<a href="https://baike.baidu.com/item/%E6%B8%A9%E5%8D%87/10468133">温升</a>变为无序状，内能增大，而徐徐冷却时粒子渐趋有序，在每个温度都达到<a href="https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E6%80%81/8965512">平衡态</a>，最后在<a href="https://baike.baidu.com/item/%E5%B8%B8%E6%B8%A9/1144996">常温</a>时达到基态，内能减为最小。</p></li><li><p>模拟退火（下文简称退火）是一种高效的骗分算法，以简单易背的模板和优秀的效率闻名于世（<del>就比暴力好一点</del>），常常用于求解答案是连续不断（接近也行）的函数的最大值或最小值，强于三分，可求解多峰函数。</p></li><li><p>其运行效果如图所示：</p></li></ul><p><img src="https://i.loli.net/2021/12/02/5kNy2wDCbE8YxqK.jpg" alt="1.png"></p><h1 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h1><ul><li>说到随机算法，就一定要考虑其的正确性，退火算法理论上是一种贪心算法，它会尽可能找到离自己更近，且更接近正解的答案的点，然后跳过去。但不同于贪心算法的是，它有一定概率越过这个点，去其他峰试试运气，但越到后期越不容易跳过去，就越趋近稳定。所以，可以肯定的是，它不会只停留在一个峰上，而是会四处寻找其他答案。</li><li>我们设每一次错误的概率为$0.9999$，但是当我们在这次退火的基础上再加上$50000$次退火，正确性就为：$0.9999^{50001} = 0.0067$ 就是一个极小的概率了，所以退火是一个稳定的正确的算法。</li></ul><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><ul><li>当我们理解到这个算法是随机的算法时，一定要充分运用到随机的艺术，对于初始温度和结束温度，还有温度变化率一定要在平日里积累经验，这里给出核心代码：</li></ul> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>(-delte / t) &lt; (<span class="keyword">double</span>)<span class="built_in">rand</span>() / RAND_MAX)<span class="comment">//delte为上一个解和当前解的差值</span></span><br></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><ul><li><p>这里以<a href="https://www.luogu.com.cn/problem/P3878">luogu P2503 [HAOI2006]均分数据</a> 为例来简单介绍退火的运用</p></li><li><p>根据题目，不难发现这是DP，但当我们在考场上不会的时候该怎么办呢？根据题目，我们可以发现，当我们更改一个值后，答案并不会增大很多，所以我们可以通过模拟退火解决此题</p></li><li><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2></li><li><pre><code class="cpp">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;cstdio&gt;#include&lt;cstdlib&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;#include&lt;ctime&gt;#define x first#define y second#define PII pair&lt;int, int&gt;using namespace std;const int N = 25, M = 10, Inf = 0x3f3f3f3f3f;int n;int w[N], q[N], s[M];double ans = 1e8;int m;int calc()//求解单次答案&#123;    memset(s, 0, sizeof(s));    for(int i = 0;i &lt; n;i ++)    &#123;        int k = 0;        for(int j = 0;j &lt; m;j ++)        &#123;            if(s[j] &lt; s[k]) k = j;        &#125;        s[k] += w[i];    &#125;    double avg = 0;    for(int i = 0;i &lt; m; i ++) avg += (double)s[i] / m;    double res = 0;    for(int i = 0;i &lt; m;i ++) res += (s[i] - avg) * (s[i] - avg);    res = sqrt(res / m);    ans = min(ans, res);    return res;&#125;void sim()//退火&#123;    random_shuffle(w, w + n);    for(double t = 1e4;t &gt; 1e-6;t *= 0.99)    &#123;        int a = rand() % n, b = rand() % n;//随机我们交换的数        double x = calc();        swap(w[a], w[b]);        double y = calc();        double delta = y - x;        if(exp(- delta / t) &lt; (double)rand() / RAND_MAX) swap(w[a], w[b]);    &#125;&#125;int main()&#123;    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);    for(int i = 0;i &lt; n;i ++) scanf(&quot;%d&quot;, &amp;w[i]);    while((double)clock() / CLOCKS_PER_SEC &lt; 0.8) sim();//决定退火次数    printf(&quot;%.2lf&quot;, ans);    return 0;&#125;</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 模拟退火 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1108 低价购买</title>
      <link href="/2021/11/28/P1108-%E4%BD%8E%E4%BB%B7%E8%B4%AD%E4%B9%B0/"/>
      <url>/2021/11/28/P1108-%E4%BD%8E%E4%BB%B7%E8%B4%AD%E4%B9%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1108#submit">题目传送门</a></p><p>$Noip2021$ 被 $Dp$ 打爆了，回来开始刷 $Dp$ 的题（一道不会），自闭了…….</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>怎么说呢？刚刚看题的时候，就觉得这道题其实就是最长下降子序列的裸题（<del>看到5000的数据，甚至还以为有点水</del>），兴冲冲的开了，写完才发现还要求方案数，仔细想了想，才发现自己只会 $O(n)$ 记录，$O(n ^ 2)$ 枚举， 时间复杂度 $O(n ^ 3)$ ，被打爆了 $QWQ$。</p><p>仔细想想（<del>一上午没了</del>），其实这题还是可做，我们设 $f_i$ 为以第 $i$ 项结尾的最长下降子序列的长度，然后 $t_i$ 为构成这类序列（以第 $i$ 项结尾，长度为 $f_i$）的方案数，我们不难发现，如果第 $i$ 项和第 $j$ 项的值相同，那么对于能够接在 $j$ 前面的数，一定能够接在 $i$ 前面，那么我们只需将 $t_j$ 清空，就完成了去重（<del>作者太懒，不想画图</del>）。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define LL long long</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 5005;</span><br><span class="line">int n, k;</span><br><span class="line">int root;</span><br><span class="line">LL f[N];</span><br><span class="line">LL a[N];</span><br><span class="line">LL ans, cnt;</span><br><span class="line">int t[N];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">for(int i = 1;i &lt;= n;i ++)</span><br><span class="line">scanf(&quot;%lld&quot;, &amp;a[i]);</span><br><span class="line">for(int i = 1;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line">for(int j = 1;j &lt; i;j ++)</span><br><span class="line">if(a[i] &lt; a[j]) f[i] = max(f[i], f[j] + 1);</span><br><span class="line">if(f[i] == 0) f[i] = 1;</span><br><span class="line">if(ans &lt; f[i]) ans = f[i];</span><br><span class="line">for(int j = 1;j &lt; i;j ++)</span><br><span class="line">&#123;</span><br><span class="line">if(f[i] == f[j] &amp;&amp; a[i] == a[j]) t[j] = 0;</span><br><span class="line">if(f[i] == f[j] + 1 &amp;&amp; a[i] &lt; a[j]) t[i] += t[j];</span><br><span class="line">&#125;</span><br><span class="line">if(!t[i]) t[i] = 1;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 1;i &lt;= n;i ++)</span><br><span class="line">if(f[i] == ans) cnt += t[i];</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; &quot; &quot; &lt;&lt; cnt;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双倍经验"><a href="#双倍经验" class="headerlink" title="双倍经验"></a>双倍经验</h1><p><a href="https://www.luogu.com.cn/problem/P2687">题目传送门</a>， 题目一摸一样，只不过卡了高精，但貌似 $double$ 可以卡过去？</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line">LL f[N];</span><br><span class="line">LL a[N];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> cnt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>((x % <span class="number">10</span>) + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> t[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; i;j ++)</span><br><span class="line"><span class="keyword">if</span>(a[i] &lt; a[j]) f[i] = <span class="built_in">max</span>(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(f[i] == <span class="number">0</span>) f[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ans &lt; f[i]) ans = f[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; i;j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f[i] == f[j] &amp;&amp; a[i] == a[j]) t[j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(f[i] == f[j] + <span class="number">1</span> &amp;&amp; a[i] &lt; a[j]) t[i] += t[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!t[i]) t[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line"><span class="keyword">if</span>(f[i] == ans) cnt += t[i];</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.0Lf&quot;</span>, cnt);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成函数</title>
      <link href="/2021/11/22/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
      <url>/2021/11/22/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>不会， 先鸽着吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 生成函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Noip2021游记</title>
      <link href="/2021/11/22/Noip2021%E6%B8%B8%E8%AE%B0/"/>
      <url>/2021/11/22/Noip2021%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>…….</p><span id="more"></span><h1 id="考前前一天"><a href="#考前前一天" class="headerlink" title="考前前一天"></a>考前前一天</h1><ul><li>吸取Csp崩盘的经验，我们来刷板子题，重心略偏数据结构，顺手复习一下国赛的内容，以免又跳出形如网络流等毒瘤东西，仔细的重读了考试大纲之后将树的板子都写了一遍，虽然2019年几乎将所有和树有关的题考的差不多了，但还是觉得树挺重要的。根据这几年NoIp，Csp的走向，数学这东西考的越来越多了。于是复习了一下差分约束，CRT。Dp这东西就放弃吧，自己找了找往年的题，估了一下，自己最多会三维Dp（很多时候三维也会裂开），反正Dp的公式完全靠题目，推不出来的话暴力的分一般也不少，而且Csp才考过Dp，还不如多复习一下一旦不会就有可能会爆零的数据结构。话是这么说，但还是刷了几道题，<a href="https://www.luogu.com.cn/problem/P1850">换教室</a>调的我怀疑人生（还是太菜了）。做到期望Dp时才想起来，这东西一般还配套一个高斯消元，就去刷了它的模板题，刷到一半，luogu就炸了，于是就去膜拜了巨佬（rp ++）。这次又是主场考试，希望还是rp ++（别崩啊）。</li></ul><h1 id="考试当天"><a href="#考试当天" class="headerlink" title="考试当天"></a>考试当天</h1><ul><li>买了一堆零食，铺下了题太难的后路（其实根本没时间吃），$8:20$ 进考场了。</li><li>再次吸取经验，现将4道题读完，$T1$ 貌似是道签到题，还是耐下性子去看了$T2$，没有什么思路，又去看了一下 $T3$，马上就紧张起来了，全是数学题（<del>像我这样的数学学渣完全就是送命</del>），乱翻了一下 $T4$，毒瘤模拟（也许可以用数据结构优化，细节绝对巨多，代码量绝对巨大）。</li><li>回过头来开$T1$，小分析了一下，写了个$O(n)$，就准备跑路，但测大样例的时候发现有点卡，测了下时间$0.85s$，我又联想到Csp的时候，CCF的少爷机吃了我15分（离一等差8分），就缩小了一下N的范围，和原来的代码对拍了一下，没什么问题，看着用时大概$0.5s$，觉得没什么问题，就跑路了。</li><li>这时大概过了$20min$，手上有分了，心态就比较平稳了，开始看第二题，还是完全没什么思路，认为是个Dp，但推了一下发现推不出来（我定的三维，正解四维，还是实力限制了我的想象），准备写个暴力Dp跑路，但自己手算了一下发现记忆化搜索似乎时间差不多（而且更好写），于是写了个搜索，加了几个优化跑路了（没注意到超时，还以为是机子卡了）。</li><li>这时再想去上个厕所却被告知禁止上厕所，苦求 $5min$ 还是放我去了（什么破规定）。</li><li>这时只剩下1.25h，有一点慌，再读了一下$T3$，发现又是一道Dp题，但没时间了，上了个退火跑路了。</li><li>1h攻$T4$，实在还是写不完，最后打了个表遗憾退场，这次在$T2$上浪费的时间太多了，$T4$暴力24分都没拿。</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li><p>下来遇见了巨佬们，一交谈才发现自己退火精度低了（还以为是次数少了），这下分数只有再跌。wfy巨佬300+了，其他巨佬也都比我高，自闭了。</p></li><li><p>去小图灵上测了测，$T2$爆蛋，$T3$果不其然被卡了手精度，这下凉凉了。</p></li><li><p>估分<br>$$<br>100 + 0 + 32 + 0<br>$$</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>其实开始还是有希望一等的，第二题推出暴力Dp后就应该跑路，第三题应该吸取<a href="https://www.luogu.com.cn/problem/P3878">分金币</a>的经验卡一下精度的（明明考前才做过，自闭了），第四题（如果有时间的话…)</li><li>202 $-&gt;$ 132，自闭了QAQ。</li><li>出分了，和估的一样，一等奖150，又差一点，自闭了QWQ。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1484 种树</title>
      <link href="/2021/11/18/P1484-%E7%A7%8D%E6%A0%91/"/>
      <url>/2021/11/18/P1484-%E7%A7%8D%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>为什么每次考试的原题我都没做过呀， $QAQ$</p><span id="more"></span><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p><del>当我们看到这道题时，不难想到这是一道 $dp$ 题</del>。 开个玩笑， $2e5$ 的数据范围，怎么可能 $n ^ 2 Dp$ 。 </p><p>回到正题：一道经典的带悔贪心。</p><p>我们先模拟一下一般的贪心策略，每次选取最大的可取的值，直到不能取为止。</p><p>不难发现，这个策略是错的。我们来看一下这个图：</p><p><img src="https://i.loli.net/2021/11/18/lp5cVaDb3EAfhW4.png" alt="无标题.png"></p><p>对于第一次策略，我们会优先选择最大的20号点，紧接着，我们就只能憋屈的选择1号点，很明显正解不可能是21， $19+19 = 38$ 明显更优，那么我们应该怎样调整我们的贪心策略才能保证我们贪心的正确性呢，其实并不是很难，我们重新看一幅图。</p><p><img src="https://i.loli.net/2021/11/18/McZyx5Y3tqnIQa4.png" alt="无标题.png"></p><p>对于这次贪心策略，我们取走20以后顺手删除（左）19点和（右）19点，并将20号点更新为： $19 + 19 - 20 = 18$ ，即：</p><p><img src="https://i.loli.net/2021/11/18/Sk6M9U1Pqgcvy4x.png" alt="无标题.png"></p><p>此时，我们再取走18号点，并删除与18号点相邻的1号点，并将 $-17$ 号点加入队列中：</p><p><img src="https://i.loli.net/2021/11/18/HxPfvF7bKog6eGT.png" alt="无标题.png"></p><p>根据题目的意思，现在我们无论取多少都无所谓，所以放弃-17，得到答案38正解，这样不但避免了选择相邻的两个（选一个的时候，另外两个被删除了），还保证了价值守恒（请自行理解），那么这道题就完结撒花啦。</p><h2 id="三倍经验：luogu-P1792-国家集训队-种树，-luogu-P3620-APIO-CTSC-2007-数据备份-此题具有一定的思考难度-主要还是板子"><a href="#三倍经验：luogu-P1792-国家集训队-种树，-luogu-P3620-APIO-CTSC-2007-数据备份-此题具有一定的思考难度-主要还是板子" class="headerlink" title="三倍经验：luogu P1792 [国家集训队]种树， luogu P3620 [APIO/CTSC 2007] 数据备份(此题具有一定的思考难度 (主要还是板子))"></a>三倍经验：<a href="https://www.luogu.com.cn/problem/P1792">luogu P1792 [国家集训队]种树</a>， <a href="https://www.luogu.com.cn/problem/P3620">luogu P3620 [APIO/CTSC 2007] 数据备份</a>(此题具有一定的思考难度 (主要还是板子))</h2><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;<span class="comment">//上一个和下一个的下标  </span></span><br><span class="line">LL val;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">LL val;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(Node b)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> val &lt; b.val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">bool</span> vis[N];<span class="comment">//判断当前节点是否可选</span></span><br><span class="line">priority_queue&lt;Node&gt;q;<span class="comment">//大根堆维护最大值 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a[x].l = a[a[x].l].l;<span class="comment">//左右边界移动，删除 x的左右节点 </span></span><br><span class="line">a[x].r = a[a[x].r].r;</span><br><span class="line">a[a[x].l].r = x;</span><br><span class="line">a[a[x].r].l = x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i].val);</span><br><span class="line">a[i].l = i - <span class="number">1</span>;</span><br><span class="line">a[i].r = i + <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>((Node)&#123;i, a[i].val&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(vis[q.<span class="built_in">top</span>().id]) <span class="comment">//延迟删除标记 </span></span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">Node now = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(now.val &lt; <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">ans += now.val;</span><br><span class="line">vis[a[now.id].l] = vis[a[now.id].r] = <span class="number">1</span>;</span><br><span class="line">a[now.id].val = a[a[now.id].l].val + a[a[now.id].r].val - a[now.id].val; </span><br><span class="line">q.<span class="built_in">push</span>((Node)&#123;now.id, a[now.id].val&#125;);<span class="comment">//加入新点 </span></span><br><span class="line"><span class="built_in">Del</span>(now.id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 带悔贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF453C Little Pony and Summer Sun Celebration</title>
      <link href="/2021/11/17/CF453C%20Little%20Pony%20and%20Summer%20Sun%20Celebration/"/>
      <url>/2021/11/17/CF453C%20Little%20Pony%20and%20Summer%20Sun%20Celebration/</url>
      
        <content type="html"><![CDATA[<p>一道有意思的树形dp</p><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>给定一个 $n$ 个点， $m$ 条边的无向图和一个01序列，若 $a[i] = 1$ ，则需遍历这个节点奇数次，否则需要遍历此节点偶数次（可以不遍历），求一个可行的方案，要求此方案的长度不超过 $4n$</li></ul><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>首先我们观察本题的规律，不难发现：</p><ul><li><p>当本图未联通时，任意两个连通块中有需要走奇数遍的点时一定无解（应该不需要解释吧）</p></li><li><p>因为一个节点可能有多个儿子，所以当我们未对当前节点的其他儿子进行判断前，一个可行的策略一定可以是：先处理当前节点的其中一个儿子节点，再从这个儿子节点（儿子节点的子树已经处理完了）回溯到当前节点，接着再由当前节点来处理它的其他儿子并回溯到它的父亲节点（以此递归处理问题）。</p></li><li><p>我们顺着这个思路往下走，将一个需要走奇数次的节点作为根节点，递归处理它的子树，不难发现当我们处理完一个节点的子树，将要回溯到这个节点的父节点时，若这个节点还需要再遍历一遍，我们可以和此节点的父亲节点进行循环（由此节点跳到它的父节点，再由它的父节点跳到它，再由此节点进行回溯，即可更新此节点）。那么根节点如何处理呢？我们进行画图分析：<br><img src="https://i.loli.net/2021/11/17/PSAbMTjc53Z8amL.png" alt="无标题.png"></p></li><li><p>此时可以看到3号节点需要回溯了，但根节点不需要被再次遍历，不然根节点会回溯到我们传的-1号虚根节点上，对此，我们只需要进行特判，如果-1号虚根节点入队了，队列数-3（最后3个数应该为 $root$ ，-1 ， $root$ ），即停止从3号节点回溯到根节点，在根节点的前一个节点停止回溯，这样就保证了正确性。</p></li></ul><p>我们再来分析此代码的效率，不难发现每一个叶子节点的最坏入队次数为两次，使其父节点多进队2次，即一个点最多对答案贡献4次，但一定有如同 $root$ 一样的节点，它一定不会和自己的儿子节点循环，所以答案一定严格小于 $4n$ 。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[M], h[N], ne[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[N], root;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> st[N &lt;&lt; <span class="number">2</span>], cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line">st[++ cnt] = x;</span><br><span class="line">a[x] ^= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(vis[j]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(j, x);</span><br><span class="line">st[++ cnt] = x, a[x] ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[x]) st[++ cnt] = father, st[++ cnt] = x, a[x] ^= <span class="number">1</span>, a[father] ^= <span class="number">1</span>;<span class="comment">//和父节点循环 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> o, u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;o, &amp;u);</span><br><span class="line"><span class="built_in">add</span>(o, u);</span><br><span class="line"><span class="built_in">add</span>(u, o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), root = (a[i] == <span class="number">1</span> ? i : root);</span><br><span class="line"><span class="keyword">if</span>(!root)<span class="comment">//不用遍历就不遍历 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(root, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt &gt; <span class="number">1</span> &amp;&amp; st[cnt - <span class="number">1</span>] == <span class="number">-1</span>) cnt -= <span class="number">3</span>;<span class="comment">//特判 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cnt);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt;i ++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, st[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CF </tag>
            
            <tag> 树形dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫比乌斯反演</title>
      <link href="/2021/11/16/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
      <url>/2021/11/16/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</url>
      
        <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="整数分块"><a href="#整数分块" class="headerlink" title="整数分块"></a>整数分块</h3><span id="more"></span><p>整除分块是用于快速处理形似 $\sum_{i = 1}^{n}\lfloor\dfrac{n}{i}\rfloor$ 的式子的方法<br> 很显然，这个可以<em>O</em>(<em>n</em>)得到答案。但是，在某些题目中，毒瘤出题人将数据加强到了 $10^{10}$ 以上，这个时候我们就无法通过<em>O</em>(<em>n</em>)的解法来得到答案了。我们需要一个$O(\sqrt n)$的更为优秀的解法<br> 首先观察这个式子，找几个特殊值代入<br><code>n=5时，sum=5+2+1+1+1</code><br> 可以发现的是：（这里给的例子并不明显，其实应该找一个大的n来代入才直观，读者可以自行尝试）<br> 对于单一的$⌊\frac{n}i⌋$，某些地方的值是相同的，并且<strong>呈块状分布</strong><br> 通过进一步的探求规律与推理以及打表与瞎猜，我们可以惊喜的发现一个规律，这些<strong>块状分布的值是有规律的</strong><br> 对于一个块，假设它的起始位置的下标为l，那么可以得到的是，它的结束位置的下标为$⌊\frac{n}{⌊\frac {n}i⌋}⌋$<br> 如果实在看的有点懵逼，可以继续采用代入特殊值的方法，验证一下上方的规律，用程序表现出来即为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>, r;l &lt;= n;l = r + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    r = n / (n / l);</span><br><span class="line">    ans += (r - l + <span class="number">1</span>) * mu[l];<span class="comment">//mu只是举个例子，可以带入任意符合的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重要函数：<br>$$<br>μ(x) = \begin{cases}<br> 0 &amp; (d_i \ge 2)\\<br> 1 &amp; (d_i = 1)<br>\end{cases}<br>$$</p><p>$$<br>I = 1<br>$$</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>莫比乌斯反演主要用来简化运算，通常有性质：</li></ul><p>$$<br>F(n) = \sum_{d|n}f(d) \\<br>    f(n) = \sum_{d|n}μ(d)F(\frac{n}{d})\\<br>$$</p><p>简要证明：</p><p>1.直接证</p><p>$$<br>\begin{aligned}<br>\sum_{d|n}μ(d)F(\frac{n}{d})<br>&amp;=\sum_{d|n}μ(d)\sum_{i|\frac{n}{d}}f(i)\\<br>&amp;=\sum_{i|n}f(i)\sum_{d|\frac{n}{i}}\mu(d)\\<br>&amp;=\sum_{i|n}f(i)[\frac{n}{i}==1]\\<br>&amp;=f(n)\\<br>\end{aligned}<br>$$</p><p>2.运用狄利克雷卷积</p><p>$$<br>\begin{aligned}<br>F &amp;= f*I\\<br>F * \mu &amp;= f * I * \mu \\<br>(I * \mu) &amp;= \varepsilon \\<br>F * \mu &amp;= f * \varepsilon = f \\<br>f &amp;= \mu * F<br>\end{aligned}<br>$$</p><p>如果看不懂的话, 我将1的详细步骤写一下:</p><p>我们将原式化简可得<br>$$<br>f(x) = \sum_{d|n}μ(d)\sum_{i| \frac{n}{d}}f(i)<br>$$</p><p>我们令<br>$$<br>S(n) = \sum_{d|n}μ(d)<br>$$<br>即可化简的<br>$$<br>S(n)=[n==1]<br>$$<br>我们再令<br>$$<br>d = \frac{n}{d}<br>$$<br>带回原式可得<br>$$<br>f(n) = \sum_{d|n}μ(d)\sum_{i| \frac{n}{d}}f(i)<br>$$<br>我们不妨设x = n / d, 则x * d = n, 那么当x确定时，d同样也确定，反之亦然同理, 则f(x)和μ(d)所枚举到的数完全一样，即我们可以交换f(x)和μ(d)，那么原式即可变形为<br>$$<br>f(n) = \sum_{i|n}f(i)\sum_{d| \frac{n}{i}}μ(d)<br>$$<br>此时我们再联想到S(x), 再令x = n / i, 就可以得到<br>$$<br>f(i) = \sum_{i|n}f(i)S(\frac{n}{i})<br>$$</p><p>此时再将F(n)代回</p><p>$$<br>\begin{align}<br>\sum_{n|d}μ(\frac{d}{n})F(d) &amp;= \sum_{n|d}μ(\frac{d}{n})\sum_{d|i}f(i)\\<br>&amp;= \sum_{n|i}f(i)\sum_{d| \frac{i}{n}}μ(d) \\<br>&amp;= f(n)<br>\end{align}<br>$$</p><p>证毕</p><h2 id="例题：luogu-P2257-YY的GCD"><a href="#例题：luogu-P2257-YY的GCD" class="headerlink" title="例题：luogu P2257 YY的GCD"></a>例题：<a href="https://www.luogu.com.cn/problem/P2257">luogu P2257 YY的GCD</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> prime[N], cnt, n, phi[N], g[N];</span><br><span class="line"><span class="keyword">bool</span> d[N];</span><br><span class="line">LL s[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!d[i]) prime[++ cnt] = i, phi[i] = - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= cnt &amp;&amp; i * prime[j] &lt; N;j ++)</span><br><span class="line">&#123;</span><br><span class="line">d[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">phi[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> phi[i * prime[j]] = - phi[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= cnt;j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i * prime[j] &lt; N;i ++)</span><br><span class="line">&#123;</span><br><span class="line">g[i * prime[j]] += phi[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++) s[i] = s[i - <span class="number">1</span>] + g[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n, m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r;l &lt;= n;l = r + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r = <span class="built_in">min</span>(n, <span class="built_in">min</span>(n / (n / l), m / (m / l)));</span><br><span class="line">            ans += (s[r] - s[l - <span class="number">1</span>]) * (LL)(n / l) * (m / l);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2480 古代猪文</title>
      <link href="/2021/11/16/P2480-%E5%8F%A4%E4%BB%A3%E7%8C%AA%E6%96%87/"/>
      <url>/2021/11/16/P2480-%E5%8F%A4%E4%BB%A3%E7%8C%AA%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>感觉自己的脑子要瓦特了…..</p><span id="more"></span><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><ul><li>对于所有的k($k | n$),求</li></ul><p>$$<br>g^{\sum_{k|n} C_n^k}<br>$$</p><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><ul><li><p>我们首先根据欧拉定理的推论：<br>$$<br>a^p\equiv a^{p\  \bmod\ \varphi(n)}(\bmod n)<br>$$</p></li><li><p>即可确定$\sum_{k|n}C_n^k$的模数$\varphi(n)$， 又因为n为一个极大的质数，所以$\varphi(n) = n -1$(我竟然兴奋的上了一个杜教筛，唉……)，但n过于庞大，达到了$1e9$的级别，所以我们还得运用卢卡斯定理：</p></li><li><p>$$<br>C_a^b = C_{a / p}^{b / p} * C_{a\ \bmod\ p} ^ {b\ \bmod\ p}, p\in{primes}<br>$$</p></li><li><p>这个时候，这个题的大体结构已经确定了，我们只需略略加一点小优化。 不难发现p = 999911658时，我们无法使用卢卡斯（p不是质数），就算我们不顾一切使用了卢卡斯，它的效率也低的离谱（应该会溢出或者报错吧），我们接着考虑能否将p拆分成质数，再将各个因数所算出来的答案相加</p></li><li><p>运用暴力程序，我们成功的得到$999911658 = 2 * 3 * 4679 * 35617$,将其分别带入$Lucas$中求解答案，再利用中国剩余定理：</p></li><li><p>$$<br>\begin{cases}<br>  &amp;x\ \equiv &amp;a_1(\bmod\ 2) \\<br>  &amp;x\ \equiv &amp;a_2(\bmod\ 3) \\<br>  &amp;x\ \equiv  &amp;a_3(\bmod\ 4679)\\<br>  &amp;x\ \equiv  &amp;a_4(\bmod\ 45617)<br>\end{cases}<br>$$</p></li><li><p>然后我们就得到了最小的非负整数， 直接快速幂计算答案即可。</p></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">999911658</span>, N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, g;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4679</span>, <span class="number">35617</span>&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>;</span><br><span class="line">c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line">LL ans[N];</span><br><span class="line">LL fac[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//对不同模数的乘积进行线性预处理</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= x;i ++)</span><br><span class="line">fac[i] = fac[i - <span class="number">1</span>] * i % x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL b, LL k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = (res * x) % k;</span><br><span class="line">x = (x * x) % k;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt; b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> fac[a] * <span class="built_in">qpow</span>(fac[b], k - <span class="number">2</span>, k) % k * <span class="built_in">qpow</span>(fac[a - b], k - <span class="number">2</span>, k) % k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">lucas</span><span class="params">(<span class="keyword">int</span> b, <span class="keyword">int</span> a, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b &lt; a) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(b &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lucas</span>(b / k, a / k, k) * <span class="built_in">C</span>(b % k, a % k, k) % k;</span><br><span class="line">&#125;</span><br><span class="line">LL res = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CRT</span><span class="params">()</span><span class="comment">//有些奇怪的中国剩余定理</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">4</span>;i ++)</span><br><span class="line">&#123;</span><br><span class="line">res = (res + ans[i] * (mod / p[i]) % mod * <span class="built_in">qpow</span>(mod / p[i], p[i] - <span class="number">2</span>, p[i])) % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n), <span class="built_in">read</span>(g);</span><br><span class="line"><span class="keyword">if</span>(g % (mod + <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= <span class="number">4</span>;k ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">init</span>(p[k]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">sqrt</span>(n);i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans[k] = (ans[k] + <span class="built_in">lucas</span>(n, i, p[k]) % p[k]) % p[k]; </span><br><span class="line"><span class="keyword">if</span>(i * i != n)</span><br><span class="line">ans[k] = (ans[k] + <span class="built_in">lucas</span>(n, n / i, p[k]) % p[k]) % p[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">CRT</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, <span class="built_in">qpow</span>(g, res, mod + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉路径</title>
      <link href="/2021/11/16/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/"/>
      <url>/2021/11/16/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>对于任意一个无向图，我们必须不重复地走过所有的边（点可以不走完，也可以重复走），求方案是否存在，并输出其中一种（应该是最小字典序。</li></ul><span id="more"></span><h2 id="题目链接：P7771-欧拉路径"><a href="#题目链接：P7771-欧拉路径" class="headerlink" title="题目链接：P7771 欧拉路径"></a>题目链接：<a href="https://www.luogu.com.cn/problem/P7771">P7771 欧拉路径</a></h2><h1 id="结论及推导"><a href="#结论及推导" class="headerlink" title="结论及推导"></a>结论及推导</h1><ul><li><p>我们先来看一下这个两个图<br><img src="https://i.loli.net/2021/11/16/ZTCRLMVfgmXy7sv.png" alt="p4sz29zn.png"><br><img src="https://i.loli.net/2021/11/16/MxQgbTo41nBqEVf.png" alt="3yx89bfn.png"></p><h1 id="从这两个图中我们不难发现："><a href="#从这两个图中我们不难发现：" class="headerlink" title="从这两个图中我们不难发现："></a>从这两个图中我们不难发现：</h1><h2 id="1-对于无向图，所有边联通。"><a href="#1-对于无向图，所有边联通。" class="headerlink" title="1.对于无向图，所有边联通。"></a>1.对于无向图，所有边联通。</h2></li><li><p>(1).存在欧拉路径的充分必要条件：度数为奇数的点只能有0个或两个。</p></li><li><p>(2).存在欧拉回路的充分必要条件：度数为奇数的点只能有0个</p></li></ul><h2 id="2-对于有向图，所有边都是连通的"><a href="#2-对于有向图，所有边都是连通的" class="headerlink" title="2.对于有向图，所有边都是连通的"></a>2.对于有向图，所有边都是连通的</h2><ul><li>(1).存在欧拉路径的充分必要条件：要么所有点的出度均等于入度；要么除了两个点之外，其余所有点的出度等于入度，剩余的两个点：一个满足出度比入度多1（起点），另一个满足入度比出度多1（终点）</li><li>(2)存在欧拉回路的充分必要条件：所有点的出度均等于入度.<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1></li><li>我们任意取一个点，然后进行dfs，每次递归到下一层（如果求最小字典序就取最小的）一边递归，一边存储路径，当dfs结束之后，倒序输出（应该不用解释吧）<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> ru[N], cu[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;k[N];</span><br><span class="line"><span class="keyword">int</span> o[N];</span><br><span class="line"><span class="keyword">int</span> root, End;</span><br><span class="line"><span class="keyword">int</span> st[N], l;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(o[x] &lt; k[x].<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = k[x][o[x]];</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;x : &quot; &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; o[x] &lt;&lt; &quot; &quot; &lt;&lt; k[x].size()&lt;&lt; endl;</span></span><br><span class="line">cu[x] ++;</span><br><span class="line">ru[j] ++;</span><br><span class="line">o[x] ++;</span><br><span class="line"><span class="built_in">dfs</span>(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(o[x] &lt; k[x].<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = k[x][o[x]];</span><br><span class="line">o[x] ++;</span><br><span class="line"><span class="built_in">dfs1</span>(j);</span><br><span class="line">&#125;</span><br><span class="line">st[++ l] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p, u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;p, &amp;u);</span><br><span class="line">k[p].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sort</span>(k[i].<span class="built_in">begin</span>(), k[i].<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(o[i] &lt; k[i].<span class="built_in">size</span>()) &#123;<span class="built_in">dfs</span>(i); <span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cu[i] != ru[i]) u ++;</span><br><span class="line"><span class="keyword">if</span>(cu[i] == <span class="number">0</span> &amp;&amp; ru[i] == <span class="number">0</span>) u = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(cu[i] == ru[i] + <span class="number">1</span>) root = i;</span><br><span class="line"><span class="keyword">if</span>(ru[i] == cu[i] + <span class="number">1</span>) End = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u != <span class="number">0</span> &amp;&amp; u != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!root &amp;&amp; !End) root = End = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(o, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(o));</span><br><span class="line"><span class="built_in">dfs1</span>(root);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = l;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, st[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 csp-s爆炸记</title>
      <link href="/2021/11/16/2021-csp-s%E7%88%86%E7%82%B8%E8%AE%B0/"/>
      <url>/2021/11/16/2021-csp-s%E7%88%86%E7%82%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="考前一天"><a href="#考前一天" class="headerlink" title="考前一天"></a>考前一天</h2><span id="more"></span><ul><li>感觉没什么好复习的,随随便便看看模板就过了，感觉会考图论，一个猜想，不一定对。<h2 id="考试当天上午"><a href="#考试当天上午" class="headerlink" title="考试当天上午"></a>考试当天上午</h2></li><li>坐在机房，闲的心里发慌，开始过模板，突然发现整个机房就我一个 (不会的都会更高级的算法)不会st表（还在倍增lca）急急忙忙去过，理解了半天还是不敢保证考场会打，人一下子就慌了，距离中午吃饭还有2h，冷静下来看图论（CCF一定要考啊），隔壁的巨佬在用网络流写dp，蒟蒻不懂联赛看网络流干啥。回过头来过了一下tarjan，仔细想了一下去年有<a href="https://www.luogu.com.cn/problem/P7115">移球游戏</a>，今年肯定有毒瘤题，于是溜过去看平衡树，痛苦地挣扎了两小时，勉勉强强调过了。上午就这么过了，今天主场作战，csp-s rp ++<h2 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h2></li></ul><ul><li>进考场前路遇几位外校的巨佬，赶紧膜拜，众所周知，考前膜巨佬有益于rp++。</li><li>进考场了，熟悉的系统，熟悉的键盘（还是这么难用），完全不熟悉的考题，大概扫了一眼，T1大概有点贪心的意思，毕竟每个飞机能停在那个廊桥是定死的，但想了想，还是先看看后面的题，T2肯定是区间dp（模拟赛有道相似的），仔细看了看发现这道题细节巨多，自己掂量掂量自己的码力水平，觉得还是不行，自己推了一下式子，但过不了大样例，回过头来重新看了看题，才发现S在A的左右两边时必须又要括号，当时人都傻了，这是已经开考45min了。出去上了个厕所，回来准备看T3。</li><li>T3乍一看，真的认为是道数学题（5e5的数据范围，完全想不到什么数据结构）认真读了读，发现T1更可做，还是先看一下T4，又是很长的题面，联想了一下去年的<a href="https://www.luogu.com.cn/problem/P7078">贪吃蛇</a>，一想到现在我一道题都没做出来，背后一凉，赶紧去看T1。</li><li>怎么说呢？还是数学学的太差了（其实是没怎么没用过STL模板库），推导了一下，发现每一个廊桥停的上一个飞机的起飞时间和下一个飞机降落时间都成严格上升。想了想<br>$$f(n) = \sum_{i=1}^{n-1}{f(i)} + g(n)$$</li><li>其中f指能停的飞机数，g指在n号机场能停的飞机数。意味着只要在log(n)的时间复杂度内查询出这架飞机停在哪，用线段树维护区间和即可。自己兴奋的打完，一测样例：没过，然后极其痛苦的查了30min后，才发现是lower_bound炸掉了，点开lower_bound才发现ta就是帮我写了个二分，仔细思考了一下如何在随时修改的无序序列中快速查询出第一个比大的值。一敲脑袋，发现自己完全不会只能硬枚举，复杂度为$O(n^2 -n\log n)$希望CCF的数据水一点，别把我卡掉。</li><li>已经考了2h，开始码T3，仔细分析了一下发现当第一个出去的数确定了以后，后面每一个出去的数就确定了，开始疯狂码贪心，然后打了1h发现自己无法确定中间加数时的顺序（后来问了大佬才知道，其实可以确定，打的也没有问题，就是自己太弱了，没想到），在激烈的思想斗争之后，还是决定打暴力拿40分跑路，打了暴力就走了。</li><li>在自己语文能力的限制下，自己还是没从第四题的题面中挖出点什么，总感觉大纲里的考点一个也匹配不上，果断放弃继续打第二题，结果还是没打完。</li><li>崩了呀，还是自己平时没复习好，平时除了部分数据结构题什么也不想做，看来后续做题思路要改改了<h3 id="估分："><a href="#估分：" class="headerlink" title="估分："></a>估分：</h3>$(60-70) + 0 + 40 + 0$<h3 id="实测"><a href="#实测" class="headerlink" title="实测"></a>实测</h3>$85 + 0 + 12$(差了8分tg1=)<h2 id="考后"><a href="#考后" class="headerlink" title="考后"></a>考后</h2></li><li>第四题原来真的可以用网络流吗，这玩意不是不考吗（早上看网络流的巨佬就A掉了），第三题暴力写挂了，第一题民间数据倒还没卡掉（希望CCF也没卡掉）</li><li>接下来该多看看数学题了，再不看就AFO了（可能已经AFO了）（数据结构，图论都没怎么考（除了该死的超了刚的网络流））</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1072 Hankson的趣味题（解题概要）</title>
      <link href="/2021/11/16/P1072-Hankson%E7%9A%84%E8%B6%A3%E5%91%B3%E9%A2%98%EF%BC%88%E8%A7%A3%E9%A2%98%E6%A6%82%E8%A6%81%EF%BC%89/"/>
      <url>/2021/11/16/P1072-Hankson%E7%9A%84%E8%B6%A3%E5%91%B3%E9%A2%98%EF%BC%88%E8%A7%A3%E9%A2%98%E6%A6%82%E8%A6%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1072">题目传送门</a></p><span id="more"></span><p>(数论) $O(n \sqrt{b_1} / log(b_1))$</p><p>由于 $[x, b_0] = b_1$，因此 $x$ 一定是 $b_1$ 的约数。<br>所以我们可以枚举 $b_1$ 的所有约数，然后依次判断是否满足 $[x, b_0] = b_1$ 以及 $(x, a_0) = a_1$ 即可。</p><p>如果直接用试除法求 $b_1$ 的所有约数，那么总计算量是 $n \sqrt{b_1} = 2000 * \sqrt{2 \times 10^9} \approx 10^8$，会有一个测试数据超时。</p><p>我们可以先预处理出 $1 \sim \sqrt{b_1}$ 内的所有质数，然后用这些质数去试除 $b_1$。</p><p>由质数定理：</p><ul><li>$1 \sim n$ 中的质数个数约为 $\frac{n}{ln(n)}$。</li></ul><p>因此我们可以在 $\sqrt{b_i} / log(b_i)$ 的时间复杂度内将 $b_1$ 分解质因数。然后通过DFS枚举出 $b_1$ 的所有约数。</p><p>时间复杂度分析：</p><ul><li>一共 $n$ 组测试数据，每组测试数据分解 $b_1$ 的计算量是 $n \sqrt{b_1} / log(b_1) \approx 10^7$。</li></ul><p>平均每个数的约数个数为 $logn$ 个，计算最小公倍数和最大公约数的时间复杂度也是 $O(logn)$，因此判断 $x$ 是否合法的计算量是 $nlog^2n \approx 2 \times 10^6$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">45005</span>,M = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> pr[N], cnt;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> bl[N];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;q[M];</span><br><span class="line"><span class="keyword">int</span> cnta;</span><br><span class="line"><span class="keyword">int</span> di[N], cntd;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inti</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//筛质数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!bl[i]) pr[cnt ++] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; pr[j] &lt;= x/i; j ++)</span><br><span class="line">&#123;</span><br><span class="line">bl[pr[j] * i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (!(i % pr[j])) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><span class="comment">//最小公约数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a%b) : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> p)</span><span class="comment">//枚举可能的 x </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt; cnta)<span class="comment">//已经没有因数了 </span></span><br><span class="line">&#123;</span><br><span class="line">di[cntd ++] = p;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= q[l].second;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dfs</span>(l + <span class="number">1</span>,p);</span><br><span class="line">p *= q[l].first;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">inti</span>(N);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a0, a1, b0, b1;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a0, &amp;a1, &amp;b0, &amp;b1);</span><br><span class="line"><span class="keyword">int</span> d = b1;</span><br><span class="line">cnta = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; pr[i] &lt;= d/pr[i]; i ++)<span class="comment">//枚举出可行的 X的因数 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = pr[i];</span><br><span class="line"><span class="keyword">if</span>(!(d%p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(d%p == <span class="number">0</span>) s ++, d /= p;</span><br><span class="line">q[++ cnta] = &#123;p, s&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d &gt; <span class="number">1</span>) q[++ cnta] = &#123;d, <span class="number">1</span>&#125;;</span><br><span class="line">cntd = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cntd; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = di[i];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">gcd</span>(x, a0) == a1 &amp;&amp;(<span class="keyword">long</span> <span class="keyword">long</span>)x*b0/<span class="built_in">gcd</span>(x, b0) == b1)</span><br><span class="line">&#123;</span><br><span class="line">res ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主定理</title>
      <link href="/2021/11/16/%E4%B8%BB%E5%AE%9A%E7%90%86/"/>
      <url>/2021/11/16/%E4%B8%BB%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>记得复习</p><span id="more"></span><p>$T(n)=2 T\left(\frac{n}{2}\right)+\Theta(n)=\Theta(n \log n)$  </p><p>$T(n)=T\left(\frac{n}{2}\right)+\Theta(n)=\Theta(n) $  </p><p>$T(n)=T\left(\frac{n}{2}\right)+\Theta(1)=\Theta(\log n)$  </p><p>$T(n)=2 T\left(\frac{n}{2}\right)+\Theta(n \sqrt{n})=\Theta(n \sqrt{n}) $</p>]]></content>
      
      
      
        <tags>
            
            <tag> 初赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Miller Robin</title>
      <link href="/2021/11/16/Miller-Robin/"/>
      <url>/2021/11/16/Miller-Robin/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>玄学的概率测素数， 这是一种随机的算法， 出错率大约在$($1/4$)^n$， 所以当n &gt; 50以后正确率就接近于1了（反正比计算机本身的正确率要高）</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4718">题目传送门</a></p><h2 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h2><h3 id="费马小定理："><a href="#费马小定理：" class="headerlink" title="费马小定理："></a>费马小定理：</h3><p>当a于p互质时，$(a^p) \equiv a (\bmod p)$</p><h3 id="二次探测定理"><a href="#二次探测定理" class="headerlink" title="二次探测定理"></a>二次探测定理</h3><p>内容：如果 φ(p)=p−1,p&gt;1,p&gt;X，且$X^2 ≡ 1(\bmod p)$，那么 $X = 1 || p - 1$</p><p>证明：</p><p>∵$X^2≡1 \pmod p$</p><p>∴ $p|X^2 - 1$</p><p>∴$p|(X - 1)(X+ 1)$</p><p>∵p是大于X的质数</p><p>∴ $p = X + 1 || p \equiv X-1\pmod p$ 即$X = 1 || p - 1$</p><p>证毕</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>好， 那么接下来让我们走进它的原理。</p><p>首先，如果当满足$(a^p-1) \equiv a \pmod p$时p都为质数那这个问题是不是就迎刃而解了呢？（就可以和愚蠢的二次探测定理说再见了）</p><p>但愿望是美好的，现实是骨感的，当你自信地将这个代码交上去以后，你会发现：你Wa了。</p><p>我们来看一下这个数据：$2^{340} \equiv 1 \pmod {341}$，然而 341=31∗11</p><p>……</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li>1.将$p - 1$提出所有2的因数， 我们假设有t个。然后将剩余的部分定义为res（用于二次探测定理）</li></ul><ul><li>2.枚举一个数a，并定义一个数$x = a^{res} \pmod p $</li></ul><ul><li><p>3.如果 $\forall y = x^2 \pmod p, y != p - 1$ 那么p就不是一个质数</p></li><li><p>4.当我们的底数已经足够多了时，就可以跳出了</p><h2 id="主函数及其他流程"><a href="#主函数及其他流程" class="headerlink" title="主函数及其他流程"></a>主函数及其他流程</h2><p>牛B的大佬就可以去刷题了（<del>别来找茬了</del>）</p></li><li><p>我们先判断当前数是否为素数</p></li><li><p>如果不是素数的话，就找它的因子</p></li><li><p>递归对该因子和约出来的另一个因子进行分解（直到为质数）</p><h2 id="因子从何而来"><a href="#因子从何而来" class="headerlink" title="因子从何而来"></a>因子从何而来</h2><p>   <del>如果不嫌弃的话，我们可以一个一个试</del></p><p>   咳，我们来说正解。</p></li><li><p>我们假设要找的因子为a</p></li><li><p>我们运用随机的艺术find一个$x,y$,并不停随机$x$, 具体的法子一般是$x = x^2 + c$(c就是随机艺术的产物)</p></li><li><p>使$a = gcd(y - x, n) &amp;&amp; a \in(1, n)$则我们就找到了一个因子（<del>至于为什么</del>……）</p></li><li><p>那如果$x = y$出现了呢，这就说明出现了循环，所以我们就要判环，运用倍增的思想，让$y$记住$x$，当$x = {x_0}^2$时，y = x，所以当x跑到y时，已经跑完一个圈。</p></li><li><p>定义一个$i = 1,j = 2$,当执行$gcd$时$i ++$,如果i == j, 则$y = x, j &lt;&lt;= 1$ </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">LL n, ans;</span><br><span class="line">LL a[<span class="number">30</span>] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">41</span>,<span class="number">61</span>,<span class="number">24251</span>&#125;;</span><br><span class="line"><span class="function">LL <span class="title">Gcd</span><span class="params">(LL x, LL y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y ? <span class="built_in">Gcd</span>(y, x % y) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">mul</span><span class="params">(LL x, LL k, LL mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res += x, res %= mod;</span><br><span class="line">        x += x;</span><br><span class="line">        x %= mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL k, LL mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, x, mod);</span><br><span class="line">        x = <span class="built_in">mul</span>(x, x, mod);</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Robin</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(p % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LL d = p - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(d &amp; <span class="number">1</span>)) d &gt;&gt;= <span class="number">1</span>, s ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">9</span> &amp;&amp; a[i] &lt; p;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x = <span class="built_in">qpow</span>(a[i], d, p), y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= s;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            y = <span class="built_in">mul</span>(x, x, p);</span><br><span class="line">            <span class="keyword">if</span>(y == <span class="number">1</span> &amp;&amp; x != <span class="number">1</span> &amp;&amp; x != (p - <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            x = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(y != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">pollard</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL y = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL c = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL i = <span class="number">0</span>, j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            x = (<span class="built_in">mul</span>(x, x, p) + c) % p;</span><br><span class="line">            <span class="keyword">if</span>(x == y) <span class="keyword">break</span>;</span><br><span class="line">            LL d = <span class="built_in">Gcd</span>(<span class="built_in">abs</span>(y - x), p);</span><br><span class="line">            <span class="keyword">if</span>(d &gt; <span class="number">1</span>) <span class="keyword">return</span> d;</span><br><span class="line">            <span class="keyword">if</span>(i == j)</span><br><span class="line">            &#123;</span><br><span class="line">                y = x;</span><br><span class="line">                j &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Robin</span>(p)) </span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, p);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    LL k = p;</span><br><span class="line">    <span class="keyword">while</span>(p &lt;= k) k = <span class="built_in">pollard</span>(k);</span><br><span class="line">    <span class="built_in">Find</span>(k), <span class="built_in">Find</span>(p / k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">9</span>) <span class="built_in">print</span>(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(T --)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">        <span class="built_in">Find</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(ans == n) <span class="built_in">puts</span>(<span class="string">&quot;Prime&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">print</span>(ans),<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>我们会发现：咦怎么T了</p><p>这时就要卡常（<del>打表</del>）了，经过被巨佬一顿嘲讽，我们终于问到了卡常的办法</p><h2 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a>快速乘</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">qmul</span><span class="params">(ull a,</span></span></span><br><span class="line"><span class="params"><span class="function">    ull b,<span class="keyword">const</span> ull mod)</span></span>&#123;</span><br><span class="line">    ll c=(ll)(a)*b-(ll)((ull)((ld)(a)*b/mod)*mod);</span><br><span class="line">    <span class="keyword">return</span> c&lt;<span class="number">0</span>? c+mod:(c&lt;mod? c:c-mod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>连简单的$\log(n)$的龟速乘都不放过……</del></p><p>然后我们就可以得到优秀的93分</p><h2 id="最后的优化"><a href="#最后的优化" class="headerlink" title="最后的优化"></a>最后的优化</h2><p><del>93分了，冲鸭</del></p><p>向哪冲呢？</p><p>还记得我们的$Gcd$吗，当然，$Gcd$函数是不能再优化了，但我们调用$Gcd$的次数是可以再优化的。</p><ul><li>我们都知道， 龟速乘的模数都是质数， 但我们的模数可能并不是质数</li><li>所以我们可以根据取模的性质：如果模数和被模的数都含有一个公约数$k$，那么这次模运算的结果必然也会是这个公约数$k$的倍数。所以如果我们将若干个$(y - x)$ 相乘，因为模数是$n$ ，所以如果若干个$(y - x)$中有一个与$n$有公约数，最后的结果定然也会含有这个公约数。</li><li>所以我们可以多算几次$(y - x)$, 再来求$Gcd$（63次擦不多吧）</li><li>记得一边欧拉$(y - x)$，一边倍增，判环哟<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">LL n, ans;</span><br><span class="line">LL a[<span class="number">30</span>] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">41</span>,<span class="number">61</span>,<span class="number">24251</span>&#125;;</span><br><span class="line"><span class="function">LL <span class="title">Gcd</span><span class="params">(LL x, LL y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y ? <span class="built_in">Gcd</span>(y, x % y) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">mul</span><span class="params">(ull a,ull b, ull mod)</span></span>&#123;</span><br><span class="line">    ll c=(ll)(a)*b-(ll)((ull)((ld)(a)*b/mod)*mod);</span><br><span class="line">    <span class="keyword">return</span> c&lt;<span class="number">0</span>? c+mod:(c&lt;mod? c:c-mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL k, LL mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, x, mod);</span><br><span class="line">        x = <span class="built_in">mul</span>(x, x, mod);</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Robin</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(p % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LL d = p - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(d &amp; <span class="number">1</span>)) d &gt;&gt;= <span class="number">1</span>, s ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">9</span> &amp;&amp; a[i] &lt; p;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x = <span class="built_in">qpow</span>(a[i], d, p), y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= s;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            y = <span class="built_in">mul</span>(x, x, p);</span><br><span class="line">            <span class="keyword">if</span>(y == <span class="number">1</span> &amp;&amp; x != <span class="number">1</span> &amp;&amp; x != (p - <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            x = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(y != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">pollard</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL y = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL c = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL i = <span class="number">0</span>, j = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            x = (<span class="built_in">mul</span>(x * <span class="number">1ull</span>, x * <span class="number">1ull</span>, p * <span class="number">1ull</span>) + c) % p;</span><br><span class="line">            b = <span class="built_in">mul</span>(b * <span class="number">1ull</span>, <span class="built_in">abs</span>(y - x) * <span class="number">1ull</span>, p * <span class="number">1ull</span>);</span><br><span class="line">            <span class="keyword">if</span>(!b || x == y) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(i == j || !(i % <span class="number">63</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                LL d = <span class="built_in">Gcd</span>(b, p);</span><br><span class="line">                <span class="keyword">if</span>(d &gt; <span class="number">1</span>) <span class="keyword">return</span> d;</span><br><span class="line">                <span class="keyword">if</span>(i == j) y = x, j &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p &lt;= ans || p == <span class="number">1</span>) <span class="keyword">return</span> ;<span class="comment">//小优化 </span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Robin</span>(p)) </span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, p);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    LL k = <span class="built_in">pollard</span>(p);</span><br><span class="line">    <span class="keyword">while</span>(p % k == <span class="number">0</span>) p /= k;</span><br><span class="line">    <span class="built_in">Find</span>(k), <span class="built_in">Find</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">9</span>) <span class="built_in">print</span>(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(T --)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">        <span class="built_in">Find</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(ans == n) <span class="built_in">puts</span>(<span class="string">&quot;Prime&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">print</span>(ans),<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 质数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可持久化线段树(主席树)</title>
      <link href="/2021/11/16/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91-%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
      <url>/2021/11/16/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91-%E4%B8%BB%E5%B8%AD%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="可持久化前提"><a href="#可持久化前提" class="headerlink" title="可持久化前提"></a>可持久化前提</h2><ul><li>数据结构本身的拓扑结构不变</li></ul><span id="more"></span><h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><ul><li>无法使用懒标记，很难进行区间修改（但可以标记永久化（局限性也大的不行））</li></ul><h2 id="所解决的问题"><a href="#所解决的问题" class="headerlink" title="所解决的问题"></a>所解决的问题</h2><ul><li>查询数据结构的所有历史版本</li></ul><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><ul><li><p>只记录当前版本和之前版本不一样的地方-目的：降低算法空间复杂度，对于线段树的每一次修改，我们最多涉及$\log(n)$个节点，最多进行n次操作，空间复杂度级别就被降为$n\log(n)$。</p></li><li><p>线段树建立</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;<span class="comment">//表示左右节点的下标</span></span><br><span class="line">    <span class="keyword">int</span> cnt;<span class="comment">//当前区间中一共有多少个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="例题：Acwing-查找第K小数"><a href="#例题：Acwing-查找第K小数" class="headerlink" title="例题：Acwing  查找第K小数"></a>例题：<a href="https://www.acwing.com/problem/content/3536/">Acwing  查找第K小数</a></h2><ul><li><p>时空复杂度：$n\log(n)$.</p></li><li><p>我们不难发现（<del>读题可知</del>）只有100000个数,但每个数的大小可以到达1000000000，所以对于每一个数进行离散化在数值上建立线段树，维护每个数值区间中一共有多少个数</p></li><li><p>我们先来考虑在$[1,n]$上维护k小值<img src="C:\Users\s01\Desktop\无标题.png" alt="无标题"></p></li><li><p>我们还是不难发现，对于这个序列整体进行二分操作使左边的数的个数等于k-1即可，以此我们只需推论到区间$[l, r]$即可，我们再根据线段树的性质可知，每一个点所在的线段树的区间是一定的，且每一个数在线段树中出现的次数也是一定的，于是我们运用前缀和的思想，查询线段树上$[l, r]$的第k个值(因为它前面的数字都比它小) （听不懂的话，请看具体操作（<del>语文还是太差了</del>））</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, M = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line">&#125;tr[(<span class="keyword">int</span>)<span class="number">5e6</span>];</span><br><span class="line"><span class="keyword">int</span> root[N], idx; <span class="comment">// 每个版本的根节点 </span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;nums;<span class="comment">//离散化</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), x) - nums.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = ++ idx;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> p;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">tr[p].l = <span class="built_in">build</span>(l, mid), tr[p].r = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q = ++ idx;</span><br><span class="line">    tr[q] = tr[p];</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[q].cnt ++ ;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) tr[q].l = <span class="built_in">insert</span>(tr[p].l, l, mid, x);</span><br><span class="line">    <span class="keyword">else</span> tr[q].r = <span class="built_in">insert</span>(tr[p].r, mid + <span class="number">1</span>, r, x);</span><br><span class="line">    tr[q].cnt = tr[tr[q].l].cnt + tr[tr[q].r].cnt;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> r;</span><br><span class="line">    <span class="keyword">int</span> cnt = tr[tr[q].l].cnt - tr[tr[p].l].cnt;<span class="comment">//前缀和思想 </span></span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= cnt) <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].l, tr[p].l, l, mid, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].r, tr[p].r, mid + <span class="number">1</span>, r, k - cnt);<span class="comment">//减去左区间的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        nums.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()), nums.<span class="built_in">end</span>());</span><br><span class="line">root[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        root[i] = <span class="built_in">insert</span>(root[i - <span class="number">1</span>], <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>, <span class="built_in">find</span>(a[i]));</span><br><span class="line"><span class="comment">//for(int i = 0;i &lt;= n;i ++) cout &lt;&lt; root[i] &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l, r, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, nums[<span class="built_in">query</span>(root[r], root[l - <span class="number">1</span>], <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>, k)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 3</span></span><br><span class="line"><span class="comment">1 5 2 6 3 7 4</span></span><br><span class="line"><span class="comment">2 5 3</span></span><br><span class="line"><span class="comment">4 4 1</span></span><br><span class="line"><span class="comment">1 7 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>顺便捞一下(思想相同)<a href="https://www.luogu.com.cn/problem/P3919">luogu P3919可持久化线段树</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> root[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = ++ idx;</span><br><span class="line"><span class="keyword">if</span>(l == r)</span><br><span class="line">&#123;</span><br><span class="line">tr[p].v = a[l];</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">tr[p].l = <span class="built_in">build</span>(l, mid);</span><br><span class="line">tr[p].r = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = ++ idx;</span><br><span class="line">tr[p] = tr[q];</span><br><span class="line"><span class="keyword">if</span>(l == r)</span><br><span class="line">&#123;</span><br><span class="line">tr[p].v = y;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= mid) tr[p].l = <span class="built_in">modify</span>(tr[q].l, l, mid, x, y);</span><br><span class="line"><span class="keyword">else</span> tr[p].r = <span class="built_in">modify</span>(tr[q].r, mid + <span class="number">1</span>, r, x, y);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[q].v;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].l, l, mid, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].r, mid + <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">root[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">int</span> x, op, t, y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;op, &amp;t);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;y);</span><br><span class="line">root[i] = <span class="built_in">modify</span>(root[x], <span class="number">1</span>, n, t, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(root[x], <span class="number">1</span>, n, t));</span><br><span class="line">root[i] = root[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 3</span></span><br><span class="line"><span class="comment">1 5 2 6 3 7 4</span></span><br><span class="line"><span class="comment">2 5 3</span></span><br><span class="line"><span class="comment">4 4 1</span></span><br><span class="line"><span class="comment">1 7 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
