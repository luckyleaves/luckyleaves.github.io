<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>其他</title>
      <link href="/2022/08/03/%E5%85%B6%E4%BB%96/"/>
      <url>/2022/08/03/%E5%85%B6%E4%BB%96/</url>
      
        <content type="html"><![CDATA[<p>杂谈。</p><span id="more"></span><h1 id="快输"><a href="#快输" class="headerlink" title="快输"></a>快输</h1> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123; <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>&#123; <span class="keyword">while</span>(*s) <span class="built_in">putchar</span>(*s ++); &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T, class ...ARC&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res, ARC ...com)</span></span>&#123; <span class="built_in">write</span>(res), <span class="built_in">write</span>(com...);&#125;</span><br></pre></td></tr></table></figure><p>什么都能输，字符串的话传个首指针即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类欧几里得</title>
      <link href="/2022/08/03/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/"/>
      <url>/2022/08/03/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p>求解$\sum_{i=0}^n\left \lfloor \frac{ai+b}{c} \right \rfloor$之类的式子。</p><span id="more"></span><h1 id="第一类"><a href="#第一类" class="headerlink" title="第一类"></a>第一类</h1><p>令$f(a,b,c,n)=\sum_{i=0}^n\left \lfloor \frac{ai+b}{c} \right \rfloor$</p><p>我们对此分类讨论：</p><p>1.$a\ge c \ or \ b \ge c$</p><p>考虑去掉向下取整：<br>$$<br>\begin{aligned}<br>f(a,b,c,n)&amp;=\sum_{i=0}^n\left \lfloor \frac{ai+b}{c} \right \rfloor\\<br>    &amp;=\sum_{i=0}^n\left \lfloor \frac{(a\% c+ \left \lfloor \frac{a}{c} \right \rfloor c)i+b \% c+\left \lfloor \frac{b}{c} \right \rfloor c}{c} \right \rfloor\\<br>    &amp;=\left \lfloor \frac{a}{c} \right \rfloor \times\frac{n(n+1)}{2}+\left \lfloor \frac{b}{c} \right \rfloor \times (n+1) + \sum_{i=0}^n\left \lfloor \frac{a \% c \times i+ b \% c}{c} \right \rfloor<br>\end{aligned}<br>$$<br>2.$a&lt;c \ and \ b &lt; c$</p><p>令$m=\left \lfloor \frac{an+b}{c} \right \rfloor$。</p><p>则有：<br>$$<br>\begin{aligned}<br>f(a,b,c,n)&amp;=\sum_{i=0}^n\sum_{j=1}^m[j \le \left \lfloor \frac{ai+b}{c} \right \rfloor]\\<br>&amp;= \sum_{i=0}^n\sum_{j=0}^{m-1}[j +1\le \left \lfloor \frac{ai+b}{c} \right \rfloor]\\<br>&amp;=\sum_{i=0}^n\sum_{j=0}^{m-1}[i \ge \left \lfloor \frac{jc+c-b}{a} \right \rfloor]\\<br>&amp;=\sum_{i=0}^n\sum_{j=0}^{m-1}[i &gt; \left \lfloor \frac{jc+c-b-1}{a} \right \rfloor]\\<br>&amp;=\sum_{j=0}^{m-1}\sum_{i=0}^n[i &gt; \left \lfloor \frac{jc+c-b-1}{a} \right \rfloor]\\<br>&amp;=\sum_{j=0}^{m-1}\sum_{i=0}^n[i &gt; \left \lfloor \frac{jc+c-b-1}{a} \right \rfloor]\\<br>&amp;=\sum_{j=0}^{m-1}n- \left \lfloor \frac{jc+c-b-1}{a} \right \rfloor\\<br>&amp;=nm - f(c, c-b-1,a,m-1)\\<br>\end{aligned}<br>$$<br>故：<br>$$<br>f(a,b,c,n)=nm-f(c,c-b-1,a,m-1)<br>$$<br> 展开$m$：<br>$$<br>f(a,b,c,n)=n\left \lfloor \frac{an+b}{c} \right \rfloor -f(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor-1)<br>$$<br>直接递归处理即可，递归边界显然应该是$a=0$。</p><p>则：</p><p>$$<br>f(a,b,c,n)=<br>\begin{cases}<br>  &amp; \left \lfloor \frac{a}{c} \right \rfloor \times\frac{n(n+1)}{2}+\left \lfloor \frac{b}{c} \right \rfloor \times (n+1) + f(a \% c,b \% c,c, n), \ a\ge c \ or \ b \ge c \\<br>  &amp; n\left \lfloor \frac{an+b}{c} \right \rfloor -f(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor-1), \ a&lt;c \ and \ b &lt; c<br>\end{cases}<br>$$</p><h1 id="第二类"><a href="#第二类" class="headerlink" title="第二类"></a>第二类</h1><p>令$g(a,b,c,n)=\sum_{i=0}^n i \left \lfloor \frac{ai+b}{c} \right \rfloor$</p><h2 id="小结论"><a href="#小结论" class="headerlink" title="小结论"></a>小结论</h2><p>$$<br>\sum_{i=1}^n i^2 = \frac{n(n+1)(2n+1)}{6}<br>$$</p><p>1.$a \ge c \ or b \ge c$</p><p>像$f$一样考虑：<br>$$<br>\begin{aligned}<br>g(a,b,c,n)&amp;=\sum_{i=0}^ni\left \lfloor \frac{ai+b}{c} \right \rfloor\\<br>    &amp;=\sum_{i=0}^ni \left \lfloor \frac{(a\% c+ \left \lfloor \frac{a}{c} \right \rfloor c)i+b \% c+\left \lfloor \frac{b}{c} \right \rfloor c}{c} \right \rfloor\\<br>    &amp;=\left \lfloor \frac{a}{c} \right \rfloor \times\frac{n(n+1)(2n+1)}{6}+\left \lfloor \frac{b}{c} \right \rfloor \times \frac{n(n+1)}{2} + g(a \% c, b \% c, c, n)<br>\end{aligned}<br>$$<br>2.$a&lt;c \ and \ b &lt; c$</p><p>那么同样的，设：<br>$$<br>m=\left \lfloor \frac{an+b}{c} \right \rfloor<br>$$<br>同上可得：<br>$$<br>g(a,b,c,n)=\sum_{i=0}^ni\sum_{j=0}^{m-1}[i &gt; \left \lfloor \frac{jc+c-b-1}{a} \right \rfloor]<br>$$<br>这里有一个等差数列（我愣是没能看出来）</p><p>则：<br>$$<br>\begin{aligned}<br>g(a,b,c,n) &amp;=\sum_{j=0}^{m-1} \frac{(\left \lfloor \frac{jc+c-b-1}{a} \right \rfloor +1+n)(n-\left \lfloor \frac{jc+c-b-1}{a} \right \rfloor)}{2}\\<br>&amp;= \left \lfloor \frac{mn(n+1)-f(c,c-b-1,a,m-1)-h(c,c-b-1,a,m-1)}{2} \right \rfloor<br>\end{aligned}<br>$$<br>即：<br>$$<br>g(a,b,c,n)= \left \lfloor \frac{\left \lfloor \frac{an+b}{c} \right \rfloor n(n+1)-f(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor - 1)-h(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor-1)}{2} \right \rfloor<br>$$<br>则：</p><p>$$<br>g(a,b,c,n)=<br>\begin{cases}<br>  &amp; \left \lfloor \frac{a}{c} \right \rfloor \times\frac{n(n+1)(2n+1)}{6}+\left \lfloor \frac{b}{c} \right \rfloor \times \frac{n(n+1)}{2} + g(a \% c, b \% c, c, n), \ a\ge c \ or \ b \ge c \\<br>   &amp; \left \lfloor \frac{\left \lfloor \frac{an+b}{c} \right \rfloor n(n+1)-f(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor - 1)-h(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor-1)}{2} \right \rfloor, \ a&lt;c \ and \ b &lt; c \\<br>\end{cases}<br>$$</p><p>上面的$h$是不是很蒙，因为它是第三类。</p><h1 id="第三类"><a href="#第三类" class="headerlink" title="第三类"></a>第三类</h1><p>令$h(a,b,c,n)=\sum_{i=0}^n \left \lfloor \frac{ai+b}{c} \right\rfloor^2$。</p><p>推导太恶心了，看着办吧。</p><p>$$<br>h(a,b,c,n) =<br>\begin{cases}<br> &amp; h(a \% c, b \% c, c, n)+ 2\left \lfloor \frac{a}{c} \right \rfloor f(a \% c,b \% c,c, n) +\frac{n(n+1)(2n+1)}{6}\left \lfloor \frac{a}{c} \right \rfloor^2+n(n+1)\left \lfloor \frac{a}{c} \right \rfloor\left \lfloor \frac{b}{c} \right \rfloor, \ a\ge c \ or \ b \ge c \\<br> &amp; n\left \lfloor \frac{an+b}{c} \right \rfloor(\left \lfloor \frac{an+b}{c} \right \rfloor+1)-2f(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor-1)-2g(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor-1)-f(a,b,c,n), \ a&lt;c \ and \ b &lt; c\\<br>\end{cases}<br>$$</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><h2 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uLL unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, ARC &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">10</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>, inv2 = (mod + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, inv6 = <span class="number">166374059</span>, Mod = <span class="number">1e9</span> + <span class="number">7</span>, bas = <span class="number">43963</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n, a, b, c;</span><br><span class="line">unordered_map&lt;LL, <span class="keyword">int</span>&gt;F, G, H;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">h</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">Hash</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (((LL)x * bas % Mod + y) % Mod * bas + z) % Mod * bas + n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a) <span class="keyword">return</span> <span class="number">1ll</span> * b / c * (n + <span class="number">1</span>) % mod;</span><br><span class="line">    LL res = <span class="built_in">Hash</span>(a, b, c, n);</span><br><span class="line">    <span class="keyword">if</span>(F.<span class="built_in">find</span>(res) != F.<span class="built_in">end</span>()) <span class="keyword">return</span> F[res];</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= c || b &gt;= c) <span class="keyword">return</span> F[res] = ((LL)a / c * n % mod * (n + <span class="number">1</span>) % mod * inv2 + <span class="number">1ll</span> * b / c * (n + <span class="number">1</span>) + <span class="built_in">f</span>(a % c, b % c, c, n)) % mod;</span><br><span class="line">    <span class="keyword">int</span> m = ((LL)a * n + b) / c;</span><br><span class="line">    <span class="keyword">return</span> F[res] = (<span class="number">1ll</span> * n * m - <span class="built_in">f</span>(c, c - b - <span class="number">1</span>, a, m - <span class="number">1</span>) + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pw</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1ll</span> * x * x % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">h</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a) <span class="keyword">return</span> <span class="number">1ll</span> * <span class="built_in">pw</span>(b / c) * (n + <span class="number">1</span>) % mod;</span><br><span class="line">    LL res = <span class="built_in">Hash</span>(a, b, c, n);</span><br><span class="line">    <span class="keyword">if</span>(H.<span class="built_in">find</span>(res) != H.<span class="built_in">end</span>()) <span class="keyword">return</span> H[res];</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= c || b &gt;= c) <span class="keyword">return</span> H[res] = (<span class="built_in">h</span>(a % c, b % c, c, n) + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * (<span class="number">2ll</span> * n + <span class="number">1</span>) % mod * inv6 % mod * <span class="built_in">pw</span>(a / c) + <span class="number">1ll</span> * (n + <span class="number">1</span>) * <span class="built_in">pw</span>(b / c) + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * (a / c) % mod * (b / c) + b / c * <span class="number">2ll</span> * <span class="built_in">f</span>(a % c, b % c, c, n) + a / c * <span class="number">2ll</span> % mod * <span class="built_in">g</span>(a % c, b % c, c, n)) % mod;</span><br><span class="line">    <span class="keyword">int</span> m = ((LL)a * n + b) / c;</span><br><span class="line">    <span class="keyword">return</span> H[res] = (<span class="number">1ll</span> * m * n % mod * (m + <span class="number">1</span>) - <span class="built_in">f</span>(a, b, c, n) - <span class="number">2</span> * ((LL)<span class="built_in">g</span>(c, c - b - <span class="number">1</span>, a, m - <span class="number">1</span>) + <span class="built_in">f</span>(c, c - b - <span class="number">1</span>, a, m - <span class="number">1</span>)) + mod + mod + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a) <span class="keyword">return</span> (LL)b / c * n % mod * (n + <span class="number">1</span>) % mod * inv2 % mod;</span><br><span class="line">    LL res = <span class="built_in">Hash</span>(a, b, c, n); </span><br><span class="line">    <span class="keyword">if</span>(G.<span class="built_in">find</span>(res) != G.<span class="built_in">end</span>()) <span class="keyword">return</span> G[res];</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= c || b &gt;= c) <span class="keyword">return</span> G[res] = (<span class="built_in">g</span>(a % c, b % c, c, n) + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * (<span class="number">2ll</span> * n + <span class="number">1</span>) % mod * inv6 % mod * (a / c) + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * inv2 % mod * (b / c)) % mod;</span><br><span class="line">    <span class="keyword">int</span> m = ((LL)a * n + b) / c;</span><br><span class="line">    <span class="keyword">return</span> G[res] = (<span class="number">1ll</span> * m * n % mod * (n + <span class="number">1</span>) - <span class="built_in">h</span>(c, c - b - <span class="number">1</span>, a, m - <span class="number">1</span>) - <span class="built_in">f</span>(c, c - b - <span class="number">1</span>,a, m - <span class="number">1</span>) + mod + mod) % mod * inv2 % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(<span class="number">114514</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, a, b, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, (<span class="built_in">f</span>(a, b, c, n) + mod) % mod, (<span class="built_in">h</span>(a, b, c, n) + mod) % mod, (<span class="built_in">g</span>(a, b, c, n) + mod) % mod);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">rnd</span>() % <span class="number">100</span> == <span class="number">9</span>) F.<span class="built_in">clear</span>(), G.<span class="built_in">clear</span>(), H.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="同步计算（faster）"><a href="#同步计算（faster）" class="headerlink" title="同步计算（faster）"></a>同步计算（faster）</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, ARC &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123; <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>&#123; <span class="keyword">while</span>(*s) <span class="built_in">putchar</span>(*s ++); &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T, class ...ARC&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res, ARC ...com)</span></span>&#123; <span class="built_in">write</span>(res), <span class="built_in">write</span>(com...);&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>, inv2 = (mod + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, inv6 = <span class="number">166374059</span>, Mod = <span class="number">1e9</span> + <span class="number">7</span>, bas = <span class="number">43963</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n, a, b, c;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> f, h, g;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pw</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1ll</span> * x * x % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">get_ans</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node now;</span><br><span class="line">    <span class="keyword">if</span>(!a)</span><br><span class="line">    &#123;</span><br><span class="line">        now.f = <span class="number">1ll</span> * b / c * (n + <span class="number">1</span>) % mod;</span><br><span class="line">        now.h = <span class="number">1ll</span> * <span class="built_in">pw</span>(b / c) * (n + <span class="number">1</span>) % mod;</span><br><span class="line">        now.g = <span class="number">1ll</span> * b / c * n % mod * (n + <span class="number">1</span>) % mod * inv2 % mod;</span><br><span class="line">        <span class="keyword">return</span> now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= c || b &gt;= c)</span><br><span class="line">    &#123;</span><br><span class="line">        Node last = <span class="built_in">get_ans</span>(a % c, b % c, c, n);</span><br><span class="line">        now.f = ((LL)a / c * n % mod * (n + <span class="number">1</span>) % mod * inv2 + <span class="number">1ll</span> * b / c * (n + <span class="number">1</span>) + last.f) % mod;</span><br><span class="line">        now.h = (last.h + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * (<span class="number">2ll</span> * n + <span class="number">1</span>) % mod * inv6 % mod * <span class="built_in">pw</span>(a / c) + (LL)(n + <span class="number">1</span>) * <span class="built_in">pw</span>(b / c) + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * (a / c) % mod * (b / c) + b / c * <span class="number">2ll</span> * last.f + a / c * <span class="number">2ll</span> % mod * last.g) % mod;</span><br><span class="line">        now.g = (last.g + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * (<span class="number">2ll</span> * n + <span class="number">1</span>) % mod * inv6 % mod * (a / c) + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * inv2 % mod * (b / c)) % mod;</span><br><span class="line">        <span class="keyword">return</span> now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (<span class="number">1ll</span> * a * n + b) / c;</span><br><span class="line">    Node last = <span class="built_in">get_ans</span>(c, c - b - <span class="number">1</span>, a, m - <span class="number">1</span>);</span><br><span class="line">    now.f = (<span class="number">1ll</span> * n * m - last.f) % mod;</span><br><span class="line">    now.h = (<span class="number">1ll</span> * n * m % mod * (m + <span class="number">1</span>) - now.f + <span class="number">2</span> * (<span class="number">2ll</span> * mod - last.g - last.f) + mod) % mod;</span><br><span class="line">    now.g = (<span class="number">1ll</span> * n * m % mod * (n + <span class="number">1</span>) - last.h - last.f + <span class="number">2ll</span> * mod) % mod * inv2 % mod;</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, a, b, c);</span><br><span class="line">    Node ans = <span class="built_in">get_ans</span>(a, b, c, n);</span><br><span class="line">    <span class="built_in">write</span>(ans.f, <span class="string">&#x27; &#x27;</span>, ans.h, <span class="string">&#x27; &#x27;</span>, ans.g, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性拉格朗日插值</title>
      <link href="/2022/08/03/%E7%BA%BF%E6%80%A7%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC/"/>
      <url>/2022/08/03/%E7%BA%BF%E6%80%A7%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>rt</p><span id="more"></span><p><a href="https://codeforces.com/problemset/problem/622/F">题目传送门</a></p><p>记录一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, ARC &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">10</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">100</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = <span class="number">1ll</span> * res * x % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        x = <span class="number">1ll</span> * x * x % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fac[N], inv1[N], inv2[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k + <span class="number">2</span>;i ++) fac[i] = <span class="built_in">qpow</span>(i, k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k + <span class="number">2</span>;i ++) fac[i] = (fac[i] + fac[i - <span class="number">1</span>]) % mod;</span><br><span class="line">    inv1[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k + <span class="number">2</span>;i ++) inv1[i] = <span class="number">1ll</span> * inv1[i - <span class="number">1</span>] * <span class="built_in">qpow</span>(i, mod - <span class="number">2</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>, pw[N], pw1[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    pw[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k + <span class="number">2</span>;i ++) pw[i] = <span class="number">1ll</span> * pw[i - <span class="number">1</span>] * (x - i) % mod;</span><br><span class="line">    pw1[k + <span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = k + <span class="number">2</span>;i &gt;= <span class="number">0</span>;i --) pw1[i] = <span class="number">1ll</span> * pw1[i + <span class="number">1</span>] * (x - i) % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u;i &lt;= k + <span class="number">2</span>;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        o = <span class="number">1ll</span> * inv1[i - <span class="number">1</span>] % mod * inv1[k + <span class="number">2</span> - i] * ((k - i) &amp; <span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span>) % mod;</span><br><span class="line">       u = <span class="number">1ll</span> * pw[i - <span class="number">1</span>] % mod * pw1[i + <span class="number">1</span>] % mod;</span><br><span class="line">        ans = (ans + <span class="number">1ll</span> * fac[i] % mod * o % mod * u % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ans % mod + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, k);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    cout &lt;&lt; <span class="built_in">calc</span>(n) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 拉格朗日插值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF888G Xor-MST</title>
      <link href="/2022/08/03/CF888G-Xor-MST/"/>
      <url>/2022/08/03/CF888G-Xor-MST/</url>
      
        <content type="html"><![CDATA[<p><code>Trie</code>+生成树。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>感觉挺妙的。</p><p>首先我们考虑怎样合并最小，可以发现，当我们将这些节点建成$Trie$树时，最优的方案一定是每次合并$Trie$树的两个子树最优，为什么呢，画张图之后就可以发现只有$n- 1$个节点有两个儿子，而对于每一个叶子节点，想要合并到联通块之中的话最优一定是在两两的$lca$处合并，所以我们对于每一个存在两个儿子的$Trie$树，从它的两个子树中分别找一个节点，使他们的异或和最小（启发式即可），依次合并即可。</p><p>一个卡常小技巧：将节点排序之后插入$Trie$树，这样$Trie$树中节点编号更加连续，常数更小。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, ARC &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">10</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL Inf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> ch[N * <span class="number">31</span>][<span class="number">2</span>], tot = <span class="number">1</span>, l[N * <span class="number">31</span>], r[N * <span class="number">31</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root = <span class="number">1</span>;</span><br><span class="line">    l[<span class="number">1</span>] = <span class="number">1</span>, r[<span class="number">1</span>] = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">30</span>, op;i &gt;= <span class="number">0</span>;i --)</span><br><span class="line">    &#123;</span><br><span class="line">        op = (x &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(ch[root][op]) root = ch[root][op];</span><br><span class="line">        <span class="keyword">else</span> ch[root][op] = ++ tot, root = tot;</span><br><span class="line">        <span class="keyword">if</span>(!l[root]) l[root] = id;</span><br><span class="line">        r[root] = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k, <span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> op = (k &gt;&gt; depth) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ch[x][op]) <span class="keyword">return</span> <span class="built_in">query</span>(ch[x][op], k, depth - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(ch[x][op ^ <span class="number">1</span>], k, depth - <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; depth);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ch[x][<span class="number">0</span>] &amp;&amp; ch[x][<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        LL ans = Inf;</span><br><span class="line">        <span class="keyword">if</span>(r[ch[x][<span class="number">0</span>]] - l[ch[x][<span class="number">0</span>]] &lt;= r[ch[x][<span class="number">1</span>]] - l[ch[x][<span class="number">1</span>]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = l[ch[x][<span class="number">0</span>]];i &lt;= r[ch[x][<span class="number">0</span>]];i ++)</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, <span class="built_in">query</span>(ch[x][<span class="number">1</span>], a[i], depth - <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; depth));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = l[ch[x][<span class="number">1</span>]];i &lt;= r[ch[x][<span class="number">1</span>]];i ++)</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, <span class="built_in">query</span>(ch[x][<span class="number">0</span>], a[i], depth - <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; depth));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(ch[x][<span class="number">0</span>], depth - <span class="number">1</span>) + <span class="built_in">dfs</span>(ch[x][<span class="number">1</span>], depth - <span class="number">1</span>) + ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch[x][<span class="number">0</span>]) <span class="keyword">return</span> <span class="built_in">dfs</span>(ch[x][<span class="number">0</span>], depth - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(ch[x][<span class="number">1</span>]) <span class="keyword">return</span> <span class="built_in">dfs</span>(ch[x][<span class="number">1</span>], depth - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">insert</span>(a[i], i);</span><br><span class="line">    <span class="built_in">write</span>(<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">30</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Trie </tag>
            
            <tag> 生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强制在线莫队</title>
      <link href="/2022/08/02/%E5%BC%BA%E5%88%B6%E5%9C%A8%E7%BA%BF%E8%8E%AB%E9%98%9F/"/>
      <url>/2022/08/02/%E5%BC%BA%E5%88%B6%E5%9C%A8%E7%BA%BF%E8%8E%AB%E9%98%9F/</url>
      
        <content type="html"><![CDATA[<p>感觉好牛逼的样子。</p><span id="more"></span><p>在此之前先放一个莫队优化。</p><h1 id="奇偶性优化"><a href="#奇偶性优化" class="headerlink" title="奇偶性优化"></a>奇偶性优化</h1><p>对于奇数块的右端点递增排序，对于偶数块递减排序。</p><p>$10^5$的数据大概可以快$150ms$。</p><p>然后才是正文。</p><h1 id="强制在线莫队"><a href="#强制在线莫队" class="headerlink" title="强制在线莫队"></a>强制在线莫队</h1><p>跟分块没有什么区别，先将序列分成$\sqrt n$块，预处理出每两块之间的信息，然后每次询问找到离它最近的两个端点移动即可。</p><p>其实就是在序列上平衡的放$\sqrt n$条路径，这些路径都已经被预处理好了，每次查询时只需要找到曼哈顿距离最近的路径即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test/2022/8/2</title>
      <link href="/2022/08/02/test-2022-8-2/"/>
      <url>/2022/08/02/test-2022-8-2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0e4512de84d6b43057d2fd915d276d0af927f7bf90f775e00af128070d179763">f7c84d52981e04730e0cb33ecf03c038910740211be4281c6f3eace9abc81e1ea11c0745fa7f4ddb00c85c6cd520f02ea0992689e0881866141a7ad9d087ab009df270a92f271960675ba1a2bde65b0aa85bd305c0bc42e0f9d51d1afc3db4852aeda9cd90038874dfef200d5ac945597309f5fc21320715729ef3adbcc0a261cf0d5817773ad349c41924faa46c115f939bf18ac30c19eb8df2c20a548e5ebc7b1eb06d11308bb741c54e6b5e9d03942d9c4b189f98ff2b0cf542ae72dc3aeda9f2e109bde3cfc680497a1e627f3b6ebb94dbe57e1c84a29da89477f03c55b8231eaa66201a8f693358fbe557df6039815ea805191e27f831144b55cbfe9c4bbf6f64add02736f9db2ada1d3fb273806e947941ca59457fecd0032768951b7eb103ba2667fb3121ec4907e13f20c1d1a9615af1ac71049b44a83a78012b4a5ebdd9f1dc6f6643ecd8020b8157f99e0922d54e7b0868087690b507f246b18b32788c71e3764fe998da063dc85f1939b4500e1747e079fa376aaa52cc1cd069f11dc7a70d4dfc85610a7a1ffb783f4e7b7ea8d483a46c7934526f03c34a41d60e5c0a621185fe9fc565a4c7348ec0c38d884be2d96798a7fa376052d4db7aa4129e4af81747d861c8b28c14b488690fcb7b24bd729442d461ae4d0b44937b6ba3823da64df8e6acc62e86090cdf5cfcacbe6f7bfcb6eb192008e0d3ce3b1bc6a2de5fa96c6f56644eafdbc734c9823a3fd6194ac14883dc3ffdba93a418fb4373ebc4c6326f7ac2a0b6ad83fd020094487109d8310b0c0f9c3b1f730f0a222111bc28c625b4a7c077439e142a076fac38ba5ec881860ae1cb56883fd33554eb5b68394f960923e4beea7f192ae64f01fcd255f270642ad12df616dbfc3ce9872224748f1e4ddc0ec3b2021c539695be454c793dc9999d00a7284cc512b3cee36d844dc8e871e2300dd999ce6ec5cf1f3c03ceb2b99408333e439939e43e554a934adbe47e3195459641ec7bbd127745fbb2d07b1a4b00f7509983f4c0c3222b70251b6b4137b18c20796ae1e59f5f088593212738ff4ccf34a1388719eee16c053eeb0dd03ec3afa17aee978394a6ade0c2968100be670001ae7d51deea15f08760d1b6c3d144de6fd7ffd5a4f0b29bf82cdcbcdf16a62d82a17ab9c509beab358f9ef7cc770850a336d5641fc8707d50afc0cbaff2913653eebbe97947d24270e466ee642444828bbd6c9bdee68b5b7fb2cd04171e31da156c3931c898ab98a6b6f152abb09cb4d5668b0923d7d698d162ed29250a5ad8bedf4fe8dcae64855e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2020 制作菜品</title>
      <link href="/2022/08/01/NOI2020-%E5%88%B6%E4%BD%9C%E8%8F%9C%E5%93%81/"/>
      <url>/2022/08/01/NOI2020-%E5%88%B6%E4%BD%9C%E8%8F%9C%E5%93%81/</url>
      
        <content type="html"><![CDATA[<p>构造+背包+<code>bitset</code>。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>牛逼题。</p><p>题目意外的保证了$m\ge n-2$所以肯定往这上面想。</p><p>首先观察样例猜结论，肯定是用大的数去补小的数，仔细想想，对于$m=n-1$这样操作在前$n-2$次就会消掉$n-2$个数，最后一对数一定会在最后一次操作时消掉。</p><p>再来想想$m&gt;n-1$的情况，这也比较好办，只要将多的菜用一种材料完成，即可将问题转化成$m=n-1$。</p><p>最阴间的$m=n-2$，我们依旧延续上文的想法，将其和$m=n-1$联系起来，可以发现将$n,m$拆两部分，每一部分都满足$\sum_{i\in S}d_i=(|S|-1)k$即可，这个东西是可以$dp$的，但是发现这么做显然不优，于是考虑再进行一步转化，对左右两边都减一个$|S|k$，原式就等于$\sum_{i\in S} d_i-k=-k$，这个东西就可以直接跑背包，这是可以用$bitset$优化的（<del>但我就是想不到</del>），首先将负数全部转正，然后左移右移即可。</p><p>复杂度：$O(\frac{n^2k}{w})$。本人跑的贼慢。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500</span> + <span class="number">5</span>, M = <span class="number">5000000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, T, m, k;</span><br><span class="line"><span class="keyword">int</span> d[N];</span><br><span class="line">priority_queue&lt;PII&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) q.<span class="built_in">push</span>(&#123;d[i], i&#125;);</span><br><span class="line">    <span class="keyword">while</span>(m != n - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        PII o = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        o.first -= k;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, o.second, k);</span><br><span class="line">        q.<span class="built_in">push</span>(o);</span><br><span class="line">        m --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) d[q.<span class="built_in">top</span>().second] = q.<span class="built_in">top</span>().first, q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> minn = <span class="number">1e9</span> + <span class="number">7</span>, id_minn, maxn = <span class="number">0</span>, id_maxn;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">            <span class="keyword">if</span>(d[i] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(minn &gt;= d[i]) id_minn = i, minn = d[i];</span><br><span class="line">                <span class="keyword">if</span>(maxn &lt;= d[i]) id_maxn = i, maxn = d[i];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>, id_minn, minn, id_maxn, k - minn);</span><br><span class="line">        d[id_maxn] -= k - minn, d[id_minn] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bitset&lt;M&gt;s[<span class="number">505</span>];</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line">PII st[N];</span><br><span class="line"><span class="keyword">int</span> hh;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pout</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = hh - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt --)</span><br><span class="line">    &#123;</span><br><span class="line">        PII minn = &#123;<span class="number">1e9</span> + <span class="number">7</span>, <span class="number">0</span>&#125;, maxn = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> id_maxn, id_minn;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= hh;i ++)</span><br><span class="line">            <span class="keyword">if</span>(st[i].first != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(minn &gt;= st[i]) id_minn = i, minn = st[i];</span><br><span class="line">                <span class="keyword">if</span>(maxn &lt;= st[i]) id_maxn = i, maxn = st[i];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>, minn.second, minn.first, maxn.second, k - minn.first);</span><br><span class="line">        st[id_minn].first -= minn.first, st[id_maxn].first -= k - minn.first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = n * k;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">3</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>), <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i ++) s[i].<span class="built_in">reset</span>(), vis[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) d[i] -= k;</span><br><span class="line">    s[<span class="number">0</span>][sum] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(d[i] &gt; <span class="number">0</span>) s[i] = s[i - <span class="number">1</span>] | (s[i - <span class="number">1</span>] &lt;&lt; d[i]);</span><br><span class="line">        <span class="keyword">else</span> s[i] = s[i - <span class="number">1</span>] | (s[i - <span class="number">1</span>] &gt;&gt; (-d[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!s[n][sum - k]) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>), <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    <span class="keyword">int</span> last = sum - k;</span><br><span class="line">    hh = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">        <span class="keyword">if</span>(s[i - <span class="number">1</span>][last - d[i]]) last -= d[i], vis[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) </span><br><span class="line">        <span class="keyword">if</span>(vis[i]) st[++ hh] = &#123;d[i] + k, i&#125;;</span><br><span class="line">    <span class="built_in">pout</span>();</span><br><span class="line">    hh = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) st[++ hh] = &#123;d[i] + k, i&#125;;</span><br><span class="line">    <span class="built_in">pout</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m, k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(d[i]);</span><br><span class="line">    <span class="keyword">if</span>(m &gt;= n - <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">split</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 构造 </tag>
            
            <tag> 背包 </tag>
            
            <tag> bitset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZR2022/8/1讲课</title>
      <link href="/2022/08/01/ZR2022-8-1%E8%AE%B2%E8%AF%BE/"/>
      <url>/2022/08/01/ZR2022-8-1%E8%AE%B2%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<p><code>Rt</code>。</p><span id="more"></span><h1 id="Boruvka"><a href="#Boruvka" class="headerlink" title="Boruvka"></a>Boruvka</h1><p>每次选择一条联通不同的连通块的最小的边，然后将其加入生成树，合并两个联通块，共做$n$次，复杂度：$O(n\log m)$。</p><p>例题：<a href="https://codeforces.com/problemset/problem/888/G">CF888G</a></p><p>注意将$xor$改为相加之和取模也可做。</p><h1 id="树上背包"><a href="#树上背包" class="headerlink" title="树上背包"></a>树上背包</h1><h1 id="Best-Thm"><a href="#Best-Thm" class="headerlink" title="Best  Thm"></a>Best  Thm</h1><p>求$n$个点的有向图的欧拉回路的条数。</p><p>令答案为$ans$，$T(x)$表示以$x$为根的内向树的个数，$deg(x)$为$x$的出度（等于入读，否则不可能有欧拉回路），则：<br>$$<br>ans = T(root)\times \prod_{v\in V}(deg(v)-1)!<br>$$<br>$root$取哪个点都可以。</p><h1 id="拟阵交"><a href="#拟阵交" class="headerlink" title="拟阵交"></a>拟阵交</h1><p>不会</p><h1 id="斯坦纳树"><a href="#斯坦纳树" class="headerlink" title="斯坦纳树"></a>斯坦纳树</h1><p><a href="https://loj.ac/p/6433">最大前缀和</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 听课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test/2022/7/26</title>
      <link href="/2022/07/26/test-2022-7-26/"/>
      <url>/2022/07/26/test-2022-7-26/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b6fde309fa1f9806af6fa8b854dece0d0e8966622601060288ca78648b7ba811"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2020 美食家</title>
      <link href="/2022/07/25/NOI2020-%E7%BE%8E%E9%A3%9F%E5%AE%B6/"/>
      <url>/2022/07/25/NOI2020-%E7%BE%8E%E9%A3%9F%E5%AE%B6/</url>
      
        <content type="html"><![CDATA[<p>矩阵快速幂。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><a href="https://www.luogu.com.cn/problem/P6772">题目传送门</a></p><p>首先发现$n\le 50,T\le 10^9$，大概可以猜到是矩阵快速幂，但是转移的话有边长度的限制，需要拆一下，拆边有点爆炸，考虑拆点，拆完点之后对美食节时间排序，每次转移到下一个美食节开始的位置，然后添加贡献即可，复杂度：$O((5n)^3\cdot k)$，可以发现，这样做复杂度有点爆炸，预处理出<code>2</code>的整次幂的矩阵，每次用原矩阵和转移矩阵相乘，复杂度就可以将为$O((5n)^2 \cdot k)$。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, pair&lt;int, int&gt;</span> &gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">250</span> + <span class="number">5</span>, Inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, T, k, len;</span><br><span class="line">LL f[N], g[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    LL a[N][N];</span><br><span class="line">    Node <span class="keyword">operator</span>* (Node b)</span><br><span class="line">    &#123;</span><br><span class="line">        Node c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= len;j ++)</span><br><span class="line">            &#123;</span><br><span class="line">                c.a[i][j] = -Inf;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= len;k ++)</span><br><span class="line">                    c.a[i][j] = <span class="built_in">max</span>(c.a[i][j], a[i][k] + b.a[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[<span class="number">40</span>], b;</span><br><span class="line">PII t[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m, T, k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span> * n;i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">5</span> * n;j ++)</span><br><span class="line">            a[<span class="number">0</span>].a[i][j] = -Inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(f[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u, v;i &lt;= m;i ++)</span><br><span class="line">        <span class="built_in">read</span>(o, u, v), a[<span class="number">0</span>].a[n * (v - <span class="number">1</span>) + o][u] = f[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">4</span>;j ++)</span><br><span class="line">            a[<span class="number">0</span>].a[n * (j - <span class="number">1</span>) + i][n * j + i] = <span class="number">0</span>;</span><br><span class="line">    len = n * <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; <span class="number">32</span>;i ++) a[i] = a[i - <span class="number">1</span>] * a[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, id, u;i &lt;= k;i ++) <span class="built_in">read</span>(o, id, u), t[i] = &#123;o, &#123;id, u&#125;&#125;;</span><br><span class="line">    t[<span class="number">0</span>] = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    t[++ k] = &#123;T, &#123;<span class="number">0</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(t + <span class="number">1</span>, t + k + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= len;i ++) f[i] = -Inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> times = <span class="number">1</span>;times &lt;= k;times ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> o = t[times].first - t[times - <span class="number">1</span>].first;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> cnt = <span class="number">0</span>;cnt &lt;= <span class="number">31</span>;cnt ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(o &gt;&gt; cnt &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= len;j ++) g[j] = -Inf;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= len;j ++)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>;l &lt;= len;l ++)</span><br><span class="line">                        g[j] = <span class="built_in">max</span>(g[j], f[l] + a[cnt].a[l][j]);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= len;j ++) f[j] = g[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f[t[times].second.first] += t[times].second.second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f[<span class="number">1</span>] &lt; <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">write</span>(f[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 矩阵快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2022/7/25</title>
      <link href="/2022/07/25/test2022-7-25/"/>
      <url>/2022/07/25/test2022-7-25/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e1d97e6103001bb7b03e9da6e655da5e67b413ce6dff5d7421ecb0c9d4da159a">f7c84d52981e04730e0cb33ecf03c0388f545a1418cf72ea712b21717b14e1a647627dbcb2493062ab3bcd6356332a799137c0e5d69fb216d4e0fe7f4f6168e7d1db69be9930cf54a67844955dd9bdad21197b47b3d8b31a8df5acec7cfe051130e2c155e996c65cf803113ed6c8480be80910693483578e93d3ef6efe93b20b2ca1ddd77557fdcc39b84110972105daa9e67bec8b31e02eb8b18b7b05b209199c5ced78ad55919e20d895d857d66273eb8e0b8e4332edeca803373fde1f177312d5f14bd815f9d380f49520911c0ac01ea8ae302a11f56f85ce340a0cb52a06f7ffcebb5fe9054f96cefdd8700f86c007de00cedccb0dabda05cc4943d641568c662fb1e5b8ad52808491519575d530d1af388345ba8431fe40b0abc8b35f49c3929d00a9c5b95dd838ca10c11496e09a51f4e67a55fe52b22b84b4c6467808cdac38e2341e93666b4cef9bfbd32c72a56f51d36e005b6d6fbf2eb7ce55a413b7151478304066773354eaeb72322f16c247fdc83ce2596372674fd757aa4230de610e0137b2ed49a5938b540b3ae1ca76aba456cd4c9760f667165d3f0ecd7874250d2e54266f1f9464bc98d689252c7203a77df398169ac67ae29c411bb2657f4779b1f802335559089a86fd63ed8092ed467970ad7226f18fa8e5ff9a2fbaeee6a82ed915dd643b9d030e9b10089d06db49df628950dd3cf3018f81a6efb05dd0bc02b4697aeb8fad5afa371d447c9b66c8892711c6cf470dc008cd6d7ed462486350a23ce7e5700840ff59aed2653b2fae18acabceda724f281a0b55133db57bce0c67283bbd5484023308835bae55bee6797dbd6cbbecaaeb0125712d7c975a0e71c3815a8a99a31f86af336c205b8b0987c26a275831bd0f84294306b268e1c02b0d0c7d5bc4ae0a4837e74cf65376c6e7e888d8a2bc97b01b507458a18993604ae061f4066809dc746fd3b4682ab1c2d920de5582e45b74d0f2b6e787bc492aedd06a934e09016b25e7a039586ea8a3fe9da9f7e16b4c3e068991455a89b15cc8ff48fd7937e184a87514d958187426b97f2693208ce7b6951140937a593a6462009442174308c4a36a5b13f4fb030c363937273672fea209c419a495311388141992b1fbab4c9327b85e158cbcbbfc34f64926afc2e8e74b8de52393060302b7df891f6049fbaff9c01f977b8b262967f0ccb7f3553203380dee6516306a533227662013065036b8221b65ea18d952fa90f62f6ea78d93d0b8dbe1bdd37c4bd66f2b7c0fb8c117d55d8a7f0a2fbad3a9c28dbfb61c40ce6e1f71e156952da6752e9cbd4980cc2b10563d6de81cff8519d4fc45a5f6c9b73acf1a7c5cfe2fc6ac971387eefeef3a65ec1be36553c3cf1c28cdc2ac8ec65c82ec952d62a9a1c937daf76f7728c50769e54ed06e97d15f2a0db722acb5e30371ca5edaae7b16258982e5dce49fc370425d772ed337032f5ae5980d8b80c0b66e4e30f3d4c780d86829779a3356d629fc7274ab0ce8b6e83aa875c72fe054d0630074339e3a77777c695b04e5258f7d45a58ccdc4ead62486ca37f94a5c7b96d757f32d754d6457f3462f67aa7325f88ecd537497bb609673bd944e0abaa022f41e266a88ed3fee7586edfe61008d60d7d1511aa7c9dd85858cfb63bc93167698d49ce542f525d96927ffa50ee327c65661b3c5ba5cd94337d1b9e2fe01025f0fc62b68a9dc346cd210767ca5e54bc6901f2a03421379e99f50d1e8ed4b569ce16af8c5d908843e82052e163e47b33f6cecca9fc665d8321bb60fc6932a38eea0a0ab30f2869d20e3352b58c9721d0b06f7c613964f1c551edc4ff39bc812e8c0bee0edb63e95d65d3a6a6a423477fad508412be7718c36dd0f6d6ff7ca72b1ba77dc42de6fc165d18607c3a212d56279c04cad1e1d82bd8d1132b95d0654e1b8b390e43030ea922f9379c488a2af42d8c76455bbda6b65fd08fd3f5f868c10c660036f40905608fcc08cf72f11edf5ae3e1e668c27f6091fa23b7137afb8c3048906a64fa376d5b24d8ce326fd4008eb0e5e2404018eb980b1310cb6a9b1552bd67c5634e10faa222006a5bacd4a5acf2dc34d3d2c1b74a1080d0b17a8a7c3bc91b63dfc4dd6217420cd7b4ebc7e5911a5a83cd365cd88841b0703cac14128638afe88b5979ca7a0432b6eede8b537be6d4597dd1cf2e2a7064d89a909d64a3bb7aedcdcca89c8b2c333906c373f31ef3a21653a56ee90d4b949f8dd32e406cf7f72d11b341cceb3fc2edff7828290756b7d1f76473073556d5831c37f4c2e0d4c540ccb147e9064499c67a39c5a06f047de5830a0f1e32b76577d653dab203dc0725aa6d4eb99395dcf8dea8965714931d25b3a7fb5ccc111fddbe4f40a251cbec87b8e3a0ad90a86121a5ce2ca8195cb182b47143e3b093ee8e8e278977a162fd5eef4af1ac61b38c8755bb8e54247873dc1ed8dda94b15e550428f9d84e58d4e581c89bf1f6252d2182aaacb193239e0e26743d1779a282fd0a05b8311cb03db1f6d5feff51ea4587485b45d1c525ca11067bcdd1117418a91325db1a2ce7f6bda078f8fd5852e334ac024e6aba640cb794b62adcae2bced66774919e1d258b560aefcc25187e5b851794f837b226b4e129592ad518f86eaba851b47939491c94dd9050e7302c00b82a3b591f7e88c62a5084883b20c7c6198dda12a1dd1cc0da74e01205492fb069774a53c523e884c89fa77a124c43fffef30d6627fa83e254b01915c9bbe8d79bfaafcc850bd688b94249a25c31f9e3b87a3cc6bba2a9f324f0f5a42b832b9aaa887451d1c28174fbfb2d2028653821fe42dc02d002809756e7b65296f9c933c00fe08582934354d8500435486933128e29666d7ccd6ec7cf42e80661ad3e8bdb2c95903c0d9c14868ea5efcf78c4da9e1670daa31d2ad10189b79bb89e6a485e2830ac32f9bfbd85a2ea27bdbaf623a6f1c0fb065165155568b536c7a445e41120300330d2cde381a155ebf2d61a45cd4b48f73d9d152da374e819d31af97f1b429564e70d6c302583b8669ca7cda848480852a2bb84ee1a04f805deb7f6fcbd0f6613e53922d952547ca4e933cb0978ae1d4078d327a9bb70557f4f6828957b48596024e5d70d24881e1b05e131635aac9951fc2a25c02c1d4d87e412c6c2c03bf70012639461cc3b7a4f09111b76dcd1a2bd7b955e02e5cb7a2c6f368d243d325faf3c2462200b9ed21f9139b50be1b53ba86b6592df14ef51807f685619b1debf63b6fa63f517fc22f5a18cc59b605194bc3efa998909ee0f0f5e7845b4d379d43147ec499d6b901ee64bdebf7f38e870a3217cc8df6026794b62e81d4e3a5066eb98fa4634a1b97717c0d6d057cd446f18b02355a3452d4a5a2c8fc02e486a4228ee55ce63825652bea4d03753c9cf7934d98d7a73c340048e8658f129b59d1becd0aaccc08a7e41432f19d7b64a9e936ccbf16646bdff7b187320c5746ef45fd49b91988e5b404794730cada5c31c4fb8d7ad8299c69ea9423313cc1dae2751ad87f72376267061979bd090f7eec6ffed2e9ca0dbd0c4088639dd13dd3167ba846d8543fab9af3cec074db224d91558101e0321b20210f4f5b44b0718a1b2e35e5084614873330fe79ed36fb2f10275c495f8bc651cbfb546f8759575b34700327b3ed88d679f780621e5db48f60eaac0bedfd57121784e2aa0bcc66e62166b091fdb9f3c492fb319c8ebb92d8c33104b1bfb8bb7c9daef49bd58384c5364ad2ac782a10768bd845eeaad5853f1c0d48ca8fa8bcd8a48d0c38d907d827910506fde9fd901babd03c5fdcf0426bc8daa6afbb58e5f9a0ee80186efe13b0d0960f856116c437ad855c3be5fd782f68e1a3d1c1b9750948d5bd1cfbbd911a336752f7b6428fd1faf1b1ac45d8e0285b2eed288c93503a3d82440380e639471a7a102b634021bd790c64504ffbb096ca0f80132066fb35ea69db4ea0f41613f677aedfc8f19bc3cb5799dcfc97bf4947e12f08613f06134843dece1ab35509e989e995da4ee1bf404058b82afe0927d89f1861ef1ab0e54c965771ca29f3eba328510985605949345ab85cde6c4243e36360d4c30f5f33340baa08e2f094f05e67e56fb9b0f008ac635f8075f0ab395abab96d7c8be6a374e453151899781b52b203b098f74b98a5b2114b634f8b229afdc0613080700bdca358e66655c5f27d05d867c78c36826d879f6267296f595981d1555723c218ebf161e724e81a489f297248a882ea791fa0891a499fc837d85d07c36762a9dcd503c5bf59bd20f156426f5747ac5dbe3dea47e13536513c016d6385a5b8aaee2c870720e8c85412c46d12e366a96a3d6b186</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑假数学杂题选讲</title>
      <link href="/2022/07/23/%E6%9A%91%E5%81%87%E6%95%B0%E5%AD%A6%E6%9D%82%E9%A2%98%E9%80%89%E8%AE%B2/"/>
      <url>/2022/07/23/%E6%9A%91%E5%81%87%E6%95%B0%E5%AD%A6%E6%9D%82%E9%A2%98%E9%80%89%E8%AE%B2/</url>
      
        <content type="html"><![CDATA[<p><code>orz jklover</code></p><span id="more"></span><p><a href="https://pe-cn.github.io/">数学习题小网站</a></p><h1 id="problem1"><a href="#problem1" class="headerlink" title="problem1"></a>problem1</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给定n,m，要求选出2m个数，要求每个数都是n的约数，而且所有数的乘积&lt;=n^m，问方案数，答案对998244353取模。</span><br><span class="line">n &lt;= 1e9, m &lt;= 200</span><br></pre></td></tr></table></figure><p>考虑对称性，所有数的乘积$\le n^m$和乘积$\ge n^m$方案数显然相等，重的只有$=n^m$的情况，设此时的方案数为$g$，答案就为$\frac{\sigma(n)^{2m}+g}{2}$。</p><p>问题来到怎么求取等方案数的问题，我们将每一个质数拉出来分开看（$n=p_1^{k_1}\cdot p_2^{k_2}\cdots p_x^{k_x}$），可以发现，这$2m$个数对于$p_1$来说：<br>$$<br>\forall i,cnt_i \le k_1 \\<br>\sum cnt_i = k_1m<br>$$<br>这个东西完全可以$dp$，然后将贡献全部乘到一起，就做完了。</p><p>复杂度：$x \cdot m + \sqrt n$，（$x$是$n$的质因数个数）。</p><h1 id="problem2"><a href="#problem2" class="headerlink" title="problem2"></a>problem2</h1><p>欧拉计划638。</p><p>一个坐标轴，从原点出发走向$(a,b)$，每次只能向上或向右走，每条路径的权值定义为：$k^s$，$s$是路径下方与$x$围成的面积，答案对$10^9+7$取模。</p><p>首先考虑暴力$dp$，我们考虑如何转移到$f(i,j)$，如果我们考虑计算与$x$轴所平行的线所包含的面积，那么式子一定是：<br>$$<br>f(i,j) = f(i - 1,j)+f(i,j-1)\cdot k^i<br>$$<br>那么O(n^2)的暴力就有了。</p><p>我们重新审视这个式子，这个面积$s$也可以看作路径右边的面积，那么这个式子也可以写成：<br>$$<br>f(i,j) = f(i-1, j)\cdot k^j+f(i,j-1)<br>$$<br>这两个式子中的$f$函数所代表的意义是完全等价的我们可以联立这两个方程，就可以得到：<br>$$<br>f(i-1,j) = \frac{k^i-1}{k^j-1}\cdot f(i,j-1) \\<br>f(i,j) = \frac{k^{i+1}-1}{k^j-1}<br>$$<br>之后递归下去，直到得到答案。</p><h1 id="problem3"><a href="#problem3" class="headerlink" title="problem3"></a>problem3</h1><p><a href="https://atcoder.jp/contests/diverta2019-2/tasks/diverta2019_2_d">题目坐标</a></p><p>很基础的一个完全背包，很好想，但当时脑子短路了，死磕网络流无果，注意赋初值。</p><p>贴个代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2.5e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">4</span>];</span><br><span class="line">&#125;a, b;</span><br><span class="line">LL f[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">read</span>(a.x[<span class="number">1</span>], a.x[<span class="number">2</span>], a.x[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">read</span>(b.x[<span class="number">1</span>], b.x[<span class="number">2</span>], b.x[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">3</span>;j ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = a.x[j];i &lt;= n;i ++)</span><br><span class="line">            f[i] = <span class="built_in">max</span>(f[i], f[i - a.x[j]] + b.x[j] - a.x[j]);</span><br><span class="line">    n = n + f[n];</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">3</span>;j ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = b.x[j];i &lt;= n;i ++)</span><br><span class="line">            f[i] = <span class="built_in">max</span>(f[i], f[i - b.x[j]] + a.x[j] - b.x[j]);</span><br><span class="line">    <span class="built_in">write</span>(f[n] + n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="problem4"><a href="#problem4" class="headerlink" title="problem4"></a>problem4</h1><p><a href="https://www.luogu.com.cn/problem/P5339">【TJOI2019】唱、跳、rap和篮球</a></p><h1 id="problem5"><a href="#problem5" class="headerlink" title="problem5"></a>problem5</h1><p>令一个排列中的前缀$gcd$中不同种类的数的个数为$f$，求$n$的排列中最大的$f$，以及有多少种排列等于$f$，对$998244353$取模。</p><h1 id="problem6"><a href="#problem6" class="headerlink" title="problem6"></a>problem6</h1><p>有一个长为$n$的数列$a_n$，每次操作将序列第一个数加入新数列的队首或队尾，令新数列中最长上升子序列长度为$len$，求最大化的$len$，以及有多少种不同的构造方案的最长上升子序列长度为$len$。</p><p>$n \le 10^6$</p><p>大水题。</p><p>首先考虑解决第一个问，我们任意来看一组新序列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1, x, 2, x, 3, x, x, 4, x, 5, 6</span><br></pre></td></tr></table></figure><p>为了使结论更清晰，本人将序列中不贡献答案的数用$x$隐去了。</p><p>我们设$3$是这些有贡献的数中在原序列的编号最小的数，则$4,5,6,1,2$的编号一定大于$3$，而如果令一个数在原序列中的编号为$id(x)$的话，一定有$id(2)&lt;id(1)$，$id(4)&lt;id(5)&lt;id(6)$，那么等于是在原数列求出一个最长上升子序列和一个最长下降子序列，然后将他们拼在一起，令$f(x)$为原数列以$x$为开头的最长上升子序列的长度，$g(x)$则为最长下降子序列的长度，第一问答案就为$\max{f(x)+g(x)-1}$，复杂度用线段树可以做到$n\log n$（常数危险）。</p><p>考虑第二问，我们发现第二问其实是在第一问的基础上考虑其他数的去处，但是我们并不关心其他数的去处，所以每找到一个第一问的答案就会贡献一个$2^{n-len}$（第一个数没法算两次），</p><p>注意：每个起点所拥有的最长上升子序列的个数可能不唯一，所以最后的答案应该是：$\sum cnt(f(x))\cdot cnt(g(x)) \cdot 2^{n - f(x)-g(x)}$。</p><h1 id="problem7"><a href="#problem7" class="headerlink" title="problem7"></a>problem7</h1><h1 id="problem8"><a href="#problem8" class="headerlink" title="problem8"></a>problem8</h1><p>[<a href="https://www.luogu.com.cn/problem/P6772">NOI2020] 美食家</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4240 毒瘤之神的考验</title>
      <link href="/2022/07/22/P4240-%E6%AF%92%E7%98%A4%E4%B9%8B%E7%A5%9E%E7%9A%84%E8%80%83%E9%AA%8C/"/>
      <url>/2022/07/22/P4240-%E6%AF%92%E7%98%A4%E4%B9%8B%E7%A5%9E%E7%9A%84%E8%80%83%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>根号分治<code>+</code>莫比乌斯反演的神仙题（太<code>tm</code>毒瘤了）。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先式子很简单，$T$组询问：<br>$$<br>\sum _i^n\sum_j^m \phi(ij)<br>$$</p><p>首先$\phi$有个小性质：</p><p>$$<br>\phi(ij)=\frac{\phi(i)\phi(j)gcd(i,j)}{\phi(gcd(i,j))}<br>$$</p><p>证明：</p><p>$$<br>\begin{aligned}<br>\phi(i) * \phi(j)&amp;=i\prod_{p|i}\frac{p-1}{p}j\prod_{q|j}\frac{q-1}{q} \\<br>&amp;=ij\prod_{p|ij}\frac{p-1}{p}\prod_{q|gcd(i,j)}\frac{q-1}{q}<br>\end{aligned}<br>$$<br>下面那个化简就得到了。</p><p>我们现在来化原式子，强令$n&lt;m$：<br>$$<br>\begin{aligned}<br>\sum_i^n\sum_j^m\phi(ij)&amp;=\sum_d^n\frac{d}{\phi(d)}\sum_i^{\frac{n}{d}}\sum_j^{\frac{m}{d}}\phi(i)\phi(j)[gcd(i,j)==1] \\<br>&amp;=\sum_d^n\frac{d}{\phi(d)}\sum_i^{\frac{n}{d}}\sum_j^{\frac{m}{d}}\phi(id)\phi(jd)\sum_{p|gcd(i,j)}\mu(p)\\<br>&amp;=\sum_d^n\frac{d}{\phi(d)}\sum_{p}^{\frac{n}{d}}\mu(p)\sum_i^{\frac{n}{pd}}\sum_j^{\frac{m}{pd}}\phi(idp)\phi(jdp)\\<br>&amp;=\sum_T^n\sum_{d|T}\frac{d}{\phi(d)}\mu(\frac{T}{d})\sum_i^{\frac{n}{T}}\sum_j^{\frac{m}{T}}\phi(Ti)\phi(Tj)\\<br>\end{aligned}<br>$$<br>发现$\sum_{d|T}\frac{d}{\phi(d)}\mu(\frac{T}{d})$可以$n\ln n$预处理，我们设其处理出来的值为$f(T)$。</p><p>我们来考虑后面这坨怎么办，$\sum_i^{\frac{n}{T}}\sum_j^{\frac{m}{T}}\phi(Ti)\phi(Tj)$，我们发现这两坨互相独立，且其本质相同，都是：$\sum_i^{\frac{n}{T}}\phi(Ti)$，我们令$g(k,n)=\sum_i^n\phi(i,k)$，然后这个东西有递推式：$g(k,n)=g(k,n-1)+\phi(kn)$，所以也可以$n \ln n$预处理。</p><p>重新回过头来，可以发现：<br>$$<br>\begin{aligned}<br>\sum _i^n\sum_j^m \phi(ij)=\sum_i^nf(i)\cdot g(i,\left \lfloor \frac{n}{i} \right \rfloor) \cdot g(i,\left \lfloor \frac{m}{i} \right \rfloor)<br>\end{aligned}<br>$$<br>我们发现这分不了块，只能$O(n)$做，但我们并不气馁，再次考虑套路的换元：<br>$$<br>t(a,b,n)=\sum_i^nf(i)\cdot g(i,a) \cdot g(i,b)<br>$$<br>$t$这个东西我们发现就是一个前缀和的形式，就可以数论分块，形式是这样的：<br>$$<br>\sum t(\left \lfloor \frac{n}{l} \right \rfloor,\left \lfloor \frac{m}{l} \right \rfloor,r)-t(\left \lfloor \frac{n}{l} \right \rfloor,\left \lfloor \frac{m}{l} \right \rfloor,l-1)<br>$$<br>问题转移到求解$t$这个式子，发现第一，二项有$n$中取值，第三项肯定有$n$种取值，结合在一起$n^3$，$T$来瓜起。</p><p>考虑根号平衡一手，因为当$l$越大，整数分块所包含的区间越大，暴力做的复杂度越高，所以我们设定一个阈值，$\left \lfloor \frac{n}{l} \right \rfloor$小于这个阈值我们就预处理，反之就暴力。</p><p>阈值取$50$比较合适。</p><p>总的时间复杂度：$O(n \ln n + n \cdot B^2+T(\sqrt n+\frac{n}{B})))$。</p><p>挺妙的（如果会的话）</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, mod = <span class="number">998244353</span>, B = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, T;</span><br><span class="line"><span class="keyword">int</span> primes[N], cnt, phi[N], mu[N], f[N];</span><br><span class="line"><span class="keyword">int</span> inv[N];</span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = <span class="number">1ll</span> * res * x % mod;</span><br><span class="line">        x = <span class="number">1ll</span> * x * x % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;g[N], t[B + <span class="number">5</span>][B + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>] = phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) phi[i] = i - <span class="number">1</span>, primes[++ cnt] = i, mu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= cnt &amp;&amp; primes[j] * i &lt; N;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % primes[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                mu[i * primes[j]] = <span class="number">0</span>;</span><br><span class="line">                phi[i * primes[j]] = <span class="number">1ll</span> * phi[i] * primes[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mu[i * primes[j]] = -mu[i];</span><br><span class="line">            phi[primes[j] * i] = phi[i] * phi[primes[j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; N;i ++) inv[i] = <span class="built_in">qpow</span>(phi[i], mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; N;i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= (N - <span class="number">1</span>) / i;j ++)</span><br><span class="line">            f[i * j] = (f[i * j] + <span class="number">1ll</span> * mu[j] * i * inv[i] % mod + mod) % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; N;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i].<span class="built_in">resize</span>(N / i + <span class="number">5</span>);</span><br><span class="line">        g[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= (N - <span class="number">1</span>) / i;j ++)</span><br><span class="line">            g[i][j] = (LL)(g[i][j - <span class="number">1</span>] + phi[i * j]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= B;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = i;k &lt;= B;k ++)</span><br><span class="line">        &#123;</span><br><span class="line">            t[i][k].<span class="built_in">resize</span>(N / k + <span class="number">5</span>);</span><br><span class="line">            t[i][k][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= (N - <span class="number">1</span>) / k;j ++)</span><br><span class="line">                t[i][k][j] = (t[i][k][j - <span class="number">1</span>] + <span class="number">1ll</span> * f[j] * g[j][i] % mod * g[j][k] % mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n, m);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m / B;i ++) res = (res + <span class="number">1ll</span> * f[i] * g[i][n / i] % mod * g[i][m / i] % mod) % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l = m / B + <span class="number">1</span>, r;l &lt;= n;l = r + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        r = <span class="built_in">min</span>(n / (n / l), m / (m / l));</span><br><span class="line">        res = (res + (t[n / l][m / l][r] - t[n / l][m / l][l - <span class="number">1</span>] + mod) % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
            <tag> 根号分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2018 屠龙勇士</title>
      <link href="/2022/07/20/NOI2018-%E5%B1%A0%E9%BE%99%E5%8B%87%E5%A3%AB/"/>
      <url>/2022/07/20/NOI2018-%E5%B1%A0%E9%BE%99%E5%8B%87%E5%A3%AB/</url>
      
        <content type="html"><![CDATA[<p>卡<code>long long</code>的伞兵出题人。</p><p><code>excrt</code>裸题。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先发现每只怪物被哪把剑干死是确定的，我们首先将其预处理出来，然后就会惊奇的发现式子长这样：<br>$$<br>\forall i,x\times atk_i \equiv a_i \ (mod \ p_i)\\<br>x \times atk_i \ge a_i<br>$$<br>首先第二个式子是废的，随便统计即可，对于第一个式子，我们发现这是$excrt$的裸题，由于之前没写博客，就在这写了。</p><p>首先我们想办法先把$atk$搞掉（下文自动省略下标），发现当$(atk,p)!=0$时不是很好搞，我们先将其最大公因数除掉，显然如果$a$无法整除其最大公因数，此题无解，然后我们进行一波推导之后可以发现$atk$在模$p$意义下的逆元为：<br>$$<br>\begin{aligned}<br>atk \times x \equiv 1 \pmod{p} \\<br>atk\times x+ k\times p=1<br>\end{aligned}<br>$$<br>直接丢进<code>exgcd</code>即可（注意最后要转化成正数然后还要取模），设$a$乘上$atk$的逆元为$v$。</p><p>之后我们再观察一下目前的式子：<br>$$<br>\begin{aligned}<br>\left{\begin{matrix}<br> x \equiv &amp;v_1  &amp; \pmod{p_1} \<br> \vdots &amp;\vdots  &amp;\vdots \<br> x \equiv &amp;v_n  &amp; \pmod{p_n}<br>\end{matrix}\right.<br>\end{aligned}<br>$$<br>考虑进行<code>excrt</code>，下面是其过程：</p><p>考虑每次合并两个方程：<br>$$<br>x \equiv v_1 \pmod{p_1} \\<br>x \equiv v_2 \pmod{p_2}<br>$$<br>可转化成：<br>$$<br>x = v_1 + k_1 \times p_1 \\<br>x = v_2 + k_2 \times p_2<br>$$<br>合并上式：<br>$$<br>v_2-v_1=k1\times p_1 - k_2 \times p_2<br>$$<br>再丢进<code>exgcd</code>中解一个$k_1$，之后就可以算出对于这两个式子合法的$x$，那么合并后的式子就是：<br>$$<br>x \equiv k_1\times p_1+v_1 \pmod{ lcm(p_1,p_2)}<br>$$<br>之后依次合并即可。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, T;</span><br><span class="line"><span class="keyword">int</span> a[N], p[N], gn[N], sword[N];</span><br><span class="line">multiset&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y ? <span class="built_in">gcd</span>(y, x % y) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k, <span class="keyword">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (__int128)res * x % mod;</span><br><span class="line">        x = (__int128)x * x % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, __int128 &amp;x, __int128 &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) <span class="keyword">return</span> x = <span class="number">1</span>, y = <span class="number">0</span>, <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Lcm</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (__int128) x * y / <span class="built_in">gcd</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int128 x, y;</span><br><span class="line">    <span class="keyword">if</span>((a[j] - a[<span class="number">1</span>]) % <span class="built_in">gcd</span>(p[<span class="number">1</span>], -p[j]) != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">exgcd</span>(p[<span class="number">1</span>], p[j], x, y);</span><br><span class="line">    <span class="keyword">int</span> mod = <span class="built_in">Lcm</span>(p[<span class="number">1</span>], p[j]);</span><br><span class="line">    x = (__int128) x * (a[j] - a[<span class="number">1</span>]) / <span class="built_in">gcd</span>(p[<span class="number">1</span>], p[j]);</span><br><span class="line">    a[<span class="number">1</span>] = ((__int128) p[<span class="number">1</span>] * x + a[<span class="number">1</span>] + mod) % mod;</span><br><span class="line">    p[<span class="number">1</span>] = mod;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> minn, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Inv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">gcd</span>(a, p) != <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    __int128 x, y;</span><br><span class="line">    <span class="built_in">exgcd</span>(a, p, x, y);</span><br><span class="line">    <span class="keyword">return</span> (x % p + p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s.<span class="built_in">clear</span>();</span><br><span class="line">    minn = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(p[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(gn[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o;i &lt;= m;i ++) <span class="built_in">read</span>(o), s.<span class="built_in">insert</span>(o);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = s.<span class="built_in">upper_bound</span>(a[i]);</span><br><span class="line">        <span class="keyword">if</span> (t != s.<span class="built_in">begin</span>()) -- t;</span><br><span class="line">        sword[i] = *t;</span><br><span class="line">        s.<span class="built_in">erase</span>(t);</span><br><span class="line">        s.<span class="built_in">insert</span>(gn[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        minn = <span class="built_in">max</span>(minn, (<span class="keyword">int</span>)<span class="built_in">ceil</span>((<span class="keyword">double</span>)a[i] / sword[i]));</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">gcd</span>(sword[i], p[i]) != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            o = <span class="built_in">gcd</span>(sword[i], p[i]);</span><br><span class="line">            <span class="keyword">if</span>(a[i] % o != <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>), <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">            a[i] /= o, p[i] /= o, sword[i] /= o;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] = (__int128)a[i] * <span class="built_in">Inv</span>(sword[i], p[i]) % p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">merge</span>(i)) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>), <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    ans = (a[<span class="number">1</span>] + p[<span class="number">1</span>]) % p[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (minn &gt; a[<span class="number">1</span>]) ans = ans + ((minn - a[<span class="number">1</span>] + p[<span class="number">1</span>] - <span class="number">1</span>) / p[<span class="number">1</span>]) * p[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">write</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> excrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZJOI2012 小蓝的好友</title>
      <link href="/2022/07/19/ZJOI2012-%E5%B0%8F%E8%93%9D%E7%9A%84%E5%A5%BD%E5%8F%8B/"/>
      <url>/2022/07/19/ZJOI2012-%E5%B0%8F%E8%93%9D%E7%9A%84%E5%A5%BD%E5%8F%8B/</url>
      
        <content type="html"><![CDATA[<p>被教训了，以后要踏实一点，不懂的题都尽量写题解吧（希望明天<code>jklover</code>来的时候不要被虐爆）。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>经典矩阵无覆盖问题，但是$R\times C$都无法跑，一般的做法显然是不行的，于是我们需要开始观察题目的特殊地方<del>然后耍杂技</del>。</p><p>可以发现数据保证数据一定随机，于是我们考虑从这个地方下手，发现如果正着做这道题的话需要用容斥，复杂度我们显然是无法接受的，于是考虑这个问题的补问题：有多少个矩阵没有被覆盖（下文称其为空矩阵）。</p><p>对于这个问题，我们考虑扫描线（行），即有多少个空矩阵的下界在当前的线上，令$w[x]$为第$x$列所扫描到的最低的覆盖点，那么目前的图就应该是这样的：</p><p><img src="1.png" alt="image"></p><p>可以发现当前最低点的贡献就是其左边的列的数量+1$\times$右边列的数量+1（+1是因为当前列也行）。</p><p>而且当我们将空列补$0$（在$0$行插入一个覆盖点），那么这个贡献的列就会被转化成点，而且是可以递归处理的（断开已统计过的列即可），这就是一颗笛卡尔树。</p><p>又因为数据随机，所以用平衡树维护笛卡尔树的复杂度有保证。</p><p>时间复杂度：$O(l+(r+n)\log r)$。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, l, r, root;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;s[N];</span><br><span class="line"><span class="keyword">namespace</span> pol&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, z, tot;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> s[<span class="number">2</span>], id, v, sz;</span><br><span class="line">        LL val;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> l(x) tr[x].s[0]</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> r(x) tr[x].s[1]</span></span><br><span class="line">    &#125;tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tr[x].sz = tr[<span class="built_in">l</span>(x)].sz + tr[<span class="built_in">r</span>(x)].sz + <span class="number">1</span>;</span><br><span class="line">        tr[x].val = tr[<span class="built_in">l</span>(x)].val + tr[<span class="built_in">r</span>(x)].val + <span class="number">1ll</span> * (tr[<span class="built_in">l</span>(x)].sz + <span class="number">1</span>) * (tr[<span class="built_in">r</span>(x)].sz + <span class="number">1</span>) * tr[x].v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tr[++ tot].id = id, tr[tot].v = v, tr[tot].sz = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x | y;</span><br><span class="line">        <span class="keyword">if</span>(tr[x].v &gt; tr[y].v)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">r</span>(x) = <span class="built_in">merge</span>(<span class="built_in">r</span>(x), y);</span><br><span class="line">            <span class="built_in">pushup</span>(x);</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">l</span>(y) = <span class="built_in">merge</span>(x, <span class="built_in">l</span>(y));</span><br><span class="line">            <span class="built_in">pushup</span>(y);</span><br><span class="line">            <span class="keyword">return</span> y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> k, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!now) x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(tr[now].id &lt;= k) x = now, <span class="built_in">split</span>(<span class="built_in">r</span>(now), k, <span class="built_in">r</span>(now), y);</span><br><span class="line">            <span class="keyword">else</span> y = now, <span class="built_in">split</span>(<span class="built_in">l</span>(now), k, x, <span class="built_in">l</span>(now));</span><br><span class="line">            <span class="built_in">pushup</span>(now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">split</span>(root, id - <span class="number">1</span>, x, y), <span class="built_in">split</span>(y, id, y, z);</span><br><span class="line">        tr[y].v = v;</span><br><span class="line">        root = <span class="built_in">merge</span>(x, <span class="built_in">merge</span>(y, z)); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">split</span>(root, id - <span class="number">1</span>, x, y);</span><br><span class="line">        root = <span class="built_in">merge</span>(x, <span class="built_in">merge</span>(<span class="built_in">make</span>(id, v), y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(l, r, n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, st, ed;i &lt;= n;i ++) <span class="built_in">read</span>(st, ed), s[st].<span class="built_in">push_back</span>(ed);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= r;i ++) pol:: <span class="built_in">insert</span>(i, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= l;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j : s[i]) pol:: <span class="built_in">modify</span>(j, i);</span><br><span class="line">        ans += <span class="number">1ll</span> * r * (r + <span class="number">1</span>) / <span class="number">2</span> * i - pol:: tr[root].val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(<span class="number">1ll</span> * l * (l + <span class="number">1</span>) / <span class="number">2</span> * r * (r + <span class="number">1</span>) / <span class="number">2</span> - ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZJOI2016 大森林</title>
      <link href="/2022/07/19/ZJOI2016-%E5%A4%A7%E6%A3%AE%E6%9E%97/"/>
      <url>/2022/07/19/ZJOI2016-%E5%A4%A7%E6%A3%AE%E6%9E%97/</url>
      
        <content type="html"><![CDATA[<p><code>orz</code>优先级。</p><span id="more"></span><p>一道比较神秘的题目。</p><p>首先我们发现在线的做法只能做到暴力的$mn\log n$，这种报废的做法显然是不可取的，我们考虑离线。</p><p>首先考虑第一种操作怎么快速维护：为了避免建重复的节点，我们应该将所有的树压成一棵树（多的节点断掉即可）。</p><p>思考为什么复杂度如此的高，最后搞来搞去就发现第二种操作是最不可做的，我们应该怎样才能将子树信息进行移动，这其实考了虚点的概念，就是我们更换生长节点的时候，建立一个虚点，将后来子树的信息全部加在虚点上，之后到了撤销生长节点的时候，将虚点直接挪过去即可。</p><p>紧接着就不难得出询问的实现方法，设一个节点到根的路径上的的非虚节点个数为$sz[x]$，则答案为：$sz[x]+sz[y]-2*lca(x,y)$。</p><p>因为不能改变树的结构，所以不能$split$。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">2</span>], p, sum, v;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(x) tr[x].s[0]</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> r(x) tr[x].s[1]</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> fa(x) tr[x].p</span></span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">l</span>(<span class="built_in">fa</span>(x)) != x &amp;&amp; <span class="built_in">r</span>(<span class="built_in">fa</span>(x)) != x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].sum = tr[<span class="built_in">l</span>(x)].sum + tr[<span class="built_in">r</span>(x)].sum + tr[x].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line">    <span class="keyword">int</span> k = tr[y].s[<span class="number">1</span>] == x;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">isroot</span>(y)) tr[z].s[tr[z].s[<span class="number">1</span>] == y] = x;</span><br><span class="line">    <span class="built_in">fa</span>(x) = z;</span><br><span class="line">    tr[y].s[k] = tr[x].s[k ^ <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(tr[x].s[k ^ <span class="number">1</span>]) <span class="built_in">fa</span>(tr[x].s[k ^ <span class="number">1</span>]) = y;</span><br><span class="line">    tr[x].s[k ^ <span class="number">1</span>] = y, <span class="built_in">fa</span>(y) = x;</span><br><span class="line">    <span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> st[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isroot</span>(x))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">isroot</span>(y))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">r</span>(y) == x) ^ (<span class="built_in">r</span>(z) == y)) <span class="built_in">rotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; x; y = x, x = <span class="built_in">fa</span>(x)) <span class="built_in">splay</span>(x), <span class="built_in">r</span>(x) = y, <span class="built_in">pushup</span>(x);</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(x), <span class="built_in">fa</span>(x) = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">access</span>(x), <span class="built_in">splay</span>(x);</span><br><span class="line">    <span class="built_in">fa</span>(<span class="built_in">l</span>(x)) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">l</span>(x) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt, idx, last, tot, num;</span><br><span class="line"><span class="keyword">int</span> L[N], R[N], id[N]; <span class="comment">// 每个点的出现坐标，删除坐标，下标</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt ++, tr[cnt].sum = tr[cnt].v = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ask</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos, id, x, y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (Ask b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> pos == b.pos ? id &lt; b.id : pos &lt; b.pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, lca;</span><br><span class="line">    <span class="built_in">access</span>(x), <span class="built_in">splay</span>(x), ans += tr[x].sum;</span><br><span class="line">    lca = <span class="built_in">access</span>(y), <span class="built_in">splay</span>(y), ans += tr[y].sum;</span><br><span class="line">    <span class="built_in">access</span>(lca), <span class="built_in">splay</span>(lca), ans -= <span class="number">2</span> * tr[lca].sum;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="built_in">make</span>(<span class="number">1</span>);</span><br><span class="line">    L[<span class="number">1</span>] = <span class="number">1</span>, R[<span class="number">1</span>] = n;</span><br><span class="line">    id[++ idx] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">make</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">link</span>(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    last = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> op, l, r, x, u, v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(op);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(l, r);</span><br><span class="line">            <span class="built_in">make</span>(<span class="number">1</span>);</span><br><span class="line">            L[++ idx] = l, R[idx] = r, id[idx] = cnt;</span><br><span class="line">            q[++ tot] = &#123;<span class="number">1</span>, i - m, cnt, last&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(l, r, x);</span><br><span class="line">            l = <span class="built_in">max</span>(L[x], l), r = <span class="built_in">min</span>(r, R[x]);</span><br><span class="line">            <span class="keyword">if</span>(l &lt;= r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">make</span>(<span class="number">0</span>);</span><br><span class="line">                <span class="built_in">link</span>(cnt, last);</span><br><span class="line">                q[++ tot] = &#123;l, i - m, cnt, id[x]&#125;;</span><br><span class="line">                q[++ tot] = &#123;r + <span class="number">1</span>, i - m, cnt, last&#125;;</span><br><span class="line">                last = cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x, u, v);</span><br><span class="line">            q[++ tot] = &#123;x, ++ num, id[u], id[v]&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + tot + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">for</span>(;i == q[j].pos;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(q[j].id &lt;= <span class="number">0</span>) <span class="built_in">cut</span>(q[j].x), <span class="built_in">link</span>(q[j].x, q[j].y);</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                ans[q[j].id] = <span class="built_in">query</span>(q[j].x, q[j].y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= num;i ++) <span class="built_in">write</span>(ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> LCT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UOJ207 共价大爷游长沙</title>
      <link href="/2022/07/19/UOJ207-%E5%85%B1%E4%BB%B7%E5%A4%A7%E7%88%B7%E6%B8%B8%E9%95%BF%E6%B2%99/"/>
      <url>/2022/07/19/UOJ207-%E5%85%B1%E4%BB%B7%E5%A4%A7%E7%88%B7%E6%B8%B8%E9%95%BF%E6%B2%99/</url>
      
        <content type="html"><![CDATA[<p>才知道$LCT$可以维护子树信息，爱了爱了。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>我们考虑将$x$定为原树的根节点，那么如果必须经过$x-y$这条边的话，大爷的每一对阅览节点当且仅当有且只有一个在$y$的子树内时才可能满足都经过这条边，于是我们随机给这些点对赋一个随机的权值（$10^9$左右），之后将$x$变成根，之后查询$y$子树内的异或值与所有点对异或值是否相等即可。</p><p>关于$LCT$维护子树信息问题，这里有一个不太妙的方案：将此点在$Splay$中的左右子树信息和自身虚儿子信息全部贡献到本点，这样的话当所求点转到$Splay$的根时，根据$Splay$的定义，根的左子树的信息显然是不必要的，又由于整棵树的信息目前都在根节点，去掉左子树信息就是根节点在原树中的子树信息。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(<span class="number">114515</span>)</span></span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> sz2[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">2</span>], rev, val, v, p;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(x) tr[x].s[0]</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> r(x) tr[x].s[1]</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> fa(x) tr[x].p</span></span><br><span class="line">&#125;tr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].val = tr[<span class="built_in">l</span>(x)].val ^ tr[x].v ^ tr[<span class="built_in">r</span>(x)].val ^ sz2[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rev</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(<span class="built_in">l</span>(x), <span class="built_in">r</span>(x));</span><br><span class="line">    tr[x].rev ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tr[x].rev) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">rev</span>(<span class="built_in">l</span>(x)), <span class="built_in">rev</span>(<span class="built_in">r</span>(x));</span><br><span class="line">    tr[x].rev = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">l</span>(<span class="built_in">fa</span>(x)) != x &amp;&amp; <span class="built_in">r</span>(<span class="built_in">fa</span>(x)) != x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line">    <span class="keyword">int</span> k = <span class="built_in">r</span>(y) == x;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">isroot</span>(y)) tr[z].s[<span class="built_in">r</span>(z) == y] = x;</span><br><span class="line">    <span class="built_in">fa</span>(x) = z;</span><br><span class="line">    tr[y].s[k] = tr[x].s[k ^ <span class="number">1</span>], <span class="built_in">fa</span>(tr[x].s[k ^ <span class="number">1</span>]) = y;</span><br><span class="line">    tr[x].s[k ^ <span class="number">1</span>] = y, <span class="built_in">fa</span>(y) = x;</span><br><span class="line">    <span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> st[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>, id = x;</span><br><span class="line">    st[++ top] = x;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isroot</span>(id)) st[++ top] = id = <span class="built_in">fa</span>(id);</span><br><span class="line">    <span class="keyword">while</span>(top) <span class="built_in">pushdown</span>(st[top --]);</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isroot</span>(x))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">isroot</span>(y))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">r</span>(y) == x) ^ (<span class="built_in">r</span>(z) == y)) <span class="built_in">rotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z = x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; x; y = x, x = <span class="built_in">fa</span>(x))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">splay</span>(x); </span><br><span class="line">        sz2[x] ^= tr[<span class="built_in">r</span>(x)].val ^ tr[y].val;</span><br><span class="line">        <span class="built_in">r</span>(x) = y, <span class="built_in">pushup</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">make_root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">access</span>(x);</span><br><span class="line">    <span class="built_in">rev</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">access</span>(x);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">l</span>(x)) <span class="built_in">pushdown</span>(x), x = <span class="built_in">l</span>(x);</span><br><span class="line">    <span class="comment">// splay(x); // 不能更改根节点，因为后面调用的是y</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">make_root</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">find_root</span>(y) == x) <span class="keyword">return</span> ;</span><br><span class="line">    sz2[y] ^= tr[x].val, tr[x].p = y;</span><br><span class="line">    <span class="built_in">pushup</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">make_root</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">find_root</span>(y) != x) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">fa</span>(x) = <span class="built_in">l</span>(y) = <span class="number">0</span>, <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">make_root</span>(x);</span><br><span class="line">    <span class="built_in">access</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">PII stk[N * <span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> tot, ans;</span><br><span class="line"><span class="keyword">int</span> shit[N * <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">split</span>(x, y);</span><br><span class="line">    <span class="built_in">splay</span>(x);</span><br><span class="line">    <span class="comment">// 下列写法均可</span></span><br><span class="line">    <span class="keyword">return</span> tr[y].val == ans;</span><br><span class="line">    <span class="comment">// return (tr[y].val ^ tr[l(y)].val) == ans;</span></span><br><span class="line">    <span class="comment">// return tr[x].val == ans;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u;i &lt; n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(o, u);</span><br><span class="line">        <span class="built_in">link</span>(o, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> type, x, y, u, v;</span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(type);</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x, y, u, v);</span><br><span class="line">            <span class="built_in">cut</span>(x, y), <span class="built_in">link</span>(u, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x, y);</span><br><span class="line">            stk[++ tot] = &#123;x, y&#125;;</span><br><span class="line">            shit[tot] = <span class="built_in">rnd</span>();</span><br><span class="line">            ans ^= shit[tot];</span><br><span class="line">            <span class="built_in">make_root</span>(x), tr[x].v ^= shit[tot], <span class="built_in">pushup</span>(x);</span><br><span class="line">            <span class="built_in">make_root</span>(y), tr[y].v ^= shit[tot], <span class="built_in">pushup</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            ans ^= shit[x];</span><br><span class="line">            <span class="built_in">make_root</span>(stk[x].first), tr[stk[x].first].v ^= shit[x], <span class="built_in">pushup</span>(stk[x].first);</span><br><span class="line">            <span class="built_in">make_root</span>(stk[x].second), tr[stk[x].second].v ^= shit[x], <span class="built_in">pushup</span>(stk[x].second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x, y);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(x, y)) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> UOJ </tag>
            
            <tag> LCT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1312G Autocompletion</title>
      <link href="/2022/07/16/CF1312G-Autocompletion/"/>
      <url>/2022/07/16/CF1312G-Autocompletion/</url>
      
        <content type="html"><![CDATA[<p>有点妙。</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/CF1312G">CF1312G Autocompletion</a></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>设最后答案为$f[x]$，每一个关键点（只算关键点）的$dfs$序为$dfn[x]$。</p><p>那么显然：<br>$$<br>f[x] = min(f[fa[x]] + 1, f[i] + dfn[x] - dfn[i] + p[i])<br>$$<br>$i$是$x$的祖宗节点，$p[i]$代表这个点是否为关键节点。</p><p>看到题的时候感觉会比较板，将$Trie$树上的查询链拉出来建两颗线段树，第一颗只维护第一种操作，即$f[i] + len(x, i)$，第二颗线段树维护第二种操作，即$f[i]-dfn[i]+p[i]$即可，时间复杂度为：$n \log n$。</p><p>后来发现这完全是吃饱了撑的。</p><p>我们重新定义一个辅助数组$g$，其含义为$x$祖宗节点中最优的$f[i]-dfn[i]+p[i]$。</p><p>然后就结束了。</p><p>转移方程：<br>$$<br>\begin{aligned}<br>f[x] &amp;= f[y] + 1; \\<br>if(p[x]) \ f[x] &amp;= min(f[x], g[y] + dfn[x]); \\<br>g[x] &amp;= min(f[x] - dfn[x] + p[x], g[y]); \\<br>\end{aligned}<br>$$</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> ch[N][<span class="number">26</span>], tot, id[N];</span><br><span class="line"><span class="keyword">bool</span> p[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ch[x][c] = ++ tot;</span><br><span class="line">    id[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt, dfn[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x]) cnt ++;</span><br><span class="line">    dfn[x] = cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">26</span>;i ++)</span><br><span class="line">        <span class="keyword">if</span>(ch[x][i])</span><br><span class="line">            <span class="built_in">dfs</span>(ch[x][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> f[N], g[N], a[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f[x] = f[y] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(p[x]) f[x] = <span class="built_in">min</span>(f[x], g[y] + dfn[x]);</span><br><span class="line">        g[x] = <span class="built_in">min</span>(f[x] - dfn[x] + p[x], g[y]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">26</span>;i ++)</span><br><span class="line">        <span class="keyword">if</span>(ch[x][i])</span><br><span class="line">            <span class="built_in">dfs1</span>(ch[x][i], x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o;i &lt;= n;i ++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">read</span>(o);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, c);</span><br><span class="line">        <span class="built_in">insert</span>(o, c[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o;i &lt;= m;i ++) <span class="built_in">read</span>(a[i]), p[a[i]] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++) <span class="built_in">write</span>(f[a[i]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> CF </tag>
            
            <tag> Trie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csp-2019 树的重心</title>
      <link href="/2022/07/15/csp-2019-%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83/"/>
      <url>/2022/07/15/csp-2019-%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<p>不知道性质的话这题就只有暴力分了。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>树的重心的性质：</p><ol><li>一棵树如果有两个重心，这两个重心一定是相邻的</li><li>一棵树的重心一定在根节点所在的重链上</li><li>一棵树的重心一定是以该树根节点重儿子为根的子树的重心的祖先</li></ol><p>知道了性质之后回过头来再次审视题目：首先预处理出这棵树每个节点的重儿子，次重儿子，然后使用换根$dp$开始从$1$根节点开始逐渐向每一颗子树转移，对于每一颗子树我们使用倍增的方式找重心，然后对于每一个找到的点，判断其父亲节点，重儿子节点和本身节点是否为重心，然后统计进入答案。</p><p>具体怎么样换根：对于任意节点$x$，现在要计算断开它的子树$j$时两颗树的贡献，不难发现$j$的子树没有动，直接倍增找即可，现在来观察新子树$x$，此时新子树的大小显然应该为$sz[1] - sz[j]$，而$x$新增的子树显然就是$father[x]$只需判断$father[x]$是否会成为$x$的新的重儿子然后倍增跳即可。</p><p>注：对于$x$被断开的子树$j$，如果其不是$x$的重儿子，那么$x$的新重儿子就是在$father[x]$和$heavy-son[x]$中选择，否则就应该在$second-heavy-son[x]$和$father[x]$中选择。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[N &lt;&lt; <span class="number">1</span>], ne[N &lt;&lt; <span class="number">1</span>], h[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    idx ++;</span><br><span class="line">    e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> son[N], son2[N], f[N], fa[N], sz[N], tr[N][<span class="number">19</span>];</span><br><span class="line"><span class="keyword">int</span> sz2[N], son3[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[x] = <span class="number">1</span>, fa[x] = y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[x], j; ~i;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(j, x);</span><br><span class="line">        sz[x] += sz[j];</span><br><span class="line">        <span class="keyword">if</span>(sz[j] &gt; sz[son[x]]) son2[x] = son[x], son[x] = j;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sz[j] &gt; sz[son2[x]]) son2[x] = j;</span><br><span class="line">    &#125;   </span><br><span class="line">    tr[x][<span class="number">0</span>] = son[x];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">17</span>;i ++)</span><br><span class="line">        tr[x][i] = tr[tr[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * (<span class="built_in">max</span>(sz2[son3[x]], sum - sz2[x]) &lt;= sum / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[x], j; ~i;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == y) <span class="keyword">continue</span>;</span><br><span class="line">        sz2[x] = sz[<span class="number">1</span>] - sz[j];</span><br><span class="line">        f[j] = f[x] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(son[x] == j) son3[x] = son2[x];</span><br><span class="line">        <span class="keyword">else</span> son3[x] = son[x];</span><br><span class="line">        <span class="keyword">if</span>(sz2[y] &gt; sz2[son3[x]]) son3[x] = y;</span><br><span class="line">        tr[x][<span class="number">0</span>] = son3[x];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= <span class="number">17</span>;k ++) tr[x][k] = tr[tr[x][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> now = x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">17</span>;k &gt;= <span class="number">0</span>;k --)</span><br><span class="line">            <span class="keyword">if</span>(sz2[x] - sz2[tr[now][k]] &lt;= sz2[x] / <span class="number">2</span>)</span><br><span class="line">                now = tr[now][k];</span><br><span class="line">        ans += <span class="built_in">check</span>(son3[now], sz2[x]) + <span class="built_in">check</span>(now, sz2[x]) + <span class="built_in">check</span>(f[now], sz2[x]);</span><br><span class="line">        now = j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">17</span>;k &gt;= <span class="number">0</span>;k --)</span><br><span class="line">            <span class="keyword">if</span>(sz2[j] - sz2[tr[now][k]] &lt;= sz2[j] / <span class="number">2</span>)</span><br><span class="line">                now = tr[now][k];</span><br><span class="line">        ans += <span class="built_in">check</span>(son3[now], sz2[j]) + <span class="built_in">check</span>(now, sz2[j]) + <span class="built_in">check</span>(f[now], sz2[j]);</span><br><span class="line">        f[x] = j;</span><br><span class="line">        <span class="built_in">dfs2</span>(j, x);</span><br><span class="line">    &#125;</span><br><span class="line">    son3[x] = tr[x][<span class="number">0</span>] = son[x];</span><br><span class="line">    f[x] = fa[x];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">17</span>;j ++) tr[x][j] = tr[tr[x][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">    sz2[x] = sz[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line">    <span class="built_in">memset</span>(son, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(fa));</span><br><span class="line">    idx = ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u;i &lt; n;i ++) <span class="built_in">read</span>(o, u), <span class="built_in">add</span>(o, u), <span class="built_in">add</span>(u, o);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(sz2, sz, <span class="built_in"><span class="keyword">sizeof</span></span>(sz2));</span><br><span class="line">    <span class="built_in">memcpy</span>(son3, son, <span class="built_in"><span class="keyword">sizeof</span></span>(son3));</span><br><span class="line">    <span class="built_in">memcpy</span>(f, fa, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">write</span>(ans);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">1 6</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">5 3</span></span><br><span class="line"><span class="comment">3 7</span></span><br><span class="line"><span class="comment">6 4</span></span><br><span class="line"><span class="comment">4 7</span></span><br><span class="line"><span class="comment">output</span></span><br><span class="line"><span class="comment">73</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 倍增 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022/6/20模拟赛</title>
      <link href="/2022/06/20/2022-6-20%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
      <url>/2022/06/20/2022-6-20%E6%A8%A1%E6%8B%9F%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>被虐爆了QWQ。</p><span id="more"></span><p>某校模拟赛。</p><h1 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h1><p>不会，看到积分就知道这道题完了，毒瘤出题人不给$NTT$模数，本人不会三模数$NTT$，$FFT$乱搞，炸了精度（值域不够），果断使用拆系数，之前没写过，出了一堆锅，写的快吐的时候调出来了，一测极限。只有暴力分，卡了半天卡不动，大常数选手实锤。</p><p>实际被诈骗了，非常简单。</p><h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><p>没看（这次最大的失误）</p><h1 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h1><p>感觉挺神秘的一道题，简述一下题意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个n*n矩阵，每个点上有颜色，求所有子矩阵的颜色种类之和。</span><br><span class="line">n &lt;= 1300</span><br></pre></td></tr></table></figure><p>考场上写了个自认为的$n^4$假了，没改出来，交了个$n^5$移动块的暴力（还不如把写假了的拆贡献交上去），泪目了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长链剖分</title>
      <link href="/2022/06/16/%E9%95%BF%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/2022/06/16/%E9%95%BF%E9%93%BE%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>重装系统时没保存，掉了。</p><p>先鸽了。</p><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 长链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归程</title>
      <link href="/2022/06/16/%E5%BD%92%E7%A8%8B/"/>
      <url>/2022/06/16/%E5%BD%92%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>…</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>前置知识：$kruskal$重构树，这是个什么东西呢，我们都知道并查集为了保证时间复杂度需要按秩合并，这会导致一个什么样的结果呢？路径压缩了，那么如果我们使用$kruskal$算法跑最小生成树的话，我们所加入的边的信息就丢失了，一般来说我们是不需要这些信息的，但是某些时候这些信息就显得无比重要，更具体的$kruskal$重构树可以在某些情况下弥补这个问题，以下是它的建立：</p><ul><li>按照$kruskal$的顺序将所有点连起来，但不是直接像按秩合并那样连起来，我们需要建立一个新节点，将这两个节点<strong>目前</strong>（除了这个节点未合并，不是它本身）的根连起来，然后这个点的点权就是加入边的边权。</li></ul><p>这样有什么好处呢，我们思考一个问题$kruskal$每次加入的边都是当前最优的，而先加入的边所连的点又先合并，故<strong>在$kruskal$重构树里父亲节点一定不如儿子节点优秀</strong>。</p><p>那么我们现在再来思考这个道题，我们首先跑一遍最短路，算出每个点到$1$号节点的最小距离（不能用$SPFA$）然后建一课边权和（以海拔为边权）最大的$kruskal$最大重构树，由于父节点一定比儿子节点更劣的原则，我们找到当前节点的最高的祖宗节点满足：其海拔高度高于题目所给高度，于是这个祖宗节点的子树当前节点都可到，只需查找其中的最小距离即可。</p><p>找祖宗节点可以倍增，最小距离可以预处理，于是这道题$O(n\log n)$就做完了。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;long long, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">7e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, T;</span><br><span class="line">LL dist[N];</span><br><span class="line"><span class="keyword">namespace</span> DFS</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> idx;</span><br><span class="line">    <span class="keyword">int</span> e[N &lt;&lt; <span class="number">1</span>], ne[N &lt;&lt; <span class="number">1</span>], h[N], w[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        idx ++;</span><br><span class="line">        e[idx] = y, ne[idx] = h[x], h[x] = idx, w[idx] = z;</span><br><span class="line">    &#125;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt;q;</span><br><span class="line">    <span class="keyword">int</span> p[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(p));</span><br><span class="line">        <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dist));</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            PII o = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(p[o.second]) <span class="keyword">continue</span>;</span><br><span class="line">            p[o.second] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = h[o.second], j; ~i;i = ne[i])</span><br><span class="line">            &#123;</span><br><span class="line">                j = e[i];</span><br><span class="line">                <span class="keyword">if</span>(dist[j] &gt; dist[o.second] + w[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    dist[j] = dist[o.second] + w[i];</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;dist[j], j&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> o, u, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (Edge b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edge[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> fa[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[N &lt;&lt; <span class="number">2</span>], ne[N &lt;&lt; <span class="number">2</span>], h[N], w[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    idx ++;</span><br><span class="line">    e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x] == x ? x : fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line">LL val[N];</span><br><span class="line"><span class="keyword">int</span> father[N][<span class="number">28</span>], depth[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[x] = depth[y] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x != y)</span><br><span class="line">    &#123;</span><br><span class="line">        father[x][<span class="number">0</span>] = y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">27</span>;i ++)</span><br><span class="line">            father[x][i] = father[father[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[x], j; ~i;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(j, x);</span><br><span class="line">        dist[x] = <span class="built_in">min</span>(dist[x], dist[j]);</span><br><span class="line">        val[x] = <span class="built_in">min</span>(val[j], val[x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q, k, s, last;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">27</span>;i &gt;= <span class="number">0</span>;i --) </span><br><span class="line">        <span class="keyword">if</span>(father[x][i] &amp;&amp; val[father[x][i]] &gt; limit) x = father[x][i];</span><br><span class="line">    <span class="keyword">return</span> dist[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(q, k, s);</span><br><span class="line">    <span class="keyword">int</span> v, p;</span><br><span class="line">    <span class="keyword">while</span>(q --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(v, p);</span><br><span class="line">        v = (LL)(v + k * last - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        p = (LL)(p + k * last) % (s + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">write</span>(last = <span class="built_in">lca</span>(v, p));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    last = <span class="number">0</span>;</span><br><span class="line">    DFS:: <span class="built_in">init</span>();</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line">    <span class="built_in">memset</span>(depth, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(depth));</span><br><span class="line">    <span class="built_in">memset</span>(val, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(val));</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; N;i ++) fa[i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) val[i] = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    cnt = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u, v, w;i &lt;= m;i ++)</span><br><span class="line">        <span class="built_in">read</span>(o, u, v, w), DFS:: <span class="built_in">add</span>(o, u, v), DFS:: <span class="built_in">add</span>(u, o, v), edge[i] = &#123;o, u, w&#125;;</span><br><span class="line">    DFS:: <span class="built_in">dfs</span>();</span><br><span class="line">    <span class="built_in">sort</span>(edge + <span class="number">1</span>, edge + m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m, o, u;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">    &#123;</span><br><span class="line">        o = <span class="built_in">find</span>(edge[i].o), u = <span class="built_in">find</span>(edge[i].u);</span><br><span class="line">        <span class="keyword">if</span>(o == u) <span class="keyword">continue</span>;</span><br><span class="line">        cnt ++;</span><br><span class="line">        val[cnt] = edge[i].w;</span><br><span class="line">        fa[o] = cnt, fa[u] = cnt;</span><br><span class="line">        <span class="built_in">add</span>(o, cnt), <span class="built_in">add</span>(cnt, o), <span class="built_in">add</span>(u, cnt), <span class="built_in">add</span>(cnt, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n + <span class="number">1</span>;i &lt;= cnt;i ++) dist[i] = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(cnt, cnt);</span><br><span class="line">    <span class="built_in">query</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 生成树 </tag>
            
            <tag> kruskal重构树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二轮讲课</title>
      <link href="/2022/06/15/%E7%AC%AC%E4%BA%8C%E8%BD%AE%E8%AE%B2%E8%AF%BE/"/>
      <url>/2022/06/15/%E7%AC%AC%E4%BA%8C%E8%BD%AE%E8%AE%B2%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<p>自己作死把博客搞掉了（又掉了），只有重写了$QWQ$。</p><span id="more"></span><h1 id="块状链表"><a href="#块状链表" class="headerlink" title="块状链表"></a>块状链表</h1><p>众所周知，数组查询方便，但插入和删除困难（复杂度极高 $O(n)$ ）；而<a href="https://so.csdn.net/so/search?q=%E9%93%BE%E8%A1%A8&spm=1001.2101.3001.7020">链表</a>恰恰相反，索引困难，而插入和删除简单。</p><p>那么当我们遇到既要动态插入删除，又要快速索引元素的问题时，有没有一种<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&spm=1001.2101.3001.7020">数据结构</a>能够同时快速支持这两个操作呢？</p><p>以我们老祖宗的强大的智慧，答案当然是有，它就是——<del>序列之王<code>Splay</code></del>块状链表。</p><p>听到这个名字，大概都能猜到它的主要思想：分块。</p><p>它将整个数列分成$\sqrt n$块，每一块$\sqrt n$个数用链表串起来，然后再用一个主链表将他们都传起来，具体的它长这样：</p><p><img src="1.png" alt="image"></p><p>仔细想想，无论怎么操作都是$\sqrt n$（维护前缀和的分裂不是）的。</p><h2 id="vector实现："><a href="#vector实现：" class="headerlink" title="vector实现："></a>vector实现：</h2><ul><li><p><strong>建立块状链表。</strong> 依次提取数组的前$B$元素当一个 $vector$ 添加。</p></li><li><p><strong>找到第 k 元素。</strong>记录每vector维护的范围，确定$k$所在区间，用$k-l$即可找到（$l$是这个$vector$的首项）。</p></li><li><p><strong>插入。</strong>首先，我们需要知道插入的位置。为了方便默认是在给定插入位置的前面插入；直接用$vector::insert$。为了保证时间复杂度，如果插入完导致这个$vector$大于$2B$，则在$B$处分裂这个$vector$。具体怎么分裂：</p><ul><li><p>在块状链表里找到这个 $vector$ 接下来的 $vector$ 在接下来的 $vector$ 之前插入一个新建的 $vector$。</p></li><li><p>这个新建 $vector$ 应该保存刚才插入的 $vector$ 的 $B$ 元素后缀，也就是$vector::end()-B$ 这个 $iterator$ 区间。我们用 $B$ 分裂来平均分裂后的 $vector$ 长度，并同时保证没有 $vector$ 长度超过 $B$。</p></li><li><p>建完新的 $vector$，再删除这个区间。</p></li></ul></li><li><p><strong>删除。</strong> 同样找到位置，利用 $vector::erase$如果这个 $vector$ 的大小变为零，把这个 $vector$ 从块状链表删除。</p></li></ul><p>$B$取$\sqrt n$</p><p><del>(写死我了)</del></p><h2 id="关于主链"><a href="#关于主链" class="headerlink" title="关于主链"></a>关于主链</h2><p>其实主链没有必要用$vector$强行插入，在每一块中间记录本块左右块的编号，然后直接在队尾加即可（常数小的一批，在下面的题中表现非常优秀）</p><h2 id="例题：带插入区间K小值"><a href="#例题：带插入区间K小值" class="headerlink" title="例题：带插入区间K小值"></a><a href="https://www.luogu.com.cn/problem/P4278">例题：带插入区间K小值</a></h2><p>这道题全凭各位常数。</p><p>过不了就删掉$split$函数。</p><p><img src="2.png" alt="image"></p><p>本人并没有被卡常，所以被卡常应该不关我事？</p><h1 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h1><p>分块之神$Dyd$曾经说过：分块就是一种套路，你把代码每一部分换成暴力，调出一部分就全部调出来了，所以分块特别好调。</p><p>蒟蒻不懂，可能这就是蒟蒻比巨佬菜的原因。</p><h2 id="树分块"><a href="#树分块" class="headerlink" title="树分块"></a>树分块</h2><p>一般可以用其他做法碾压树分块，所以题目较少。</p><h3 id="例题：P6177-Count-on-a-tree-II-【模板】树分块"><a href="#例题：P6177-Count-on-a-tree-II-【模板】树分块" class="headerlink" title="例题：P6177 Count on a tree II/【模板】树分块"></a>例题：<a href="https://www.luogu.com.cn/problem/P6177">P6177 Count on a tree II/【模板】树分块</a></h3><p>树上数数的不带修的强制在线的经典问题（<del>菊花图，蒲公英可以轻松卡掉，但本人也不是很懂怎么卡</del>）。</p><p>首先有一种更为简单（神秘）的做法：对于每个点拉一个$bitset$，比较显然是用轻重链剖分来维护，但是这样复杂度过大（感觉应该能过了），考虑怎么优化：对于每一条重链进行分块，预处理出每一块内$bitset$的并，复杂度：$O(m\log n \sqrt n \frac{n}{w})$甚至跑不过上面的东西，瓶颈在多块的合并，之后的操作，据题解所说可以用<code>ST</code>加速，但因它的理论复杂度应该是跑不过这道题的，只不过这东西跑不满，常数小，拿了最优解而已，我们不再深究，有兴趣的童鞋可以去看看巨佬<a href="https://www.luogu.com.cn/user/128141"><strong>Aestas16</strong></a>的题解。</p><p>这里只是举个例，证明树分块的时间不怎么滴。</p><p>下面才是正题。</p><p>什么是树分块</p><p>树分块就是像序列分块一样设置一个阈值$B$，然后在树上随机撒$\frac{n}{B}$个点，使其成为关键节点，然后使每一个点到距离其最近的关键节点的距离不超过$B$，这样我们就可以首先预处理出每两个关键节点之间的信息（所以树分块支持不了大量的修改操作），每次将需要计算的两点的距离最近的关键节点的信息拿出来，其他信息暴力统计即可，复杂度：$O(B^2+qB+\frac{n^2}{B})$，弱爆了。</p><p>然后重点讲一下撒点：</p><p>首先我们将所有的非关键节点入队，每次取出其中深度最大的节点，若他的节点的$1\sim B$级祖先都没有关键节点，就将它的$S$级祖先标记为关键节点，由上述方法可知每一次标记至少能控制$B$个节点，这些节点都不会被标记，且从这个节点出发最大移动距离最多为$B$，满足了我们的需要。</p><p>接下来，考虑对一条到根的路径上的所有关键点用$bitset$维护出他们两两之间的颜色，处理的时候我们可以使用递推的方式即：$b_{i,j}=b_{i,j-1}orb_{i+1,j-1}$，所以我们可以用<strong>最多</strong>$O(n)$的时间统计出每相邻关键节点的答案，其他的答案再两两统计，由于点对最多有$\frac{n^2}{B^2}$，所以预处理的复杂度为$O(\frac{n^2}{B}+\frac{n^3}{wB^2})\approx O(n\sqrt n+\frac{n^2}{w})$（感觉没前途啊）。</p><p>之后就简单了，将答案拆成四部分即可：</p><p><img src="3.png" alt="image"></p><p>其中红色的节点表示关键节点，绿色节点表示查询节点，查询节点到最深的关键节点暴力做，最高的关键节点之间也暴力做，那么最终复杂度为：$O((n+m)\sqrt n + \frac{n^2+nm}{w})$。<del>（不知到为什么被SPOJ卡掉了）</del></p><p>温馨提示，除非想不到其他解法，还是别写这个了。</p><h2 id="带修改莫队"><a href="#带修改莫队" class="headerlink" title="带修改莫队"></a>带修改莫队</h2><p>总所周知，普通的莫队是不能支持修改操作的，但是有些题目它就是让你支持修改，而且除了莫队你还不会其他的算法，这个时候我们就需要对莫队进行改进，让其支持修改。</p><p>首先思考一个问题，如果所有的修改操作都在查询操作之前，这个问题该怎么解决呢。</p><p>这其实是一个$sb$问题，将所有的修改操作维护完了，直接上普通莫队就行了。</p><p>问题的关键来了，如何使我们的修改操作重复执行的操作尽可能少。</p><p>有的人可能就会说了，将任意两段连续的修改操作之间的询问操作统计起来跑莫队不久行了么。</p><p>这样虽然可以使修改操作执行的次数很少，但是当询问操作很少的时候（比如两次），可以轻松将复杂度卡到线性（不带根号的原因是因为询问很少），这样就能使复杂度接近$O(nm)$很挫。</p><p>我们考虑定义三维：$[l, r, time]$，意味着查询的起始，终点，需要完成前$time$次修改操作。</p><p>根据分块的时间复杂度平衡思想，首先考虑将序列分成$len$块，考虑将$l$，$r$都放入块中，首先按$l$的块的编号排序，然后$l$的块的序号相同的询问再按$r$的块的编号排序，$l$和$r$的块的编号都相等的再按需要修改的次数升序排序。</p><p>首先为什么要这么做呢，一共有$len$块，令每块长度为$limit$（则$n$可以粗略的认为是$len\times limit$），那么移动$l$和$r$的时间复杂度为$len^2\times limit=n\times len$，之后考虑修改操作的进行次数，令总修改次数为$cnt$次，那么最坏情况下移动次数为$len^2*cnt$，双方取平衡，得到$limit=\sqrt[3]{n^4cnt}$。</p><p>例题：<a href="https://www.luogu.com.cn/problem/P1903">P1903 国家集训队 数颜色 / 维护队列</a></p><h2 id="树上莫队"><a href="#树上莫队" class="headerlink" title="树上莫队"></a>树上莫队</h2><p>我们回顾一下树分块的那道题，我们发现这样的做法及其丑陋（<del>但支持强制在线这一点就很香</del>），我们想一想如果不是强制在线的话我们应该怎么搞，首先在树上进行莫队操作的主要难点，一般来说能将树转化成序列的我们优先考虑，思考这题如何转成序列，我们使用一个叫欧拉序的东西，具体构造方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对这棵树进行dfs，将任何第一次访问的节点加入序列，当节点回溯时再将这个节点加入序列。</span><br></pre></td></tr></table></figure><p>我们回过头来重新观察这道题，设$i$节点在序列中第一次出现是$st[i]$，第二次出现是$ed[i]$，那么对于对于任意询问节点$x$，$y$，设$st[x]&lt;st[y]$，分类讨论可以得到。</p><p>1.$lca(x,y)=x$，画图可以得到答案就是序列中$ed[x]\sim st[y]$之间所有只出现过一次的数所包含的不同种类（所以第一次出现就增加第二次出现就减少）。</p><p>2.$lca(x,y) \ne x$，不难发现此时$y$不可能是$x$的父亲<del>（不然的话为什么st[y]不在st[x]前面）</del>，所以画个图分析，此时的$ed[x] \sim st[y]$没有包含$lca(x,y)$，特判即可。</p><p>还有一道和这个题一摸一样的拓展版（<del>多了修改，但无伤大雅</del>）：<a href="https://www.luogu.com.cn/problem/P4074">[WC2013] 糖果公园</a>，快去切掉吧。</p><h2 id="倍增分块-底层线段树-底层分块"><a href="#倍增分块-底层线段树-底层分块" class="headerlink" title="倍增分块+底层线段树+底层分块"></a>倍增分块+底层线段树+底层分块</h2><p><del>自己都在怀疑赛事怎么可能有人写出来</del></p><p>$5e5$的神仙分块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一个数列，实现如下两种操作。</span><br><span class="line">1.将[l,r]区间中所有&gt;x的数减去x。</span><br><span class="line">2.询问区间[l,r]的和，最小值，最大值。</span><br><span class="line">值域1e9，序列长度5e5</span><br></pre></td></tr></table></figure><p>一看这题的第二问，哈，我会，线段树。</p><p>冷静下来看第一问，*?~&amp;%$#&amp;^。</p><p>毕竟是$lxl$的题，我们首先得往分块上想。</p><p>仔细思考之后就会发现这题必须要用数据结构维护值域和序列。</p><p>听说这题可以用分块套Splay（不愧是序列之王）<del>只要你没有常数</del>。</p><p>因为值域$10^9$，考虑一种神奇的分块：<strong>倍增分块</strong>，这是一种什么样的分块呢，就是将值在$[B^i,B^{i+1})$的数分在一起。</p><p>思考为什么考虑这种分块：</p><p>我们使用线段树暴力的时候，一定会先建一课序列线段树。</p><ul><li>如果区间的最大值$\le x$直接跳过。</li><li>如果区间的最小值$&gt; x$打上懒标记之后返回。</li><li>递归进入子区间。</li></ul><p>仔细想一想，如果序列是一大一小交替排布，每一次更改就是大常数的$O(n)$，跑不过暴力。</p><p>我们假设已经将值域分成了$cnt$个块，每个块里都有一个序列线段树。</p><p>这样整体上看最坏复杂度为$n\times cnt \times \log n$</p><p>但是思考分块的作用。</p><ul><li>如果一个块上界$\le x$直接跳过。</li><li>如果一个块的下届$&gt; x$，这一部分将被重构，那么这一部分复杂度是：$m\times cnt \times \log n$的</li><li>不然就递归。</li></ul><p>我们发现这样做了之后前两种情况的复杂度之和块的数量有关，但是，第三种情况的最差复杂度是线性的。</p><p>我们假设情况三的块长为$len$，由上我们发现每次修改最多会有一块成为情况三，所以最多就会操作$cnt \times \frac{len}{x}$次，我们将这式子拆开分析，首先如果每个块都已经因为上面的操作变成同一个值域了的话，显然最多会有$cnt$块需要递归，然后每一块内我们最多递归$\frac{len}{x}$次（之后就减为1了）。</p><p>考虑最叼钻的情况，即$\forall x=l$的情况，$l$就是当前块的左边界，我们就要让$n \times \log n \times cnt \times \frac{len}{l}$最小，考虑固定$\frac{len}{l}$，$cnt=\log_B^{10^9}$，最终的复杂度：<br>$$<br>O((n+m) \times \log_B{10 ^ 9} \times \log n+n \times B \times \log n \times \log_B^{10^9} )<br>$$<br><del>打开几何画板，但是并没有画出来</del>，$B$的理论最优为$16$，实测的话：应该取$2 \sim 4$。</p><p>之后就会发现卡空间了，线段树的空间主要消耗在叶子，我们可以设置一个常数$K$，让线段树$\le K$的区间的处理直接变成下传标记在序列上暴力，之后再上传。我们可以这样很可观地以大常数的时间代价换取空间（<del>这就是传说中底层分块</del>）。</p><p>这样的话大家就可以完成<a href="https://www.luogu.com.cn/problem/P7447">rgxsxrs</a>啦。</p><p>分块就先这样告一段落了，我们进入下一个专题。</p><h1 id="二维线段树"><a href="#二维线段树" class="headerlink" title="二维线段树"></a>二维线段树</h1><p>这个东西考的不多（不如线段树套平衡树），时间复杂度：大常数的$n \log^2 n$，空间复杂度：$n\log n$。</p><p>具体是干啥用的呢，是维护矩阵信息用的<del>（为啥不套平衡树）</del>，具体一般是对题目所给的二维的其中一维建线段树，再在这个线段树上的叶子节点建立另一颗线段树，维护另一维的信息，然后查询即可。</p><p>例题：[Mosaic](<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4819">Problem - 4819 (hdu.edu.cn)</a>)。</p><p>这里简述一下题意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多组数据（T &lt;= 10），每组数据需要维护一个正方形矩阵（less than: 800*800），然后多次询问，每次询问一个子矩阵中的最大值+最小值/2向下取整。</span><br><span class="line">time limit: 5000ms</span><br></pre></td></tr></table></figure><p>是不是感觉很无脑。</p><p>网络上还流传着另一种二位线段树的写法：四叉树写法，这里不过多介绍（感觉并不优秀），只引用一下定义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">二维线段树是一棵 四叉树，树上每个结点保存 一个矩形和一个域，非叶子结点一定有 二或四 个儿子结点，儿子结点表示的 四个矩形交集为空，并集为父结点表示的 矩形；叶子结点表示的矩形长宽均为1，域则表示了需要求的数据，每个父结点的域可以通过 四个儿子结点得出。</span><br></pre></td></tr></table></figure><h1 id="矩阵求逆"><a href="#矩阵求逆" class="headerlink" title="矩阵求逆"></a>矩阵求逆</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>令$A$是一个矩阵，如果存在一个矩阵$B$满足：<br>$$<br>BA=I<br>$$<br>则称$A$矩阵可逆，且$B$称为$A$的逆矩阵。</p><h2 id="如何求逆：高斯-约旦消元"><a href="#如何求逆：高斯-约旦消元" class="headerlink" title="如何求逆：高斯-约旦消元"></a>如何求逆：高斯-约旦消元</h2><h3 id="一堆证明"><a href="#一堆证明" class="headerlink" title="一堆证明"></a>一堆证明</h3><h4 id="矩阵的逆要么没有要么唯一"><a href="#矩阵的逆要么没有要么唯一" class="headerlink" title="矩阵的逆要么没有要么唯一"></a>矩阵的逆要么没有要么唯一</h4><p>首先要知道若$A$可逆，则逆唯一。</p><p>证明：若$B$和$C$都是$A$的逆，由定义：$AB=BA=I,AC=CA=I$</p><p>则：$B=IB=(AC)B=(AB)C=C$，即$B=C$，证毕。</p><h4 id="判断矩阵是否可逆"><a href="#判断矩阵是否可逆" class="headerlink" title="判断矩阵是否可逆"></a>判断矩阵是否可逆</h4><h5 id="行列式判断法"><a href="#行列式判断法" class="headerlink" title="行列式判断法"></a>行列式判断法</h5><p>设$n$阶矩阵：<br>$$<br>A=\begin{bmatrix}<br>a_{1,1} &amp; a_{1,2} &amp;a_{1,3} &amp; \dots &amp; a_{1, n}\\<br>a_{2,1} &amp; a_{2,2} &amp;a_{2,3} &amp; \dots &amp; a_{2, n}\\<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots\\<br>a_{n,1} &amp; a_{n,2} &amp;a_{n,3} &amp; \dots &amp; a_{n, n}\\<br>\end{bmatrix}<br>$$<br>构造其代数余子式：<br>$$<br>A^*=\begin{bmatrix}<br>A_{1,1} &amp; A_{1,2} &amp;A_{1,3} &amp; \dots &amp; A_{1, n}\\<br>A_{2,1} &amp; A_{2,2} &amp;A_{2,3} &amp; \dots &amp; A_{2, n}\\<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots\\<br>A_{n,1} &amp; A_{n,2} &amp;A_{n,3} &amp; \dots &amp; A_{n, n}\\<br>\end{bmatrix}<br>$$<br>代数余子式和余子式：</p><p>定义： 在<a href="https://baike.baidu.com/item/n%E9%98%B6%E8%A1%8C%E5%88%97%E5%BC%8F/3705756">n阶行列式</a>中，划去元aij所在的第i行与第j列的元，剩下的元不改变原来的顺序所构成的n-1阶行列式称为元aij的余子式。</p><p>数学表示上计作$M_{i,j}$。</p><p><strong>余子式定义</strong></p><p> $a_{i,j}$的代数余子式 [3] ：$A_{i,j}=(-1)^{i+j}M_{i,j}$。</p><h1 id="行列式及其运算"><a href="#行列式及其运算" class="headerlink" title="行列式及其运算"></a>行列式及其运算</h1><h1 id="线性相关与矩阵的逆"><a href="#线性相关与矩阵的逆" class="headerlink" title="线性相关与矩阵的逆"></a>线性相关与矩阵的逆</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 块状链表 </tag>
            
            <tag> 分块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚树</title>
      <link href="/2022/06/05/%E8%99%9A%E6%A0%91/"/>
      <url>/2022/06/05/%E8%99%9A%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>小清新优化思想。</p><span id="more"></span><p>是否有过这样的经历，一棵庞大的树，想到一个单次询问很牛的复杂度算法，但是树的大小太大，题目又毒瘤又多次询问，这时候你发现每次询问又只和一些点有关系，这时虚树就应需而生了。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>虚树就是在满足题目要求的情况下，将某一部分的节点抽出来，重新建立成一棵树，然后在上面进行原来的操作，从而以更小的复杂度，实现我们需要实现的操作。</p><h1 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h1><p>有两种建发，一种是用单调栈建，另一种使用排序建，这里使用从 p_b_p_b 那里学到的做法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先先将所有重要点按照dfn序排序，然后将每一个数和自己前缀的lca加入队列，再次按照dfn排序，这个时候每个点和自己前缀的lca就是自己在虚树中的父亲。</span><br></pre></td></tr></table></figure><p>感觉起来挺对的，这一定能使所有点连成一棵树。</p><h1 id="例题：CF613D-Kingdom-and-its-Cities"><a href="#例题：CF613D-Kingdom-and-its-Cities" class="headerlink" title="例题：CF613D Kingdom and its Cities"></a>例题：<a href="https://www.luogu.com.cn/problem/CF613D">CF613D Kingdom and its Cities</a></h1><p>一句话题意：给你一颗树，每次选中一些点，让你删除最少的非选择点，使所有重要点不连通，问最少删除的点的数量。</p><p>$n \le 1e5,\sum k \le 1e5$。</p><p>看到这个数据范围，这个$\sum k$，果断在询问上下手脚。</p><p>观察这幅图：</p><p><img src="1.png" alt="image"></p><p>我们发现左子树是完全没有必要遍历的，哪里啥都没有，所以我们考虑构造虚树，我们发现建立虚树之后每个重要节点删去所需代价没有变，所以正确性也是有保证的。</p><p>时间复杂度： $O(\sum k\log\sum k)$。</p><p>常数有点小大。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>, Inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, T;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[N &lt;&lt; <span class="number">1</span>], ne[N &lt;&lt; <span class="number">1</span>], h[N], depth[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    idx ++;</span><br><span class="line">    e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[N], cnt, lg[N &lt;&lt; <span class="number">1</span>], f[N &lt;&lt; <span class="number">1</span>][<span class="number">22</span>], father[N], id[N];</span><br><span class="line"><span class="keyword">int</span> hh;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = id[x], r = id[y], len;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="built_in">swap</span>(l, r);</span><br><span class="line">    len = lg[r - l + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(depth[f[l][len]] &lt; depth[f[r - (<span class="number">1</span> &lt;&lt; len) + <span class="number">1</span>][len]]) <span class="keyword">return</span> f[l][len];</span><br><span class="line">    <span class="keyword">return</span> f[r - (<span class="number">1</span> &lt;&lt; len) + <span class="number">1</span>][len];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mark[N], type;</span><br><span class="line"><span class="keyword">namespace</span> dp&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; edge[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = hh, o;i &gt;= <span class="number">2</span>;i --) </span><br><span class="line">        &#123;</span><br><span class="line">            o = <span class="built_in">lca</span>(a[i], a[i - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(a[i] == o) <span class="keyword">continue</span>;</span><br><span class="line">            edge[o].<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, ans = <span class="number">0</span>, op;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : edge[x])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(depth[i] &lt; depth[x]) <span class="keyword">continue</span>;</span><br><span class="line">            op = <span class="built_in">dp</span>(i);</span><br><span class="line">            ans += op;</span><br><span class="line">            <span class="keyword">if</span>(mark[x] &amp;&amp; mark[i]) ans ++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mark[i]) res ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res &gt; <span class="number">1</span>) ans ++;</span><br><span class="line">        <span class="keyword">if</span>(res == <span class="number">1</span>) mark[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dfn[x] &lt; dfn[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    hh = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o;i &lt;= m;i ++) <span class="built_in">read</span>(o), a[++ hh] = o, mark[o] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= hh;i ++) </span><br><span class="line">        <span class="keyword">if</span>(mark[father[a[i]]] &amp;&amp; father[a[i]] != a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= hh;j ++) mark[a[j]] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>), <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + hh + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = hh, o;i &gt;= <span class="number">2</span>;i --) </span><br><span class="line">    &#123;</span><br><span class="line">        o = <span class="built_in">lca</span>(a[i], a[i - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(o == a[i] || o == a[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        a[++ hh] = o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + hh + <span class="number">1</span>);</span><br><span class="line">    hh = <span class="built_in">unique</span>(a + <span class="number">1</span>, a + hh + <span class="number">1</span>) - (a + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + hh + <span class="number">1</span>, cmp);</span><br><span class="line">    dp:: <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">write</span>(dp:: <span class="built_in">dp</span>(a[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= hh;i ++) dp:: edge[a[i]].<span class="built_in">clear</span>(), mark[a[i]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> now[N &lt;&lt; <span class="number">1</span>], tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[x] = depth[y] + <span class="number">1</span>;</span><br><span class="line">    dfn[x] = ++ cnt, now[++ tot] = x, id[x] = tot, father[x] = y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[x], j; ~i;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(j, x);</span><br><span class="line">        now[++ tot] = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lg[<span class="number">1</span>] = <span class="number">0</span>, lg[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i &lt;= tot;i ++) lg[i] = lg[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= tot;i ++) f[i][<span class="number">0</span>] = now[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; <span class="number">22</span>;j ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= tot;i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(depth[f[i][j - <span class="number">1</span>]] &lt; depth[f[i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)][j - <span class="number">1</span>]]) f[i][j] = f[i][j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> f[i][j] = f[i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u;i &lt; n;i ++) <span class="built_in">read</span>(o, u), <span class="built_in">add</span>(o, u), <span class="built_in">add</span>(u, o);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 虚树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3502 [POI2010]CHO-Hamsters</title>
      <link href="/2022/06/04/P3502-POI2010-CHO-Hamsters/"/>
      <url>/2022/06/04/P3502-POI2010-CHO-Hamsters/</url>
      
        <content type="html"><![CDATA[<p>…</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>又是一道经典的矩阵快速幂在图论计数上的经典应用（<del>自己鸽了这么多道，终于记得写了</del>）。</p><p>首先指明一个显然的结论：$S$一定由这$n$个字符串中的一部分字符串首尾拼接组成。</p><p>得到这个结论后，我们将这$n$个字符串两两组合，找出他们首尾相接时最少的代价。</p><p>例如，字符串$A=abcabc$和字符串$B=bcda$相组合，$B$接在A后面所需的最小代价就是2。</p><p>然后我们需要在这个无向图任取一个起点上走$m-1$条边，使起点的长度+图中跑出来的代价最小。</p><p>观察我们$dp$的转移方程：$\ \forall i,j,k \rarr f[i][j]=\min (f[i][k]+f[k][j])$。</p><p>这个东西显然就是一个矩阵乘，写个矩阵加速幂就结束了。</p><p>复杂度为$O(n^2\sum len + n^3 \log m)$的，可以使用$hash$做到$O(n^2\log \sum len + n^3 \log m)$。</p><p>坑点：</p><ul><li>需要$long \ long$。</li><li>从$i$和$i$的代价为$len[i]-ne[i][len[i]]$。</li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200</span> + <span class="number">5</span>, M = <span class="number">1e5</span> + <span class="number">5</span>, mod = <span class="number">2017</span>;</span><br><span class="line"><span class="keyword">const</span> LL Inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, t;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    LL a[N][N];</span><br><span class="line">    Node <span class="keyword">operator</span>* (Node b)</span><br><span class="line">    &#123;</span><br><span class="line">        Node c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j ++) c.a[i][j] = Inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= n;k ++) </span><br><span class="line">                    c.a[i][j] = <span class="built_in">min</span>(c.a[i][j], a[i][k] + b.a[k][j]);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;b;</span><br><span class="line"><span class="keyword">char</span> s[N][M];</span><br><span class="line"><span class="keyword">int</span> ne[N][M], len[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">get_ne</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>;i &lt;= len[x];i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; s[x][j + <span class="number">1</span>] != s[x][i]) j = ne[x][j];</span><br><span class="line">        <span class="keyword">if</span>(s[x][j + <span class="number">1</span>] == s[x][i]) j ++;</span><br><span class="line">        ne[x][i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len[x];i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; s[y][j + <span class="number">1</span>] != s[x][i]) j = ne[y][j];</span><br><span class="line">        <span class="keyword">if</span>(s[y][j + <span class="number">1</span>] == s[x][i]) j ++;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Node <span class="title">qpow</span><span class="params">(Node x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node res;</span><br><span class="line">    <span class="built_in">memset</span>(res.a, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(res.a));</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">    res = x, k --;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * x;</span><br><span class="line">        x = x * x;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">char</span> c[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i] + <span class="number">1</span>), len[i] = <span class="built_in">strlen</span>(s[i] + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">get_ne</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)</span><br><span class="line">            <span class="keyword">if</span>(i != j) b.a[i][j] = len[j] - <span class="built_in">kmp</span>(i, j);</span><br><span class="line">            <span class="keyword">else</span> b.a[i][j] = len[j] - ne[i][len[j]];</span><br><span class="line">    b = <span class="built_in">qpow</span>(b, m - <span class="number">1</span>);</span><br><span class="line">    ans = Inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, b.a[i][j] + len[i]);</span><br><span class="line">    <span class="built_in">write</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 矩阵快速幂 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1659D</title>
      <link href="/2022/06/04/CF1659D/"/>
      <url>/2022/06/04/CF1659D/</url>
      
        <content type="html"><![CDATA[<p><del>先鸽了</del>，补完了。</p><p>有$O(n)$的做法，不会，就写$n \log n$的。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先我们考虑从最后一位开始，逐步确定整个序列。</p><p>为什么这么做呢，主要是因为发现将前面所有数字加起来除以$n$就是这个序列中一的个数，同时，我们看一下最后一位的大小是否大于$n-1$就可以判断最后一位是否存在$1$，然后就可以将最后一次排序的贡献从最后一次排序中删除，依次向前计算即可。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, T, k;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(x) (x &lt;&lt; 1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> r(x) (x &lt;&lt; 1 | 1)</span></span><br><span class="line">    <span class="keyword">int</span> l, r, v, flag;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].v = tr[<span class="built_in">l</span>(x)].v + tr[<span class="built_in">r</span>(x)].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].v += (tr[x].r - tr[x].l + <span class="number">1</span>) * flag;</span><br><span class="line">    tr[x].flag += flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tr[x].flag) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">change</span>(<span class="built_in">l</span>(x), tr[x].flag);</span><br><span class="line">    <span class="built_in">change</span>(<span class="built_in">r</span>(x), tr[x].flag);</span><br><span class="line">    tr[x].flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x] = &#123;l, r, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[x].v = a[l], <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= tr[x].l &amp;&amp; tr[x].r &lt;= r) <span class="keyword">return</span> <span class="built_in">change</span>(x, v);</span><br><span class="line">    <span class="built_in">pushdown</span>(x);</span><br><span class="line">    <span class="keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid) <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span>, l, r, v);</span><br><span class="line">    <span class="keyword">if</span>(mid &lt; r) <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, v);</span><br><span class="line">    <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= tr[x].l &amp;&amp; tr[x].r &lt;= r) <span class="keyword">return</span> tr[x].v;</span><br><span class="line">    <span class="built_in">pushdown</span>(x);</span><br><span class="line">    <span class="keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid) res += <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid) res += <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n, res = <span class="number">0</span>;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">        &#123;</span><br><span class="line">            res = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, i) / i;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[i] = res;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(res) <span class="built_in">modify</span>(<span class="number">1</span>, i - res + <span class="number">1</span>, i, <span class="number">-1</span>);</span><br><span class="line">ans[i] = <span class="built_in">query</span>(<span class="number">1</span>, i, i) / (i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">write</span>(ans[i]), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CF </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4655 [CEOI2017]Building Bridges</title>
      <link href="/2022/05/30/P4655-CEOI2017-Building-Bridges/"/>
      <url>/2022/05/30/P4655-CEOI2017-Building-Bridges/</url>
      
        <content type="html"><![CDATA[<p>精度永远是这么的难调。</p><span id="more"></span><p>$O(n^2)$的暴力<code>dp</code>几乎是送的，不讲。</p><p>设<code>sum[i]</code>表示前<code>i</code>个<code>w</code>的和，<code>f[j]</code>表示以当前点为终点的最优答案。</p><p>所以答案就是：$f(i)= \min (f(j)+sum(i)-sum(j)-w(i)+(h(i)-h(j))^2)$。</p><p>推导一波：<br>$$<br>\begin{aligned}<br>    f(i) - sum + w(i) - h(i)^2 = \min(f(j)-sum(j)-2h(i)h(j)+h(j)^2)<br>\end{aligned}<br>$$<br>令右边这堆东西为 <code>p(j)</code>。</p><p>那么当<code>p(j)&lt;p(k)</code>时：<br>$$<br>\begin{aligned}<br>    p(j)&amp;&lt;p(k) \\<br>    f(j)-sum(j)-2h(i) h(j)+h(j)^2 &amp;&lt; f(k)-sum(k)-2h(i)h(k)+h(k)^2\\<br>    f(j)-sum(j)+h(j)^2-(f(k)-sum(k)+h(k)^2)&amp;&lt;(2h(j)-2h(k))h(i) \\<br>    \frac{f(j)-sum(j)+h(j)^2-(f(k)-sum(k)+h(k)^2)}{2h(j)-2h(k)}&amp;&lt;h(i)<br>\end{aligned}<br>$$<br>这就是很经典的斜率优化$\frac{ \Delta y}{\Delta x}=k$的形式，注意<code>h(i)</code>并不单增，使用<code>cdq</code>分治解决。</p><p>注意精度，凸包形式，斜率不存在的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL Inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> esp = <span class="number">1e-8</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">com</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> <span class="comment">// here</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x - y) &lt;= esp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    LL h, sum, f, w, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (Node b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> h &lt; b.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="keyword">int</span> hh, tt, q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">get_k</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL x1 = <span class="number">2</span> * a[x].h, x2 = <span class="number">2</span> * a[y].h;</span><br><span class="line">    LL y1 = a[x].f - a[x].sum + a[x].h * a[x].h, y2 = a[y].f - a[y].sum + a[y].h * a[y].h;</span><br><span class="line">    <span class="keyword">if</span>(x1 == x2) <span class="keyword">return</span> y1 &lt; y2 ? Inf : -Inf; <span class="comment">// here</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)(y2 - y1) / (<span class="keyword">double</span>)(x2 - x1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(hh &lt; tt &amp;&amp; <span class="built_in">com</span>(<span class="built_in">get_k</span>(q[tt], x), <span class="built_in">get_k</span>(q[tt - <span class="number">1</span>], q[tt])) &lt;= <span class="number">0</span>) tt --; <span class="comment">// here</span></span><br><span class="line">    q[++ tt] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">answer</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a[x].h - a[y].h) * (a[x].h - a[y].h) + a[x].sum - a[y].sum - a[x].w + a[y].f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp_id</span><span class="params">(Node x, Node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.id &lt; y.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cdq</span>(l, mid);</span><br><span class="line">    <span class="built_in">sort</span>(a + l, a + mid + <span class="number">1</span>), <span class="built_in">sort</span>(a + mid + <span class="number">1</span>, a + r + <span class="number">1</span>);</span><br><span class="line">    hh = <span class="number">1</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l;i &lt;= mid;i ++) <span class="built_in">add</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = mid + <span class="number">1</span>;i &lt;= r;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(hh &lt; tt &amp;&amp; <span class="built_in">com</span>(a[i].h, <span class="built_in">get_k</span>(q[hh], q[hh + <span class="number">1</span>])) &gt;= <span class="number">0</span>) hh ++;</span><br><span class="line">        a[i].f = <span class="built_in">min</span>(a[i].f, <span class="built_in">answer</span>(i, q[hh]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + mid + <span class="number">1</span>, a + r + <span class="number">1</span>, cmp_id);</span><br><span class="line">    <span class="built_in">cdq</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i].h), a[i].f = Inf, a[i].id = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i].w), a[i].sum = a[i - <span class="number">1</span>].sum + a[i].w;</span><br><span class="line">    a[<span class="number">1</span>].f = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cdq</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">write</span>(a[n].f);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 斜率优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF662C Binary Table</title>
      <link href="/2022/05/29/CF662C-Binary-Table/"/>
      <url>/2022/05/29/CF662C-Binary-Table/</url>
      
        <content type="html"><![CDATA[<p><code>FWT</code>不会，贺的。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先我们观察数据范围，发现<code>n</code>和<code>m</code>的范围严重不平衡，得出结论需要枚举每一行是否翻转,提前将每一列状压后我们可以再对每一列贪心，这样就得到了暴力的$O(m2^n)$。</p><p>这个东西发现我们是动不了的，考虑转化这个式子，首先将每一列转化成<code>1</code>的个数最少的状态，枚举每一列显然是不可做的，为了将这个<code>m</code>替换掉，我们将每一行的是否翻转状压成一个二进制数,定义有<code>g(x)</code>个列的状态为<code>F(x)</code>，最后答案就是：$\min(\sum S\sum x [Y=x \ xor \ S]F(Y)*g(x))$，<code>F</code>可以预处理 ，这样枚举的就变成<code>S</code>和<code>x</code>了，复杂度就变为$O(2^{2n})$，但依然无法通过此题。</p><p>再次考虑转化，大佬们都已经看出其中的蹊跷了，这就是<code>FWT</code>模板，套上去就完事了。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">21</span>, M = <span class="number">1e5</span> + <span class="number">5</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N][M], b[N];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1</span> &lt;&lt; N], h[<span class="number">1</span> &lt;&lt; N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">popcount</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = x; i;i -= i &amp; (-i)) cnt ++;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FWT_XOR</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">-1</span>) op = <span class="number">499122177</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>, a, b;j &lt; (<span class="number">1</span> &lt;&lt; n);j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j &gt;&gt; i &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">a = x[j], b = x[j | (<span class="number">1</span> &lt;&lt; i)];</span><br><span class="line">x[j] = <span class="number">1ll</span> * (a + b) % mod * op % mod;</span><br><span class="line">x[j | (<span class="number">1</span> &lt;&lt; i)] = <span class="number">1ll</span> * (a - b + mod) % mod * op % mod;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n, m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c != <span class="string">&#x27;0&#x27;</span> &amp;&amp; c != <span class="string">&#x27;1&#x27;</span>) c = <span class="built_in">getchar</span>();</span><br><span class="line">a[i][j] = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)</span><br><span class="line">b[i] = (b[i] &lt;&lt; <span class="number">1</span>) + a[j][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++) f[b[i]] ++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">1</span> &lt;&lt; n;i ++) h[i] = <span class="built_in">popcount</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">1</span> &lt;&lt; n;i ++) h[i] = <span class="built_in">min</span>(h[i], n - h[i]);</span><br><span class="line"><span class="built_in">FWT_XOR</span>(f, <span class="number">1</span>), <span class="built_in">FWT_XOR</span>(h, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; (<span class="number">1</span> &lt;&lt; n);i ++) f[i] = <span class="number">1ll</span> * f[i] * h[i] % mod;</span><br><span class="line"><span class="built_in">FWT_XOR</span>(f, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; (<span class="number">1</span> &lt;&lt; n);i ++) ans = <span class="built_in">min</span>(ans, f[i]);</span><br><span class="line"><span class="built_in">write</span>(ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FWT </tag>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF451E Devu and Flowers</title>
      <link href="/2022/05/27/CF451E-Devu-and-Flowers/"/>
      <url>/2022/05/27/CF451E-Devu-and-Flowers/</url>
      
        <content type="html"><![CDATA[<p><code>MlKE</code>永远的神。</p>  <span id="more"></span><p><a href="https://codeforces.com/problemset/problem/451/E">题目链接</a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Devu 有 $n$ 个花瓶，第 $i$ 个花瓶里有 $f_i$ 朵花。他现在要选择 $s$ 朵花。</p><p>你需要求出有多少种方案。两种方案不同当且仅当两种方案中至少有一个花瓶选择花的数量不同。</p><p>答案对 $10^9+7$ 取模。</p><p>$1\le n\le 20,0\le f_i\le 10^{12},0\le s\le 10^{14}$</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先考虑$ \forall s \le f_i $的情况，很显然这就是多重集的组合数，答案就是$C_{n+s-1}^{s}$，那么现在思考如何消去$s &gt; f_i$ 的影响，我们设：有$x$个花瓶满足这些花瓶取的花至少为$f_i+1$ 的方案数为$num_x$，其中剩下的花在<strong>所有</strong>花瓶中任意取，很明显，这就可能使有$&gt;x$个花瓶超出自身限制，观察范围，发现$n$小的离谱，那么我们考虑容斥解决误差，枚举每个花瓶是否溢出，然后答案就是：$num_0-num_1+num_2…+(-1)^nnum_n$。</p><p>最后在观察式子，发现没有必要将每个$num$都算出来，枚举时减去$x$为奇数的答案，加上$x$为偶数的答案即可。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20</span>, M = (<span class="number">1</span> &lt;&lt; N) + <span class="number">5</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">LL a[N + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = <span class="number">1ll</span> * x * res % mod;</span><br><span class="line">        x = <span class="number">1ll</span> * x * x % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(LL x, LL y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    x = <span class="built_in">min</span>(y - x, x);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= x;i ++) a = <span class="number">1ll</span> * a * (y - i + <span class="number">1</span>) % mod, b = <span class="number">1ll</span> * b * i % mod; </span><br><span class="line">    res = <span class="number">1ll</span> * res * a % mod * <span class="built_in">qpow</span>(b, mod - <span class="number">2</span>) % mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lucas</span><span class="params">(LL x, LL y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; mod &amp;&amp; y &lt; mod) <span class="keyword">return</span> <span class="built_in">C</span>(x, y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1ll</span> * <span class="built_in">lucas</span>(x / mod, y / mod) * <span class="built_in">C</span>(x % mod, y % mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, cnt, sum;i &lt; (<span class="number">1</span> &lt;&lt; n);i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)</span><br><span class="line">            <span class="keyword">if</span>((i &gt;&gt; j - <span class="number">1</span>) &amp; <span class="number">1</span>) cnt ++, sum += a[j] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; n + m - <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(cnt &amp; <span class="number">1</span>) ans = (ans - <span class="built_in">lucas</span>(n - <span class="number">1</span>, m + n - sum - <span class="number">1</span>)) % mod;</span><br><span class="line">        <span class="keyword">else</span> ans = (ans + <span class="built_in">lucas</span>(n - <span class="number">1</span>, n + m - sum - <span class="number">1</span>)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>((ans + mod) % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CF </tag>
            
            <tag> 数学 </tag>
            
            <tag> 容斥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学杂谈</title>
      <link href="/2022/05/23/%E6%95%B0%E5%AD%A6%E6%9D%82%E8%B0%88/"/>
      <url>/2022/05/23/%E6%95%B0%E5%AD%A6%E6%9D%82%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<p><code>MlKE</code>带飞了。</p><span id="more"></span><p>该死的<code>windows</code>更新，把笔记带走了</p><h1 id="可重集的排列"><a href="#可重集的排列" class="headerlink" title="可重集的排列"></a>可重集的排列</h1><h1 id="错排"><a href="#错排" class="headerlink" title="错排"></a>错排</h1><p>对于长度为$n$的排列，问满足$\forall a_i \neq i$的排列个数。</p><h2 id="前置知识：容斥"><a href="#前置知识：容斥" class="headerlink" title="前置知识：容斥"></a>前置知识：容斥</h2><p>简单介绍一下，容斥满足：</p><ul><li>并集形式：$|A_1 \cup A_2 \cup …A_n| = \sum_{1 \le i \le n}|A_i|-\sum_{1 \le i \le j \le n}|A_i\cap A_j| +….(-1)^{n+1}|A_1 \cap A_2 \cap … A_n$</li><li>交集形式：$| C_S^{\cap_{i=1}^n A_i}| = |C_S^{\cup_{i=1}^n A_i}| = |S| - |\cup_{i= 1}^n A_i| = |S| - \sum|A_i| + \sum |A_i \cap A_j| - …+(-1) ^ n| \cap_{i = 1}^n A_i|$</li></ul><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>首先我们定义$n$个集合，每个集合$A_i$代表满足$a_i=i$的合法方案那么我们的最终方案就是：$C_S^{\cap_{i=1}^n A_i}$。</p><p>对此我们直接用第二个式子暴力展开然后我们惊讶的发现：$ans = |n!| - |C_n^1 (n-1)!| + |C_n^2 (n-2)!| …+(-1)^n|C_n^n1!|$。</p><p>这个东西我们完全可以搞。</p><h1 id="多重集的组合数"><a href="#多重集的组合数" class="headerlink" title="多重集的组合数"></a>多重集的组合数</h1><p>$n$种数，从中选$m$个数，问不同的方案数。</p><p>先记结论：$C_{n+m-1}^m$。</p><p>这个东西比上面那个东西好证。</p><p>首先我们设选出来的数的种类满足：$1 \le a_1 \le a2 … \le a_m \le n$。</p><p>凭着信息学竞赛的直觉（考场上孤注一掷的暴力来看），这东西根本没法搞。</p><p>为什么没法搞呢？因为这些数可以取等，组合数搞不了，再考虑构造。</p><p>对于所有的数，我们加上自身的下标$-1$，令其为$b_i$。</p><p>然后就满足：$1 \le b_1 \le b_2…\le b_m \le n + m - 1$。</p><p>这就是组合数板子了，套公式就解决了。</p><h1 id="卡特兰数"><a href="#卡特兰数" class="headerlink" title="卡特兰数"></a>卡特兰数</h1><h1 id="斐波拉契数列的循环节"><a href="#斐波拉契数列的循环节" class="headerlink" title="斐波拉契数列的循环节"></a>斐波拉契数列的循环节</h1><p>性质：在模$p$意义下斐波拉契的循环节不超过$6p$。</p><h2 id="如何求出循环节"><a href="#如何求出循环节" class="headerlink" title="如何求出循环节"></a>如何求出循环节</h2><p>下面给出两种做法：</p><h3 id="随机法"><a href="#随机法" class="headerlink" title="随机法"></a>随机法</h3><p>考虑在$10^{10}$左右的级别随机出一个数，将其的值和下一个值与第一个值和第二个值进行比对，如果相同，这说明我们找到一个可行的循环节，将其分解质因数，每次检验其因数是否可行即可。</p><p>考虑这样最多会随机多少次，根据生日悖论，期望随机的个数在$\sqrt {6p}$左右。</p><p>贴下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> mod;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    LL a[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">    Node <span class="keyword">operator</span>* (Node b)</span><br><span class="line">    &#123;</span><br><span class="line">        Node c;</span><br><span class="line">        <span class="built_in">memset</span>(c.a, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(c.a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">2</span>;i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">2</span>;j ++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= <span class="number">2</span>;k ++)</span><br><span class="line">                    c.a[i][j] = (c.a[i][j] + <span class="number">1ll</span> * a[i][k] * b.a[k][j] % mod) % mod;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;o;</span><br><span class="line">LL n, len, p = <span class="number">1e11</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function">mt19937_64 <span class="title">rnd</span><span class="params">(<span class="number">114514</span>)</span></span>;</span><br><span class="line">std::map&lt;std::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, LL&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Node <span class="title">qpow</span><span class="params">(Node x, LL k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node res = x;</span><br><span class="line">    k --;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * x;</span><br><span class="line">        x = x * x;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL ed = <span class="built_in">rnd</span>() % p + <span class="number">10</span>;</span><br><span class="line">    o.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>, o.a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    o.a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>, o.a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    o = <span class="built_in">qpow</span>(o, ed - <span class="number">2</span>);</span><br><span class="line">    LL x = (o.a[<span class="number">1</span>][<span class="number">1</span>] + o.a[<span class="number">2</span>][<span class="number">1</span>]) % mod, y = o.a[<span class="number">1</span>][<span class="number">1</span>] % mod;</span><br><span class="line">    <span class="keyword">if</span> (mp[&#123;x, y&#125;] &amp;&amp; mp[&#123;x, y&#125;] != ed) <span class="keyword">return</span> len = std::<span class="built_in">abs</span>(mp[&#123;x, y&#125;] - ed), <span class="literal">true</span>;</span><br><span class="line">    mp[&#123;x, y&#125;] = ed;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LL minn;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">query</span><span class="params">(LL limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (limit &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    o.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>, o.a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    o.a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>, o.a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    o = <span class="built_in">qpow</span>(o, limit - <span class="number">2</span>);</span><br><span class="line">    LL x = (o.a[<span class="number">1</span>][<span class="number">1</span>] + o.a[<span class="number">2</span>][<span class="number">1</span>]) % mod, y = o.a[<span class="number">1</span>][<span class="number">1</span>] % mod;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> c[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, c + <span class="number">1</span>), <span class="built_in">read</span>(mod);</span><br><span class="line">    <span class="keyword">if</span>(mod == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">check</span>());</span><br><span class="line">    n = <span class="built_in">strlen</span>(c + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        minn = (minn * <span class="number">10</span> + c[i] - <span class="string">&#x27;0&#x27;</span>) % len;</span><br><span class="line">    <span class="keyword">if</span>(minn == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(minn &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;1&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">write</span>(<span class="built_in">query</span>(minn));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BSGS"><a href="#BSGS" class="headerlink" title="BSGS"></a>BSGS</h3><p>考虑怎么用$BSGS$计算，一般来说题目中的模数都是质数，我们联想到上一个算法中矩阵快速幂，决定在这上面下文章，设转移矩阵为$A$，则我们的式子为：<br>$$<br>A^x \equiv I \pmod{p}<br>$$<br> $I$是单位矩阵，当$A$在模$p$意义下有逆矩阵时，我们就可以用$BSGS$愉快的求解了。</p><h2 id="其他的一些相关性质"><a href="#其他的一些相关性质" class="headerlink" title="其他的一些相关性质"></a>其他的一些相关性质</h2><p>根据网上一些巨佬的博客：</p><p>设其循环节长度为$len$</p><p>若$5$是模$p$意义下的二次剩余：$len  | p-1$</p><p>若$5$不是模$p$意义下的二次剩余：$len|2p+2$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/04/test/"/>
      <url>/2022/05/04/test/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构专场"><a href="#数据结构专场" class="headerlink" title="数据结构专场"></a>数据结构专场</h1><span id="more"></span><p>题目很简单，请<code>AK</code>了的童鞋不要大声喧哗，绝对不卡常。 - by <code>l18q</code></p><table><thead><tr><th>题目名称</th><th>贴贴</th><th>迷航</th><th>礼物</th><th>睡觉</th></tr></thead><tbody><tr><td>题目类型</td><td>传统型</td><td>传统型</td><td>传统型</td><td>传统型</td></tr><tr><td>可执行文件名</td><td>teitie</td><td>star</td><td>kgift</td><td>Sleep</td></tr><tr><td>输入文件名</td><td>tietie.in</td><td>star.in</td><td>kgift.in</td><td>Sleep.in</t