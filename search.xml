<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Noip2021游记</title>
      <link href="/2021/11/22/Noip2021%E6%B8%B8%E8%AE%B0/"/>
      <url>/2021/11/22/Noip2021%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>…….</p><span id="more"></span><h1 id="考前前一天"><a href="#考前前一天" class="headerlink" title="考前前一天"></a>考前前一天</h1><ul><li>吸取Csp崩盘的经验，我们来刷板子题，重心略偏数据结构，顺手复习一下国赛的内容，以免又跳出形如网络流等毒瘤东西，仔细的重读了考试大纲之后将树的板子都写了一遍，虽然2019年几乎将所有和树有关的题考的差不多了，但还是觉得树挺重要的。根据这几年NoIp，Csp的走向，数学这东西考的越来越多了。于是复习了一下差分约束，CRT。Dp这东西就放弃吧，自己找了找往年的题，估了一下，自己最多会三维Dp（很多时候三维也会裂开），反正Dp的公式完全靠题目，推不出来的话暴力的分一般也不少，而且Csp才考过Dp，还不如多复习一下一旦不会就有可能会爆零的数据结构。话是这么说，但还是刷了几道题，<a href="https://www.luogu.com.cn/problem/P1850">换教室</a>调的我怀疑人生（还是太菜了）。做到期望Dp时才想起来，这东西一般还配套一个高斯消元，就去刷了它的模板题，刷到一半，luogu就炸了，于是就去膜拜了巨佬（rp ++）。这次又是主场考试，希望还是rp ++（别崩啊）。</li></ul><h1 id="考试当天"><a href="#考试当天" class="headerlink" title="考试当天"></a>考试当天</h1><ul><li>买了一堆零食，铺下了题太难的后路（其实根本没时间吃），$8:20$ 进考场了。</li><li>再次吸取经验，现将4道题读完，$T1$ 貌似是道签到题，还是耐下性子去看了$T2$，没有什么思路，又去看了一下 $T3$，马上就紧张起来了，全是数学题（<del>像我这样的数学学渣完全就是送命</del>），乱翻了一下 $T4$，毒瘤模拟（也许可以用数据结构优化，细节绝对巨多，代码量绝对巨大）。</li><li>回过头来开$T1$，小分析了一下，写了个$O(n)$，就准备跑路，但测大样例的时候发现有点卡，测了下时间$0.85s$，我又联想到Csp的时候，CCF的少爷机吃了我15分（离一等差8分），就缩小了一下N的范围，和原来的代码对拍了一下，没什么问题，看着用时大概$0.5s$，觉得没什么问题，就跑路了。</li><li>这时大概过了$20min$，手上有分了，心态就比较平稳了，开始看第二题，还是完全没什么思路，认为是个Dp，但推了一下发现推不出来（我定的三维，正解四维，还是实力限制了我的想象），准备写个暴力Dp跑路，但自己手算了一下发现记忆化搜索似乎时间差不多（而且更好写），于是写了个搜索，加了几个优化跑路了（没注意到超时，还以为是机子卡了）。</li><li>这时再想去上个厕所却被告知禁止上厕所，苦求 $5min$ 还是放我去了（什么破规定）。</li><li>这时只剩下1.25h，有一点慌，再读了一下$T3$，发现又是一道Dp题，但没时间了，上了个退火跑路了。</li><li>1h攻$T4$，实在还是写不完，最后打了个表遗憾退场，这次在$T2$上浪费的时间太多了，$T4$暴力24分都没拿。</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li><p>下来遇见了巨佬们，一交谈才发现自己退火精度低了（还以为是次数少了），这下分数只有再跌。wfy巨佬300+了，其他巨佬也都比我高，自闭了。</p></li><li><p>去小图灵上测了测，$T2$爆蛋，$T3$果不其然被卡了手精度，这下凉凉了。</p></li><li><p>估分<br>$$<br>100 + 0 + 32 + 0<br>$$</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>其实开始还是有希望一等的，第二题推出暴力Dp后就应该跑路，第三题应该吸取<a href="https://www.luogu.com.cn/problem/P3878">分金币</a>的经验卡一下精度的（明明考前才做过，自闭了），第四题（如果有时间的话…)</li><li>202 $-&gt;$ 132，自闭了QAQ。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1484 种树</title>
      <link href="/2021/11/18/P1484-%E7%A7%8D%E6%A0%91/"/>
      <url>/2021/11/18/P1484-%E7%A7%8D%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>为什么每次考试的原题我都没做过呀， $QAQ$</p><span id="more"></span><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p><del>当我们看到这道题时，不难想到这是一道 $dp$ 题</del>。 开个玩笑， $2e5$ 的数据范围，怎么可能 $n ^ 2 Dp$ 。 </p><p>回到正题：一道经典的带悔贪心。</p><p>我们先模拟一下一般的贪心策略，每次选取最大的可取的值，直到不能取为止。</p><p>不难发现，这个策略是错的。我们来看一下这个图：</p><p><img src="https://i.loli.net/2021/11/18/lp5cVaDb3EAfhW4.png" alt="无标题.png"></p><p>对于第一次策略，我们会优先选择最大的20号点，紧接着，我们就只能憋屈的选择1号点，很明显正解不可能是21， $19+19 = 38$ 明显更优，那么我们应该怎样调整我们的贪心策略才能保证我们贪心的正确性呢，其实并不是很难，我们重新看一幅图。</p><p><img src="https://i.loli.net/2021/11/18/McZyx5Y3tqnIQa4.png" alt="无标题.png"></p><p>对于这次贪心策略，我们取走20以后顺手删除（左）19点和（右）19点，并将20号点更新为： $19 + 19 - 20 = 18$ ，即：</p><p><img src="https://i.loli.net/2021/11/18/Sk6M9U1Pqgcvy4x.png" alt="无标题.png"></p><p>此时，我们再取走18号点，并删除与18号点相邻的1号点，并将 $-17$ 号点加入队列中：</p><p><img src="https://i.loli.net/2021/11/18/HxPfvF7bKog6eGT.png" alt="无标题.png"></p><p>根据题目的意思，现在我们无论取多少都无所谓，所以放弃-17，得到答案38正解，这样不但避免了选择相邻的两个（选一个的时候，另外两个被删除了），还保证了价值守恒（请自行理解），那么这道题就完结撒花啦。</p><h2 id="三倍经验：luogu-P1792-国家集训队-种树，-luogu-P3620-APIO-CTSC-2007-数据备份-此题具有一定的思考难度-主要还是板子"><a href="#三倍经验：luogu-P1792-国家集训队-种树，-luogu-P3620-APIO-CTSC-2007-数据备份-此题具有一定的思考难度-主要还是板子" class="headerlink" title="三倍经验：luogu P1792 [国家集训队]种树， luogu P3620 [APIO/CTSC 2007] 数据备份(此题具有一定的思考难度 (主要还是板子))"></a>三倍经验：<a href="https://www.luogu.com.cn/problem/P1792">luogu P1792 [国家集训队]种树</a>， <a href="https://www.luogu.com.cn/problem/P3620">luogu P3620 [APIO/CTSC 2007] 数据备份</a>(此题具有一定的思考难度 (主要还是板子))</h2><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;<span class="comment">//上一个和下一个的下标  </span></span><br><span class="line">LL val;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">LL val;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(Node b)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> val &lt; b.val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">bool</span> vis[N];<span class="comment">//判断当前节点是否可选</span></span><br><span class="line">priority_queue&lt;Node&gt;q;<span class="comment">//大根堆维护最大值 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a[x].l = a[a[x].l].l;<span class="comment">//左右边界移动，删除 x的左右节点 </span></span><br><span class="line">a[x].r = a[a[x].r].r;</span><br><span class="line">a[a[x].l].r = x;</span><br><span class="line">a[a[x].r].l = x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i].val);</span><br><span class="line">a[i].l = i - <span class="number">1</span>;</span><br><span class="line">a[i].r = i + <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>((Node)&#123;i, a[i].val&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(vis[q.<span class="built_in">top</span>().id]) <span class="comment">//延迟删除标记 </span></span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">Node now = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(now.val &lt; <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">ans += now.val;</span><br><span class="line">vis[a[now.id].l] = vis[a[now.id].r] = <span class="number">1</span>;</span><br><span class="line">a[now.id].val = a[a[now.id].l].val + a[a[now.id].r].val - a[now.id].val; </span><br><span class="line">q.<span class="built_in">push</span>((Node)&#123;now.id, a[now.id].val&#125;);<span class="comment">//加入新点 </span></span><br><span class="line"><span class="built_in">Del</span>(now.id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 带悔贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF453C</title>
      <link href="/2021/11/17/CF453C/"/>
      <url>/2021/11/17/CF453C/</url>
      
        <content type="html"><![CDATA[<p>一道有意思的树形dp</p><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>给定一个 $n$ 个点， $m$ 条边的无向图和一个01序列，若 $a[i] = 1$ ，则需遍历这个节点奇数次，否则需要遍历此节点偶数次（可以不遍历），求一个可行的方案，要求此方案的长度不超过 $4n$</li></ul><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>首先我们观察本题的规律，不难发现：</p><ul><li><p>当本图未联通时，任意两个连通块中有需要走奇数遍的点时一定无解（应该不需要解释吧）</p></li><li><p>因为一个节点可能有多个儿子，所以当我们未对当前节点的其他儿子进行判断前，一个可行的策略一定可以是：先处理当前节点的其中一个儿子节点，再从这个儿子节点（儿子节点的子树已经处理完了）回溯到当前节点，接着再由当前节点来处理它的其他儿子并回溯到它的父亲节点（以此递归处理问题）。</p></li><li><p>我们顺着这个思路往下走，将一个需要走奇数次的节点作为根节点，递归处理它的子树，不难发现当我们处理完一个节点的子树，将要回溯到这个节点的父节点时，若这个节点还需要再遍历一遍，我们可以和此节点的父亲节点进行循环（由此节点跳到它的父节点，再由它的父节点跳到它，再由此节点进行回溯，即可更新此节点）。那么根节点如何处理呢？我们进行画图分析：<br><img src="https://i.loli.net/2021/11/17/PSAbMTjc53Z8amL.png" alt="无标题.png"></p></li><li><p>此时可以看到3号节点需要回溯了，但根节点不需要被再次遍历，不然根节点会回溯到我们传的-1号虚根节点上，对此，我们只需要进行特判，如果-1号虚根节点入队了，队列数-3（最后3个数应该为 $root$ ，-1 ， $root$ ），即停止从3号节点回溯到根节点，在根节点的前一个节点停止回溯，这样就保证了正确性。</p></li></ul><p>我们再来分析此代码的效率，不难发现每一个叶子节点的最坏入队次数为两次，使其父节点多进队2次，即一个点最多对答案贡献4次，但一定有如同 $root$ 一样的节点，它一定不会和自己的儿子节点循环，所以答案一定严格小于 $4n$ 。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[M], h[N], ne[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[N], root;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> st[N &lt;&lt; <span class="number">2</span>], cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line">st[++ cnt] = x;</span><br><span class="line">a[x] ^= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(vis[j]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(j, x);</span><br><span class="line">st[++ cnt] = x, a[x] ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[x]) st[++ cnt] = father, st[++ cnt] = x, a[x] ^= <span class="number">1</span>, a[father] ^= <span class="number">1</span>;<span class="comment">//和父节点循环 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> o, u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;o, &amp;u);</span><br><span class="line"><span class="built_in">add</span>(o, u);</span><br><span class="line"><span class="built_in">add</span>(u, o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), root = (a[i] == <span class="number">1</span> ? i : root);</span><br><span class="line"><span class="keyword">if</span>(!root)<span class="comment">//不用遍历就不遍历 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(root, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt &gt; <span class="number">1</span> &amp;&amp; st[cnt - <span class="number">1</span>] == <span class="number">-1</span>) cnt -= <span class="number">3</span>;<span class="comment">//特判 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cnt);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt;i ++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, st[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CF </tag>
            
            <tag> 树形dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫比乌斯反演</title>
      <link href="/2021/11/16/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
      <url>/2021/11/16/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</url>
      
        <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="整数分块"><a href="#整数分块" class="headerlink" title="整数分块"></a>整数分块</h3><span id="more"></span><p>整除分块是用于快速处理形似<br>$$<br>\sum_{i = 1}^{n}\lfloor\dfrac{n}{i}\rfloor<br>$$</p><p>的式子的方法<br> 很显然，这个可以<em>O</em>(<em>n</em>)得到答案。但是，在某些题目中，毒瘤出题人将数据加强到了 $10^10$ 以上，这个时候我们就无法通过<em>O</em>(<em>n</em>)的解法来得到答案了。我们需要一个<em>O</em>(<em>n</em>−−√)的更为优秀的解法<br> 首先观察这个式子，找几个特殊值代入<br><code>n=5时，sum=5+2+1+1+1</code><br> 可以发现的是：（这里给的例子并不明显，其实应该找一个大的n来代入才直观，读者可以自行尝试）<br> 对于单一的⌊<em>n**i</em>⌋，某些地方的值是相同的，并且<strong>呈块状分布</strong><br> 通过进一步的探求规律与推理以及打表与瞎猜，我们可以惊喜的发现一个规律，这些<strong>块状分布的值是有规律的</strong><br> 对于一个块，*<em>假设它的起始位置的下标为l，那么可以得到的是，它的结束位置的下标为⌊*n*⌊*n*<em>l*⌋⌋</em></em><br> 如果实在看的有点懵逼，可以继续采用代入特殊值的方法，验证一下上方的规律，用程序表现出来即为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>, r;l &lt;= n;l = r + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    r = n / (n / l);</span><br><span class="line">    ans += (r - l + <span class="number">1</span>) * mu[l];<span class="comment">//mu只是举个例子，可以带入任意符合的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重要函数：<br>$$<br>μ(x) = \begin{cases}<br> 0 &amp; (d_i \ge 2)\\<br> 1 &amp; (d_i = 1)<br>\end{cases}<br>$$</p><p>$$<br>I = 1<br>$$</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>莫比乌斯反演主要用来简化运算，通常有性质：</li></ul><p>$$<br>F(n) = \sum_{d|n}f(d) \\<br>    f(n) = \sum_{d|n}μ(d)F(\frac{n}{d})\\<br>$$</p><p>简要证明：</p><p>1.直接证</p><p>$$<br>\begin{aligned}<br>\sum_{d|n}μ(d)F(\frac{n}{d})<br>&amp;=\sum_{d|n}μ(d)\sum_{i|\frac{n}{d}}f(i)\\<br>&amp;=\sum_{i|n}f(i)\sum_{d|\frac{n}{i}}\mu(d)\\<br>&amp;=\sum_{i|n}f(i)[\frac{n}{i}==1]\\<br>&amp;=f(n)\\<br>\end{aligned}<br>$$</p><p>2.运用狄利克雷卷积</p><p>$$<br>\begin{aligned}<br>F &amp;= f*I\\<br>F * \mu &amp;= f * I * \mu \\<br>(I * \mu) &amp;= \varepsilon \\<br>F * \mu &amp;= f * \varepsilon = f \\<br>f &amp;= \mu * F<br>\end{aligned}<br>$$</p><p>如果看不懂的话, 我将1的详细步骤写一下:</p><p>我们将原式化简可得<br>$$<br>f(x) = \sum_{d|n}μ(d)\sum_{i| \frac{n}{d}}f(i)<br>$$</p><p>我们令<br>$$<br>S(n) = \sum_{d|n}μ(d)<br>$$<br>即可化简的<br>$$<br>S(n)=[n==1]<br>$$<br>我们再令<br>$$<br>d = \frac{n}{d}<br>$$<br>带回原式可得<br>$$<br>f(n) = \sum_{d|n}μ(d)\sum_{i| \frac{n}{d}}f(i)<br>$$<br>我们不妨设x = n / d, 则x * d = n, 那么当x确定时，d同样也确定，反之亦然同理, 则f(x)和μ(d)所枚举到的数完全一样，即我们可以交换f(x)和μ(d)，那么原式即可变形为<br>$$<br>f(n) = \sum_{i|n}f(i)\sum_{d| \frac{n}{i}}μ(d)<br>$$<br>此时我们再联想到S(x), 再令x = n / i, 就可以得到<br>$$<br>f(i) = \sum_{i|n}f(i)S(\frac{n}{i})<br>$$</p><p>此时再将F(n)代回</p><p>$$<br>\begin{align}<br>\sum_{n|d}μ(\frac{d}{n})F(d) &amp;= \sum_{n|d}μ(\frac{d}{n})\sum_{d|i}f(i)\\<br>&amp;= \sum_{n|i}f(i)\sum_{d| \frac{i}{n}}μ(d) \\<br>&amp;= f(n)<br>\end{align}<br>$$</p><p>证毕</p><h2 id="例题：luogu-P2257-YY的GCD"><a href="#例题：luogu-P2257-YY的GCD" class="headerlink" title="例题：luogu P2257 YY的GCD"></a>例题：<a href="https://www.luogu.com.cn/problem/P2257">luogu P2257 YY的GCD</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> prime[N], cnt, n, phi[N], g[N];</span><br><span class="line"><span class="keyword">bool</span> d[N];</span><br><span class="line">LL s[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!d[i]) prime[++ cnt] = i, phi[i] = - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= cnt &amp;&amp; i * prime[j] &lt; N;j ++)</span><br><span class="line">&#123;</span><br><span class="line">d[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">phi[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> phi[i * prime[j]] = - phi[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= cnt;j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i * prime[j] &lt; N;i ++)</span><br><span class="line">&#123;</span><br><span class="line">g[i * prime[j]] += phi[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++) s[i] = s[i - <span class="number">1</span>] + g[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n, m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r;l &lt;= n;l = r + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r = <span class="built_in">min</span>(n, <span class="built_in">min</span>(n / (n / l), m / (m / l)));</span><br><span class="line">            ans += (s[r] - s[l - <span class="number">1</span>]) * (LL)(n / l) * (m / l);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2480 古代猪文</title>
      <link href="/2021/11/16/P2480-%E5%8F%A4%E4%BB%A3%E7%8C%AA%E6%96%87/"/>
      <url>/2021/11/16/P2480-%E5%8F%A4%E4%BB%A3%E7%8C%AA%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>感觉自己的脑子要瓦特了…..</p><span id="more"></span><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><ul><li>对于所有的k($k | n$),求</li></ul><p>$$<br>g^{\sum_{k|n} C_n^k}<br>$$</p><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><ul><li><p>我们首先根据欧拉定理的推论：<br>$$<br>a^p\equiv a^{p\  \bmod\ \varphi(n)}(\bmod n)<br>$$</p></li><li><p>即可确定$\sum_{k|n}C_n^k$的模数$\varphi(n)$， 又因为n为一个极大的质数，所以$\varphi(n) = n -1$(我竟然兴奋的上了一个杜教筛，唉……)，但n过于庞大，达到了$1e9$的级别，所以我们还得运用卢卡斯定理：</p></li><li><p>$$<br>C_a^b = C_{a / p}^{b / p} * C_{a\ \bmod\ p} ^ {b\ \bmod\ p}, p\in{primes}<br>$$</p></li><li><p>这个时候，这个题的大体结构已经确定了，我们只需略略加一点小优化。 不难发现p = 999911658时，我们无法使用卢卡斯（p不是质数），就算我们不顾一切使用了卢卡斯，它的效率也低的离谱（应该会溢出或者报错吧），我们接着考虑能否将p拆分成质数，再将各个因数所算出来的答案相加</p></li><li><p>运用暴力程序，我们成功的得到$999911658 = 2 * 3 * 4679 * 35617$,将其分别带入$Lucas$中求解答案，再利用中国剩余定理：</p></li><li><p>$$<br>\begin{cases}<br>  &amp;x\ \equiv &amp;a_1(\bmod\ 2) \\<br>  &amp;x\ \equiv &amp;a_2(\bmod\ 3) \\<br>  &amp;x\ \equiv  &amp;a_3(\bmod\ 4679)\\<br>  &amp;x\ \equiv  &amp;a_4(\bmod\ 45617)<br>\end{cases}<br>$$</p></li><li><p>然后我们就得到了最小的非负整数， 直接快速幂计算答案即可。</p></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">999911658</span>, N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, g;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4679</span>, <span class="number">35617</span>&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>;</span><br><span class="line">c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line">LL ans[N];</span><br><span class="line">LL fac[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//对不同模数的乘积进行线性预处理</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= x;i ++)</span><br><span class="line">fac[i] = fac[i - <span class="number">1</span>] * i % x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL b, LL k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = (res * x) % k;</span><br><span class="line">x = (x * x) % k;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt; b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> fac[a] * <span class="built_in">qpow</span>(fac[b], k - <span class="number">2</span>, k) % k * <span class="built_in">qpow</span>(fac[a - b], k - <span class="number">2</span>, k) % k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">lucas</span><span class="params">(<span class="keyword">int</span> b, <span class="keyword">int</span> a, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b &lt; a) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(b &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lucas</span>(b / k, a / k, k) * <span class="built_in">C</span>(b % k, a % k, k) % k;</span><br><span class="line">&#125;</span><br><span class="line">LL res = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CRT</span><span class="params">()</span><span class="comment">//有些奇怪的中国剩余定理</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">4</span>;i ++)</span><br><span class="line">&#123;</span><br><span class="line">res = (res + ans[i] * (mod / p[i]) % mod * <span class="built_in">qpow</span>(mod / p[i], p[i] - <span class="number">2</span>, p[i])) % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n), <span class="built_in">read</span>(g);</span><br><span class="line"><span class="keyword">if</span>(g % (mod + <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= <span class="number">4</span>;k ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">init</span>(p[k]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">sqrt</span>(n);i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans[k] = (ans[k] + <span class="built_in">lucas</span>(n, i, p[k]) % p[k]) % p[k]; </span><br><span class="line"><span class="keyword">if</span>(i * i != n)</span><br><span class="line">ans[k] = (ans[k] + <span class="built_in">lucas</span>(n, n / i, p[k]) % p[k]) % p[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">CRT</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, <span class="built_in">qpow</span>(g, res, mod + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉路径</title>
      <link href="/2021/11/16/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/"/>
      <url>/2021/11/16/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>对于任意一个无向图，我们必须不重复地走过所有的边（点可以不走完，也可以重复走），求方案是否存在，并输出其中一种（应该是最小字典序。</li></ul><span id="more"></span><h2 id="题目链接：P7771-欧拉路径"><a href="#题目链接：P7771-欧拉路径" class="headerlink" title="题目链接：P7771 欧拉路径"></a>题目链接：<a href="https://www.luogu.com.cn/problem/P7771">P7771 欧拉路径</a></h2><h1 id="结论及推导"><a href="#结论及推导" class="headerlink" title="结论及推导"></a>结论及推导</h1><ul><li><p>我们先来看一下这个两个图<br><img src="https://i.loli.net/2021/11/16/ZTCRLMVfgmXy7sv.png" alt="p4sz29zn.png"><br><img src="https://i.loli.net/2021/11/16/MxQgbTo41nBqEVf.png" alt="3yx89bfn.png"></p><h1 id="从这两个图中我们不难发现："><a href="#从这两个图中我们不难发现：" class="headerlink" title="从这两个图中我们不难发现："></a>从这两个图中我们不难发现：</h1><h2 id="1-对于无向图，所有边联通。"><a href="#1-对于无向图，所有边联通。" class="headerlink" title="1.对于无向图，所有边联通。"></a>1.对于无向图，所有边联通。</h2></li><li><p>(1).存在欧拉路径的充分必要条件：度数为奇数的点只能有0个或两个。</p></li><li><p>(2).存在欧拉回路的充分必要条件：度数为奇数的点只能有0个</p></li></ul><h2 id="2-对于有向图，所有边都是连通的"><a href="#2-对于有向图，所有边都是连通的" class="headerlink" title="2.对于有向图，所有边都是连通的"></a>2.对于有向图，所有边都是连通的</h2><ul><li>(1).存在欧拉路径的充分必要条件：要么所有点的出度均等于入度；要么除了两个点之外，其余所有点的出度等于入度，剩余的两个点：一个满足出度比入度多1（起点），另一个满足入度比出度多1（终点）</li><li>(2)存在欧拉回路的充分必要条件：所有点的出度均等于入度.<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1></li><li>我们任意取一个点，然后进行dfs，每次递归到下一层（如果求最小字典序就取最小的）一边递归，一边存储路径，当dfs结束之后，倒序输出（应该不用解释吧）<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> ru[N], cu[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;k[N];</span><br><span class="line"><span class="keyword">int</span> o[N];</span><br><span class="line"><span class="keyword">int</span> root, End;</span><br><span class="line"><span class="keyword">int</span> st[N], l;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(o[x] &lt; k[x].<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = k[x][o[x]];</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;x : &quot; &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; o[x] &lt;&lt; &quot; &quot; &lt;&lt; k[x].size()&lt;&lt; endl;</span></span><br><span class="line">cu[x] ++;</span><br><span class="line">ru[j] ++;</span><br><span class="line">o[x] ++;</span><br><span class="line"><span class="built_in">dfs</span>(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(o[x] &lt; k[x].<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = k[x][o[x]];</span><br><span class="line">o[x] ++;</span><br><span class="line"><span class="built_in">dfs1</span>(j);</span><br><span class="line">&#125;</span><br><span class="line">st[++ l] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p, u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;p, &amp;u);</span><br><span class="line">k[p].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sort</span>(k[i].<span class="built_in">begin</span>(), k[i].<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(o[i] &lt; k[i].<span class="built_in">size</span>()) &#123;<span class="built_in">dfs</span>(i); <span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cu[i] != ru[i]) u ++;</span><br><span class="line"><span class="keyword">if</span>(cu[i] == <span class="number">0</span> &amp;&amp; ru[i] == <span class="number">0</span>) u = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(cu[i] == ru[i] + <span class="number">1</span>) root = i;</span><br><span class="line"><span class="keyword">if</span>(ru[i] == cu[i] + <span class="number">1</span>) End = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u != <span class="number">0</span> &amp;&amp; u != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!root &amp;&amp; !End) root = End = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(o, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(o));</span><br><span class="line"><span class="built_in">dfs1</span>(root);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = l;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, st[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 csp-s爆炸记</title>
      <link href="/2021/11/16/2021-csp-s%E7%88%86%E7%82%B8%E8%AE%B0/"/>
      <url>/2021/11/16/2021-csp-s%E7%88%86%E7%82%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="考前一天"><a href="#考前一天" class="headerlink" title="考前一天"></a>考前一天</h2><span id="more"></span><ul><li>感觉没什么好复习的,随随便便看看模板就过了，感觉会考图论，一个猜想，不一定对。<h2 id="考试当天上午"><a href="#考试当天上午" class="headerlink" title="考试当天上午"></a>考试当天上午</h2></li><li>坐在机房，闲的心里发慌，开始过模板，突然发现整个机房就我一个 (不会的都会更高级的算法)不会st表（还在倍增lca）急急忙忙去过，理解了半天还是不敢保证考场会打，人一下子就慌了，距离中午吃饭还有2h，冷静下来看图论（CCF一定要考啊），隔壁的巨佬在用网络流写dp，蒟蒻不懂联赛看网络流干啥。回过头来过了一下tarjan，仔细想了一下去年有<a href="https://www.luogu.com.cn/problem/P7115">移球游戏</a>，今年肯定有毒瘤题，于是溜过去看平衡树，痛苦地挣扎了两小时，勉勉强强调过了。上午就这么过了，今天主场作战，csp-s rp ++<h2 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h2></li></ul><ul><li>进考场前路遇几位外校的巨佬，赶紧膜拜，众所周知，考前膜巨佬有益于rp++。</li><li>进考场了，熟悉的系统，熟悉的键盘（还是这么难用），完全不熟悉的考题，大概扫了一眼，T1大概有点贪心的意思，毕竟每个飞机能停在那个廊桥是定死的，但想了想，还是先看看后面的题，T2肯定是区间dp（模拟赛有道相似的），仔细看了看发现这道题细节巨多，自己掂量掂量自己的码力水平，觉得还是不行，自己推了一下式子，但过不了大样例，回过头来重新看了看题，才发现S在A的左右两边时必须又要括号，当时人都傻了，这是已经开考45min了。出去上了个厕所，回来准备看T3。</li><li>T3乍一看，真的认为是道数学题（5e5的数据范围，完全想不到什么数据结构）认真读了读，发现T1更可做，还是先看一下T4，又是很长的题面，联想了一下去年的<a href="https://www.luogu.com.cn/problem/P7078">贪吃蛇</a>，一想到现在我一道题都没做出来，背后一凉，赶紧去看T1。</li><li>怎么说呢？还是数学学的太差了（其实是没怎么没用过STL模板库），推导了一下，发现每一个廊桥停的上一个飞机的起飞时间和下一个飞机降落时间都成严格上升。想了想<br>$$f(n) = \sum_{i=1}^{n-1}{f(i)} + g(n)$$</li><li>其中f指能停的飞机数，g指在n号机场能停的飞机数。意味着只要在log(n)的时间复杂度内查询出这架飞机停在哪，用线段树维护区间和即可。自己兴奋的打完，一测样例：没过，然后极其痛苦的查了30min后，才发现是lower_bound炸掉了，点开lower_bound才发现ta就是帮我写了个二分，仔细思考了一下如何在随时修改的无序序列中快速查询出第一个比大的值。一敲脑袋，发现自己完全不会只能硬枚举，复杂度为$O(n^2 -n\log n)$希望CCF的数据水一点，别把我卡掉。</li><li>已经考了2h，开始码T3，仔细分析了一下发现当第一个出去的数确定了以后，后面每一个出去的数就确定了，开始疯狂码贪心，然后打了1h发现自己无法确定中间加数时的顺序（后来问了大佬才知道，其实可以确定，打的也没有问题，就是自己太弱了，没想到），在激烈的思想斗争之后，还是决定打暴力拿40分跑路，打了暴力就走了。</li><li>在自己语文能力的限制下，自己还是没从第四题的题面中挖出点什么，总感觉大纲里的考点一个也匹配不上，果断放弃继续打第二题，结果还是没打完。</li><li>崩了呀，还是自己平时没复习好，平时除了部分数据结构题什么也不想做，看来后续做题思路要改改了<h3 id="估分："><a href="#估分：" class="headerlink" title="估分："></a>估分：</h3>$(60-70) + 0 + 40 + 0$<h3 id="实测"><a href="#实测" class="headerlink" title="实测"></a>实测</h3>$85 + 0 + 12$(差了8分tg1=)<h2 id="考后"><a href="#考后" class="headerlink" title="考后"></a>考后</h2></li><li>第四题原来真的可以用网络流吗，这玩意不是不考吗（早上看网络流的巨佬就A掉了），第三题暴力写挂了，第一题民间数据倒还没卡掉（希望CCF也没卡掉）</li><li>接下来该多看看数学题了，再不看就AFO了（可能已经AFO了）（数据结构，图论都没怎么考（除了该死的超了刚的网络流））</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1072 Hankson的趣味题（解题概要）</title>
      <link href="/2021/11/16/P1072-Hankson%E7%9A%84%E8%B6%A3%E5%91%B3%E9%A2%98%EF%BC%88%E8%A7%A3%E9%A2%98%E6%A6%82%E8%A6%81%EF%BC%89/"/>
      <url>/2021/11/16/P1072-Hankson%E7%9A%84%E8%B6%A3%E5%91%B3%E9%A2%98%EF%BC%88%E8%A7%A3%E9%A2%98%E6%A6%82%E8%A6%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1072">题目传送门</a></p><span id="more"></span><p>(数论) $O(n \sqrt{b_1} / log(b_1))$</p><p>由于 $[x, b_0] = b_1$，因此 $x$ 一定是 $b_1$ 的约数。<br>所以我们可以枚举 $b_1$ 的所有约数，然后依次判断是否满足 $[x, b_0] = b_1$ 以及 $(x, a_0) = a_1$ 即可。</p><p>如果直接用试除法求 $b_1$ 的所有约数，那么总计算量是 $n \sqrt{b_1} = 2000 * \sqrt{2 \times 10^9} \approx 10^8$，会有一个测试数据超时。</p><p>我们可以先预处理出 $1 \sim \sqrt{b_1}$ 内的所有质数，然后用这些质数去试除 $b_1$。</p><p>由质数定理：</p><ul><li>$1 \sim n$ 中的质数个数约为 $\frac{n}{ln(n)}$。</li></ul><p>因此我们可以在 $\sqrt{b_i} / log(b_i)$ 的时间复杂度内将 $b_1$ 分解质因数。然后通过DFS枚举出 $b_1$ 的所有约数。</p><p>时间复杂度分析：</p><ul><li>一共 $n$ 组测试数据，每组测试数据分解 $b_1$ 的计算量是 $n \sqrt{b_1} / log(b_1) \approx 10^7$。</li></ul><p>平均每个数的约数个数为 $logn$ 个，计算最小公倍数和最大公约数的时间复杂度也是 $O(logn)$，因此判断 $x$ 是否合法的计算量是 $nlog^2n \approx 2 \times 10^6$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">45005</span>,M = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> pr[N], cnt;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> bl[N];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;q[M];</span><br><span class="line"><span class="keyword">int</span> cnta;</span><br><span class="line"><span class="keyword">int</span> di[N], cntd;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inti</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//筛质数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!bl[i]) pr[cnt ++] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; pr[j] &lt;= x/i; j ++)</span><br><span class="line">&#123;</span><br><span class="line">bl[pr[j] * i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (!(i % pr[j])) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><span class="comment">//最小公约数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a%b) : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> p)</span><span class="comment">//枚举可能的 x </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt; cnta)<span class="comment">//已经没有因数了 </span></span><br><span class="line">&#123;</span><br><span class="line">di[cntd ++] = p;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= q[l].second;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dfs</span>(l + <span class="number">1</span>,p);</span><br><span class="line">p *= q[l].first;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">inti</span>(N);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a0, a1, b0, b1;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a0, &amp;a1, &amp;b0, &amp;b1);</span><br><span class="line"><span class="keyword">int</span> d = b1;</span><br><span class="line">cnta = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; pr[i] &lt;= d/pr[i]; i ++)<span class="comment">//枚举出可行的 X的因数 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = pr[i];</span><br><span class="line"><span class="keyword">if</span>(!(d%p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(d%p == <span class="number">0</span>) s ++, d /= p;</span><br><span class="line">q[++ cnta] = &#123;p, s&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d &gt; <span class="number">1</span>) q[++ cnta] = &#123;d, <span class="number">1</span>&#125;;</span><br><span class="line">cntd = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cntd; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = di[i];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">gcd</span>(x, a0) == a1 &amp;&amp;(<span class="keyword">long</span> <span class="keyword">long</span>)x*b0/<span class="built_in">gcd</span>(x, b0) == b1)</span><br><span class="line">&#123;</span><br><span class="line">res ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主定理</title>
      <link href="/2021/11/16/%E4%B8%BB%E5%AE%9A%E7%90%86/"/>
      <url>/2021/11/16/%E4%B8%BB%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>记得复习</p><span id="more"></span><p>$T(n)=2 T\left(\frac{n}{2}\right)+\Theta(n)=\Theta(n \log n)$  </p><p>$T(n)=T\left(\frac{n}{2}\right)+\Theta(n)=\Theta(n) $  </p><p>$T(n)=T\left(\frac{n}{2}\right)+\Theta(1)=\Theta(\log n)$  </p><p>$T(n)=2 T\left(\frac{n}{2}\right)+\Theta(n \sqrt{n})=\Theta(n \sqrt{n}) $</p>]]></content>
      
      
      
        <tags>
            
            <tag> 初赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Miller Robin</title>
      <link href="/2021/11/16/Miller-Robin/"/>
      <url>/2021/11/16/Miller-Robin/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>玄学的概率测素数， 这是一种随机的算法， 出错率大约在$($1/4$)^n$， 所以当n &gt; 50以后正确率就接近于1了（反正比计算机本身的正确率要高）</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4718">题目传送门</a></p><h2 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h2><h3 id="费马小定理："><a href="#费马小定理：" class="headerlink" title="费马小定理："></a>费马小定理：</h3><p>当a于p互质时，$(a^p) \equiv a (\bmod p)$</p><h3 id="二次探测定理"><a href="#二次探测定理" class="headerlink" title="二次探测定理"></a>二次探测定理</h3><p>内容：如果 φ(p)=p−1,p&gt;1,p&gt;X，且$X^2 ≡ 1(\bmod p)$，那么 $X = 1 || p - 1$</p><p>证明：</p><p>∵$X^2≡1 \pmod p$</p><p>∴ $p|X^2 - 1$</p><p>∴$p|(X - 1)(X+ 1)$</p><p>∵p是大于X的质数</p><p>∴ $p = X + 1 || p \equiv X-1\pmod p$ 即$X = 1 || p - 1$</p><p>证毕</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>好， 那么接下来让我们走进它的原理。</p><p>首先，如果当满足$(a^p-1) \equiv a \pmod p$时p都为质数那这个问题是不是就迎刃而解了呢？（就可以和愚蠢的二次探测定理说再见了）</p><p>但愿望是美好的，现实是骨感的，当你自信地将这个代码交上去以后，你会发现：你Wa了。</p><p>我们来看一下这个数据：$2^{340} \equiv 1 \pmod {341}$，然而 341=31∗11</p><p>……</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li>1.将$p - 1$提出所有2的因数， 我们假设有t个。然后将剩余的部分定义为res（用于二次探测定理）</li></ul><ul><li>2.枚举一个数a，并定义一个数$x = a^{res} \pmod p $</li></ul><ul><li><p>3.如果 $\forall y = x^2 \pmod p, y != p - 1$ 那么p就不是一个质数</p></li><li><p>4.当我们的底数已经足够多了时，就可以跳出了</p><h2 id="主函数及其他流程"><a href="#主函数及其他流程" class="headerlink" title="主函数及其他流程"></a>主函数及其他流程</h2><p>牛B的大佬就可以去刷题了（<del>别来找茬了</del>）</p></li><li><p>我们先判断当前数是否为素数</p></li><li><p>如果不是素数的话，就找它的因子</p></li><li><p>递归对该因子和约出来的另一个因子进行分解（直到为质数）</p><h2 id="因子从何而来"><a href="#因子从何而来" class="headerlink" title="因子从何而来"></a>因子从何而来</h2><p>   <del>如果不嫌弃的话，我们可以一个一个试</del></p><p>   咳，我们来说正解。</p></li><li><p>我们假设要找的因子为a</p></li><li><p>我们运用随机的艺术find一个$x,y$,并不停随机$x$, 具体的法子一般是$x = x^2 + c$(c就是随机艺术的产物)</p></li><li><p>使$a = gcd(y - x, n) &amp;&amp; a \in(1, n)$则我们就找到了一个因子（<del>至于为什么</del>……）</p></li><li><p>那如果$x = y$出现了呢，这就说明出现了循环，所以我们就要判环，运用倍增的思想，让$y$记住$x$，当$x = {x_0}^2$时，y = x，所以当x跑到y时，已经跑完一个圈。</p></li><li><p>定义一个$i = 1,j = 2$,当执行$gcd$时$i ++$,如果i == j, 则$y = x, j &lt;&lt;= 1$ </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">LL n, ans;</span><br><span class="line">LL a[<span class="number">30</span>] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">41</span>,<span class="number">61</span>,<span class="number">24251</span>&#125;;</span><br><span class="line"><span class="function">LL <span class="title">Gcd</span><span class="params">(LL x, LL y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y ? <span class="built_in">Gcd</span>(y, x % y) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">mul</span><span class="params">(LL x, LL k, LL mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res += x, res %= mod;</span><br><span class="line">        x += x;</span><br><span class="line">        x %= mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL k, LL mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, x, mod);</span><br><span class="line">        x = <span class="built_in">mul</span>(x, x, mod);</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Robin</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(p % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LL d = p - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(d &amp; <span class="number">1</span>)) d &gt;&gt;= <span class="number">1</span>, s ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">9</span> &amp;&amp; a[i] &lt; p;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x = <span class="built_in">qpow</span>(a[i], d, p), y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= s;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            y = <span class="built_in">mul</span>(x, x, p);</span><br><span class="line">            <span class="keyword">if</span>(y == <span class="number">1</span> &amp;&amp; x != <span class="number">1</span> &amp;&amp; x != (p - <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            x = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(y != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">pollard</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL y = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL c = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL i = <span class="number">0</span>, j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            x = (<span class="built_in">mul</span>(x, x, p) + c) % p;</span><br><span class="line">            <span class="keyword">if</span>(x == y) <span class="keyword">break</span>;</span><br><span class="line">            LL d = <span class="built_in">Gcd</span>(<span class="built_in">abs</span>(y - x), p);</span><br><span class="line">            <span class="keyword">if</span>(d &gt; <span class="number">1</span>) <span class="keyword">return</span> d;</span><br><span class="line">            <span class="keyword">if</span>(i == j)</span><br><span class="line">            &#123;</span><br><span class="line">                y = x;</span><br><span class="line">                j &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Robin</span>(p)) </span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, p);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    LL k = p;</span><br><span class="line">    <span class="keyword">while</span>(p &lt;= k) k = <span class="built_in">pollard</span>(k);</span><br><span class="line">    <span class="built_in">Find</span>(k), <span class="built_in">Find</span>(p / k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">9</span>) <span class="built_in">print</span>(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(T --)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">        <span class="built_in">Find</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(ans == n) <span class="built_in">puts</span>(<span class="string">&quot;Prime&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">print</span>(ans),<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>我们会发现：咦怎么T了</p><p>这时就要卡常（<del>打表</del>）了，经过被巨佬一顿嘲讽，我们终于问到了卡常的办法</p><h2 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a>快速乘</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">qmul</span><span class="params">(ull a,</span></span></span><br><span class="line"><span class="params"><span class="function">    ull b,<span class="keyword">const</span> ull mod)</span></span>&#123;</span><br><span class="line">    ll c=(ll)(a)*b-(ll)((ull)((ld)(a)*b/mod)*mod);</span><br><span class="line">    <span class="keyword">return</span> c&lt;<span class="number">0</span>? c+mod:(c&lt;mod? c:c-mod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>连简单的$\log(n)$的龟速乘都不放过……</del></p><p>然后我们就可以得到优秀的93分</p><h2 id="最后的优化"><a href="#最后的优化" class="headerlink" title="最后的优化"></a>最后的优化</h2><p><del>93分了，冲鸭</del></p><p>向哪冲呢？</p><p>还记得我们的$Gcd$吗，当然，$Gcd$函数是不能再优化了，但我们调用$Gcd$的次数是可以再优化的。</p><ul><li>我们都知道， 龟速乘的模数都是质数， 但我们的模数可能并不是质数</li><li>所以我们可以根据取模的性质：如果模数和被模的数都含有一个公约数$k$，那么这次模运算的结果必然也会是这个公约数$k$的倍数。所以如果我们将若干个$(y - x)$ 相乘，因为模数是$n$ ，所以如果若干个$(y - x)$中有一个与$n$有公约数，最后的结果定然也会含有这个公约数。</li><li>所以我们可以多算几次$(y - x)$, 再来求$Gcd$（63次擦不多吧）</li><li>记得一边欧拉$(y - x)$，一边倍增，判环哟<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">LL n, ans;</span><br><span class="line">LL a[<span class="number">30</span>] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">41</span>,<span class="number">61</span>,<span class="number">24251</span>&#125;;</span><br><span class="line"><span class="function">LL <span class="title">Gcd</span><span class="params">(LL x, LL y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y ? <span class="built_in">Gcd</span>(y, x % y) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">mul</span><span class="params">(ull a,ull b, ull mod)</span></span>&#123;</span><br><span class="line">    ll c=(ll)(a)*b-(ll)((ull)((ld)(a)*b/mod)*mod);</span><br><span class="line">    <span class="keyword">return</span> c&lt;<span class="number">0</span>? c+mod:(c&lt;mod? c:c-mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL k, LL mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, x, mod);</span><br><span class="line">        x = <span class="built_in">mul</span>(x, x, mod);</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Robin</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(p % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LL d = p - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(d &amp; <span class="number">1</span>)) d &gt;&gt;= <span class="number">1</span>, s ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">9</span> &amp;&amp; a[i] &lt; p;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x = <span class="built_in">qpow</span>(a[i], d, p), y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= s;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            y = <span class="built_in">mul</span>(x, x, p);</span><br><span class="line">            <span class="keyword">if</span>(y == <span class="number">1</span> &amp;&amp; x != <span class="number">1</span> &amp;&amp; x != (p - <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            x = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(y != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">pollard</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL y = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL c = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL i = <span class="number">0</span>, j = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            x = (<span class="built_in">mul</span>(x * <span class="number">1ull</span>, x * <span class="number">1ull</span>, p * <span class="number">1ull</span>) + c) % p;</span><br><span class="line">            b = <span class="built_in">mul</span>(b * <span class="number">1ull</span>, <span class="built_in">abs</span>(y - x) * <span class="number">1ull</span>, p * <span class="number">1ull</span>);</span><br><span class="line">            <span class="keyword">if</span>(!b || x == y) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(i == j || !(i % <span class="number">63</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                LL d = <span class="built_in">Gcd</span>(b, p);</span><br><span class="line">                <span class="keyword">if</span>(d &gt; <span class="number">1</span>) <span class="keyword">return</span> d;</span><br><span class="line">                <span class="keyword">if</span>(i == j) y = x, j &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p &lt;= ans || p == <span class="number">1</span>) <span class="keyword">return</span> ;<span class="comment">//小优化 </span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Robin</span>(p)) </span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, p);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    LL k = <span class="built_in">pollard</span>(p);</span><br><span class="line">    <span class="keyword">while</span>(p % k == <span class="number">0</span>) p /= k;</span><br><span class="line">    <span class="built_in">Find</span>(k), <span class="built_in">Find</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">9</span>) <span class="built_in">print</span>(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(T --)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">        <span class="built_in">Find</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(ans == n) <span class="built_in">puts</span>(<span class="string">&quot;Prime&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">print</span>(ans),<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 质数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可持久化线段树(主席树)</title>
      <link href="/2021/11/16/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91-%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
      <url>/2021/11/16/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91-%E4%B8%BB%E5%B8%AD%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="可持久化前提"><a href="#可持久化前提" class="headerlink" title="可持久化前提"></a>可持久化前提</h2><ul><li>数据结构本身的拓扑结构不变</li></ul><span id="more"></span><h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><ul><li>无法使用懒标记，很难进行区间修改（但可以标记永久化（局限性也大的不行））</li></ul><h2 id="所解决的问题"><a href="#所解决的问题" class="headerlink" title="所解决的问题"></a>所解决的问题</h2><ul><li>查询数据结构的所有历史版本</li></ul><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><ul><li><p>只记录当前版本和之前版本不一样的地方-目的：降低算法空间复杂度，对于线段树的每一次修改，我们最多涉及$\log(n)$个节点，最多进行n次操作，空间复杂度级别就被降为$n\log(n)$。</p></li><li><p>线段树建立</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;<span class="comment">//表示左右节点的下标</span></span><br><span class="line">    <span class="keyword">int</span> cnt;<span class="comment">//当前区间中一共有多少个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="例题：Acwing-查找第K小数"><a href="#例题：Acwing-查找第K小数" class="headerlink" title="例题：Acwing  查找第K小数"></a>例题：<a href="https://www.acwing.com/problem/content/3536/">Acwing  查找第K小数</a></h2><ul><li><p>时空复杂度：$n\log(n)$.</p></li><li><p>我们不难发现（<del>读题可知</del>）只有100000个数,但每个数的大小可以到达1000000000，所以对于每一个数进行离散化在数值上建立线段树，维护每个数值区间中一共有多少个数</p></li><li><p>我们先来考虑在$[1,n]$上维护k小值<img src="C:\Users\s01\Desktop\无标题.png" alt="无标题"></p></li><li><p>我们还是不难发现，对于这个序列整体进行二分操作使左边的数的个数等于k-1即可，以此我们只需推论到区间$[l, r]$即可，我们再根据线段树的性质可知，每一个点所在的线段树的区间是一定的，且每一个数在线段树中出现的次数也是一定的，于是我们运用前缀和的思想，查询线段树上$[l, r]$的第k个值(因为它前面的数字都比它小) （听不懂的话，请看具体操作（<del>语文还是太差了</del>））</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, M = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line">&#125;tr[(<span class="keyword">int</span>)<span class="number">5e6</span>];</span><br><span class="line"><span class="keyword">int</span> root[N], idx; <span class="comment">// 每个版本的根节点 </span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;nums;<span class="comment">//离散化</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), x) - nums.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = ++ idx;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> p;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">tr[p].l = <span class="built_in">build</span>(l, mid), tr[p].r = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q = ++ idx;</span><br><span class="line">    tr[q] = tr[p];</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[q].cnt ++ ;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) tr[q].l = <span class="built_in">insert</span>(tr[p].l, l, mid, x);</span><br><span class="line">    <span class="keyword">else</span> tr[q].r = <span class="built_in">insert</span>(tr[p].r, mid + <span class="number">1</span>, r, x);</span><br><span class="line">    tr[q].cnt = tr[tr[q].l].cnt + tr[tr[q].r].cnt;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> r;</span><br><span class="line">    <span class="keyword">int</span> cnt = tr[tr[q].l].cnt - tr[tr[p].l].cnt;<span class="comment">//前缀和思想 </span></span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= cnt) <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].l, tr[p].l, l, mid, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].r, tr[p].r, mid + <span class="number">1</span>, r, k - cnt);<span class="comment">//减去左区间的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        nums.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()), nums.<span class="built_in">end</span>());</span><br><span class="line">root[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        root[i] = <span class="built_in">insert</span>(root[i - <span class="number">1</span>], <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>, <span class="built_in">find</span>(a[i]));</span><br><span class="line"><span class="comment">//for(int i = 0;i &lt;= n;i ++) cout &lt;&lt; root[i] &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l, r, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, nums[<span class="built_in">query</span>(root[r], root[l - <span class="number">1</span>], <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>, k)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 3</span></span><br><span class="line"><span class="comment">1 5 2 6 3 7 4</span></span><br><span class="line"><span class="comment">2 5 3</span></span><br><span class="line"><span class="comment">4 4 1</span></span><br><span class="line"><span class="comment">1 7 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>顺便捞一下(思想相同)<a href="https://www.luogu.com.cn/problem/P3919">luogu P3919可持久化线段树</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> root[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = ++ idx;</span><br><span class="line"><span class="keyword">if</span>(l == r)</span><br><span class="line">&#123;</span><br><span class="line">tr[p].v = a[l];</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">tr[p].l = <span class="built_in">build</span>(l, mid);</span><br><span class="line">tr[p].r = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = ++ idx;</span><br><span class="line">tr[p] = tr[q];</span><br><span class="line"><span class="keyword">if</span>(l == r)</span><br><span class="line">&#123;</span><br><span class="line">tr[p].v = y;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= mid) tr[p].l = <span class="built_in">modify</span>(tr[q].l, l, mid, x, y);</span><br><span class="line"><span class="keyword">else</span> tr[p].r = <span class="built_in">modify</span>(tr[q].r, mid + <span class="number">1</span>, r, x, y);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[q].v;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].l, l, mid, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].r, mid + <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">root[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">int</span> x, op, t, y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;op, &amp;t);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;y);</span><br><span class="line">root[i] = <span class="built_in">modify</span>(root[x], <span class="number">1</span>, n, t, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(root[x], <span class="number">1</span>, n, t));</span><br><span class="line">root[i] = root[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 3</span></span><br><span class="line"><span class="comment">1 5 2 6 3 7 4</span></span><br><span class="line"><span class="comment">2 5 3</span></span><br><span class="line"><span class="comment">4 4 1</span></span><br><span class="line"><span class="comment">1 7 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/16/hello-world/"/>
      <url>/2021/11/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
