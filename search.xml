<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CF1265E Beautiful Mirrors</title>
      <link href="/2022/08/25/CF1265E-Beautiful-Mirrors/"/>
      <url>/2022/08/25/CF1265E-Beautiful-Mirrors/</url>
      
        <content type="html"><![CDATA[<p>期望Dp</p><span id="more"></span><p>自己的期望还是太弱了，牢记期望=概率$\times$代价。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先我们推一下式子，设$f_i$表示达到第$i$天依然开心的期望。</p><p>带入定义式，显然：<br>$$<br>f_i=\sum(f_{i-1}+1) \frac{p_i}{100}+2\times(f_{i-1}+1)\frac{p_i}{100}(1-\frac{p_i}{100})+3\times(f_{i-1}+1)\frac{p_i}{100}(1-\frac{p_i}{100})^2\dots<br>$$<br>简单化简一下：<br>$$<br>f_i=\frac{100}{p_i}\times(f_{i-1}+1)<br>$$</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || <span class="string">&#x27;9&#x27;</span> &lt; c) &#123;<span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, ARC &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line"><span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">write</span>(res / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123; <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123; <span class="keyword">while</span>(*s) <span class="built_in">putchar</span>(*s ++);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res, ARC ...com)</span> </span>&#123; <span class="built_in">write</span>(res), <span class="built_in">write</span>(com...); &#125; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> p[N], f[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = <span class="number">1ll</span> * res * x % mod;</span><br><span class="line">        x = <span class="number">1ll</span> * x * x % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(p[i]), p[i] = <span class="built_in">qpow</span>(p[i], mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) f[i] = <span class="number">1ll</span> * (f[i - <span class="number">1</span>] + <span class="number">1</span>) * p[i] % mod * <span class="number">100</span> % mod;</span><br><span class="line">    <span class="built_in">write</span>(f[n]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 期望 </tag>
            
            <tag> Dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF128C Games with Rectangle</title>
      <link href="/2022/08/25/CF128C-Games-with-Rectangle/"/>
      <url>/2022/08/25/CF128C-Games-with-Rectangle/</url>
      
        <content type="html"><![CDATA[<p>Dp或者组合数都能做。</p><span id="more"></span><p>一道Dp题全都用组合计数（虽然本人也是）。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>比较显然的是，行和列独立（看了一上午没看出来）</p><p>首先考虑Dp，记$f_{i,j}$表示分了$i$次，最后一次的长度为$j$的方案数，有转移方程：<br>$$<br>f_{i,j}=\sum_{k=1}^{j-2}f_{i-1,k}\times{(j-k-1)}<br>$$<br>看着有点奇怪，但感性理解的话，后面那个就是枚举的排列，这样可以做到$O(n^3)$，可过了。</p><p>考虑组合意义，其实就是选择$2k$的互相独立的列和行（这样一定能构成唯一一种满足条件的矩阵），而行和列可选择的数量又因为边缘不能重叠，所以答案自然等于：<br>$$<br>C_{m-1}^{2k}\times C_{n-1}^{2k}<br>$$</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || <span class="string">&#x27;9&#x27;</span> &lt; c) &#123;<span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, ARC &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line"><span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">write</span>(res / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123; <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123; <span class="keyword">while</span>(*s) <span class="built_in">putchar</span>(*s ++);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res, ARC ...com)</span> </span>&#123; <span class="built_in">write</span>(res), <span class="built_in">write</span>(com...); &#125; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">int</span> f[N][N], fac[N], inv[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++) fac[i] = <span class="number">1ll</span> * i * fac[i - <span class="number">1</span>] % mod;</span><br><span class="line">    inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++) inv[i] = <span class="number">1ll</span> * (mod - mod / i) * inv[mod % i] % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++) inv[i] = <span class="number">1ll</span> * inv[i - <span class="number">1</span>] * inv[i] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(y &lt; <span class="number">0</span> || x &lt; y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1ll</span> * fac[x] * inv[y] % mod * inv[x - y] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">read</span>(n, m, k);</span><br><span class="line">    <span class="built_in">write</span>(<span class="number">1ll</span> * <span class="built_in">C</span>(n - <span class="number">1</span>, <span class="number">2</span> * k) * <span class="built_in">C</span>(m - <span class="number">1</span>, <span class="number">2</span> * k) % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Dp </tag>
            
            <tag> 组合数 </tag>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P5628 面基</title>
      <link href="/2022/08/23/P5628-%E9%9D%A2%E5%9F%BA/"/>
      <url>/2022/08/23/P5628-%E9%9D%A2%E5%9F%BA/</url>
      
        <content type="html"><![CDATA[<p>dp+容斥</p><span id="more"></span><p>这段时间的dp越来越渣了。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先考虑dp，先进行第一次树形dp，算出每一条边的贡献，其次，经行第二次树形dp，算出每一个点的子树中的贡献，紧接着，从根节点开始dp，算父亲对儿子的贡献，可以发现其实儿子已经对父亲贡献过了，所以我们需要<strong>倒着</strong>将父亲的贡献加进来并减去重复的贡献（因为正着来的话前面的值就已经被修改了，容斥就是错的），记得重新将边的值加到儿子上。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[N &lt;&lt; <span class="number">1</span>], ne[N &lt;&lt; <span class="number">1</span>], h[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    idx ++;</span><br><span class="line">    e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[x], j; ~i;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(j, x);</span><br><span class="line">        sum[x] += sum[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">LL f[N][<span class="number">205</span>], ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[x], j; ~i;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == y) <span class="keyword">continue</span>;</span><br><span class="line">        f[x][<span class="number">0</span>] += <span class="number">1ll</span> * (n - sum[j]) * sum[j];</span><br><span class="line">        <span class="built_in">dfs1</span>(j, x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>;l &lt;= k;l ++)</span><br><span class="line">            f[x][l] += f[j][l - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= k;i ++) res += f[x][i];</span><br><span class="line">    ans = <span class="built_in">max</span>(ans, res);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[x], j; ~i;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l = k;l &gt;= <span class="number">1</span>;l --) </span><br><span class="line">        &#123;</span><br><span class="line">            f[j][l] += f[x][l - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(l &gt; <span class="number">1</span>) f[j][l] -= f[j][l - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        f[j][<span class="number">0</span>] += <span class="number">1ll</span> * (n - sum[j]) * sum[j];</span><br><span class="line">        f[j][<span class="number">1</span>] -= <span class="number">1ll</span> * (n - sum[j]) * sum[j]; </span><br><span class="line">        <span class="built_in">dfs2</span>(j, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u;i &lt; n;i ++) </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;o, &amp;u), <span class="built_in">add</span>(o, u), <span class="built_in">add</span>(u, o);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 容斥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4859 已经没有什么好害怕的了</title>
      <link href="/2022/08/23/P4859-%E5%B7%B2%E7%BB%8F%E6%B2%A1%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%AE%B3%E6%80%95%E7%9A%84%E4%BA%86/"/>
      <url>/2022/08/23/P4859-%E5%B7%B2%E7%BB%8F%E6%B2%A1%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%AE%B3%E6%80%95%E7%9A%84%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>dp，二项式反演</p><span id="more"></span><p>自己还是太弱了。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先排序，再将k变成$\frac{n+k}{2}$，然后考虑dp，对于首先预处理出每个$a_i$最多可以和多少个$b_i$匹配产生贡献，考虑一下两种情况：</p><ul><li>$a_i$和$b_i$匹配上，下一个$a_i$能匹配上的数的个数减一</li><li>没匹配上，情况过于复杂，之后再讨论。</li></ul><p>我们重新定义一个数组$f_i=(n-i)!dp_{n,i}$，代表至少有$i$个匹配上的情况，之后用二项式反演就可以得出答案。</p><p>二项式反演的式子为：$ans =\sum_{i=k}^n(-1)^{i-k}C_i^kf_i$</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, ARC &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123; <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>&#123; <span class="keyword">while</span>(*s) <span class="built_in">putchar</span>(*s ++); &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T, class ...ARC&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res, ARC ...com)</span></span>&#123; <span class="built_in">write</span>(res), <span class="built_in">write</span>(com...);&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2005</span>, mod = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"><span class="keyword">int</span> f[N][N], res[N];</span><br><span class="line"><span class="keyword">int</span> num[N], fac[N], inv[N], ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &lt; y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1ll</span> * fac[x] * inv[y] % mod * inv[x - y] % mod; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; N;i ++) fac[i] = <span class="number">1ll</span> * fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++) inv[i] = <span class="number">1ll</span> * (mod - mod / i) * inv[mod % i] % mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++) inv[i] = <span class="number">1ll</span> * inv[i] * inv[i - <span class="number">1</span>] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">read</span>(n, k);</span><br><span class="line"><span class="keyword">if</span>(n + k &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>), <span class="number">0</span>;</span><br><span class="line">k = n + k &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(b[i]);</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>), <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(a[i] &gt; b[l] &amp;&amp; l &lt;= n) l ++;</span><br><span class="line">num[i] = l - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i ++) f[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= i;j ++)</span><br><span class="line"><span class="keyword">if</span>(num[i] &gt;= j - <span class="number">1</span>) f[i][j] = (f[i - <span class="number">1</span>][j] + <span class="number">1ll</span> * (num[i] - j + <span class="number">1</span>) * f[i - <span class="number">1</span>][j - <span class="number">1</span>] % mod) % mod;</span><br><span class="line"><span class="keyword">else</span> f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) res[i] = <span class="number">1ll</span> * fac[n - i] * f[n][i] % mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = k;i &lt;= n;i ++) </span><br><span class="line"><span class="keyword">if</span>(i - k &amp; <span class="number">1</span>) ans = (ans - <span class="number">1ll</span> * <span class="built_in">C</span>(i, k) * res[i] % mod + mod) % mod;</span><br><span class="line"><span class="keyword">else</span> ans = (ans + <span class="number">1ll</span> * <span class="built_in">C</span>(i, k) * res[i] % mod) % mod;</span><br><span class="line"><span class="built_in">write</span>((ans + mod) % mod);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> luogu </tag>
            
            <tag> 二项式反演 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test/2022/8/22</title>
      <link href="/2022/08/22/test-2022-8-22/"/>
      <url>/2022/08/22/test-2022-8-22/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f3190f7ac7fd329a916a74ed856124500d3302a0fbda9611b942444075f18331"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> 容斥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test/2022/8/21</title>
      <link href="/2022/08/21/test-2022-8-21/"/>
      <url>/2022/08/21/test-2022-8-21/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1122986cb326a03834dbf5037931aa2f4d03aa5b2ff99a635ff8f76099a17679">f7c84d52981e04730e0cb33ecf03c038910740211be4281c6f3eace9abc81e1ea11c0745fa7f4ddb00c85c6cd520f02eeb3c7fa267afdcbc94f1b4af22f5e443d39cc0b63be0e3bcf144dd7789f25c39c40cb5029d2102b691b4009d9a01ce1dbb49c8e05d1419af353f74218d6edce1ec35ab194c186782a58fb4894d26459fdf02fd3dddcbe338a92e01a59c77fae76be4802d9eca7e92cfc692b06b33be28445e1fcba2be2c6b38c2799fee692feeff58b35674176fe62b4d35f60400495eab63676cd97ceb2a4d2b279db99daacac53252c5a2edabacb09d4a286b4ee289b690af9c5590dcac65b1ed6a77de650cefc726ed7faf41f18456796b232113ed56f11ca093804ef440598f8c89b486975dfd087155e919395eca3e06a28c6d30b3687cc0e29acf285d098648c663449d655d40861b097377738effd07624556ed7030828ac5dec89b073aafd2b3349c5cbc7399212266070021ac1b46b94d2503e7d69bac65bd571ed1c2a29cd0bdb2b07e115a59292b9a31253406d1ae8d88cb46bb35aeba888eb1b8176501eb75e5cbce9657fc31c78182d760b7ea22712d44a59ceeaeec7fcd59e393aa11a43217e02e9714e5ad97ac4d56d9008f5e40fb315a294c74b3c83189e4a850d82ed3671e9b4a2a47f49ba76259d6b52d34a890469ea6998f5b153878e7196a9e5b902a969160f3c84303c70ccf9581641d2041909fbef4fa98cb1093186de9fb5d1bd628f876a0cad1681fc2da81d4ee25daa3f62dff64b32e76d5b7b1938e68b8c61bc0b08b5658160ea9ae52b81a99dabd0051eebb30c29e150808bd201ddff0d7738eb969f95028184307921345877f5399fb80434e929b9b1979b7b6d64b5bd7e699956b10eb7513cdf5b334775b16570c46b5fc15ed96e6b9944de2435f6b5e57fb3ba2331833bf890dbf1da7f3730e2e7951c94eb77ffedc253fcd19a4c2b7f91f0e129e6032a37da4f62586289ad4b3f0ffb7426976277d9b5df8442e69a1e21f2e3af435d805fb66a7815044d62de9aa778772cdd8b94f65e27953ee2d766e442974433f2e437fa4a56a69d28a1d60cbb631b87b4842db38e77529b2ea1c05860a2a4496021c247db9ac45d45aafbf0dc94dc85c4c8013768ed248b32c1ea0b8316cd8ef68ba1d2bcd670296eb692c4848d1b863c8a52034cf76b3505e74ecd40d0188b9a4f4fc410e186945364b18a8cced92e1ecedb2c6335aabaf4eb18a51210bb8dc5978be0572075f17c3af0c14534c912437eb1c5a9fd2fdb70ff9574271988bc0e10e5c2e72555a1582f056e042e89241bb9ae7a0d52a7680c5bc48f8430c625d7e0851e8aa6d7b832dfef3367071af6be7df5f1db5ed9a8ecf00e928801542daf9c6f1b37d85c51b8eeb236ba8536fc68f247084d1af2db5b31d320ec342f9a14cea279bfc6aa484133a56c4f61392d4002095596f5eb0a5a1f019c7f2c242738a7fcc575c1c749a88aa467051b4d44a99c5796b95006ebd15fceb623114f52a3447d7ca5809f13f91675b045adccffe8b3047cbdd09311322aa141da8408ce447531a3b1706ef279fc8758d620171742e0363b605bdfc33c8c5aa0e351c9edc62df85c14b39e4756ed4c80b15e6ec31f51def557b9707fa4aac97e0df02c27cfb399ffe3b4338ac4a585df49c94b4e4df00aba7d3f41603b712c9f7c62f343a049c4526f307c9d12cb918765d8163336db8fbba56b9ad14c2bca58e60a892f968a15c4d5c187b71e416294ae7dde1456f71254158f706998bbb0f35d4801399da789c57a0ada3eb916b385723e140c2f200f31900ec67bd3dbd23fe4da202ff0a88a5e0ea9e8034fd5d178e80e145ed44510162538f6a69b523d7adb10f8f76616ab81a647779dfa5bee19ee32dfa2cfe7f40712a812a98ea1251c737f2d17a703ebded0776da3c571b26b61c1a89137e738867e9680b3b5e52db293accaf4333d26994c55a92d00cb74fe01688137b0d3715d621717dcd7c622ee886bfae32e41bf6564cec7d1f8b1d5c97ecf3739a82df008264f93a49c6d8008bea7b304b06eea6e340ed8540df40c42ba8bbc37e203d8f86af64aed61c24d1eca1cded14f6a401e6e43d733586a48a650add03db2e5d929e1d8976279a7bd3cdcc21ec34667d0d88dd9285c27bf631580835266180fe8cb05bcb296110256e92941745ea95b1fcecd9dbd37dc2f7322</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test/2022/8/19</title>
      <link href="/2022/08/19/test-2022-8-19/"/>
      <url>/2022/08/19/test-2022-8-19/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b9c880b299122d048d8402bc2f1ba86dd910b166021510da780876936c9303c7">f7c84d52981e04730e0cb33ecf03c038910740211be4281c6f3eace9abc81e1ea11c0745fa7f4ddb00c85c6cd520f02ea0992689e0881866141a7ad9d087ab004b6d2415b60931abcf09c73fcd61541701b1f47a5f1d823828ca8d019a18e94fc880b57cb441dd2351a9fc7c915f9ee23a08a9c2686607cccdd04bf04ffdc30765f016bd465cdd003e0091a71b16a89c0e2cb504ff981b7a38143c764076c2a52e45883cb1e93dbd8e9378557a9106e2a54b07982d9fde463c8fb2cd410b31a9869bead71349e66bbb8529aff9064a76f6454573fb21ef443564ac37271107cf635de0a642c25b36f20de8fe9fe63d710d080eea739445b26789ee86bf3759bc46afe0d9270706b7676f4d2481cf23a96f90db365fd39efad231cfe64cf6192342f35ab5188c46121d3cc0e3ffbb3fe8d4a020dc400241b563c7c33225ad67c5e5484acdc64978f0e0721904d8b08532c93085460610d24f2b2a37c498eccc4823ec4bbcbf3094be00d9d8700a21e4b75cb3f045e079c0fd6cc63751a7e999b3c56d0c0909a77fa3987b78abe2b8edd894a8623f92024a9f448b0a7d92bd65cdf6f4642d701f143d8ed7a448a07090b5d85c99eb7097a9f428a4fc88ad5f01d30db670c61a3b8822a2c9ff36eb02fd6a8b87621b0cac6ba3b96bb9ced3ff0bb761d472de50f0acec44ddcd45f088db870b8c44a9799971877402ec6facf5ded3d17218c5755adfbc92852671fa4e93145d66666d611293dcb6ab7ff939cafb38d34d56139ce83431cc49894f29f3f1baf6eb5b12aa2535e3abfa0a21a9ceade92cc227927e13544aec7c664db375c0afa632ca7d1bfb7ba350cebc085de62cccca80e7f9ae490ecdccb88880578cb064e2dcc1fc7f194bd13645a2c367abf268aea10772d94fafa976ac8eee7e2a3b6db2f7dd0c65650ed45d6ef631fcc0eb1e016ddea9bfa66948f1ce0013cb11c8088e0ade4349ab16457a6e15ce38020a53c2ee369c18f7b5655df9777150915c22aadec1691dd23c99e1b0e9905f54c168841b5eb6ff3d4510b159d2c6314532e453b8de34f3a7fbc3f2956db91a7c30a994f1ece9d8ec85bb2eec1eb3216aab265e8f952e35c4e304454db5a0f3139332ff95ce4b7be27c6f0c1ded1a295b251ee813d7f54a3aad998c18d4e6320483a9cb1a20e67a41c92782ccb03192779b6bca014cdc70afb784aa56080a67de69db71c80ae16084df3f7ea76a2ef204185dc7b61bb941ba42c48a855872dff41ac0fad4f6f125ed32fd93608714d014eae0821d3052ed9d291677e94eff757f58da1e1f8e30b28bbd54e5f3d8977bccd97758373be3abb2ced0b481602a83bcc4de22b452d0511c75cddb52f0e749f74ab679172b93ff2bc22ed5863dc692d7c6528179beb94d31910ea2c4103dd3a15d101a9f7bae88e2e611b5aa60e075f850b4e7bce0de47da40743a9758c8c5f4773f5d50ca61a77015676e6660e9d0f32aa889ef73d70214b1d75f76ec8ab7a622cd33ed810667b694d728a5c64669c5bf01b101f2d462cd51f11c3b1df55060b880e28b5e09a2242c66cb1d468cfacc0c9f8cc86e24b72f491ad4efe1a90168efc0ba07407d255758f8eddecc25bc5ebadaedea5fa5be870ca9e68bd46670bf55c4f3dd1b461d2c7de6443649a28e563b6c82f9eb13be5276a358e729c6b56a3005af7874b6ffdd4b7f0a9a53634e2f5f2fc36f28c2fde1d9c941a7e3e8e9daec141dbac71383ea8221ff46d6dfe9a3dcf93817ed5098b55fa4cee683c31f95a3c2827cc6aa3d9876951766e539d54610cb16b5e8ae98243c187d6a63e7ad9a820c0e55f120519df61e685892e5466260543fcc6ebe6c0534d9c138c8eb4b03f1a8bdd2b2ed0cdbf261eec65abae9f51305a576e5f1a2f0304a83d446eefa9668c003ac68d0ce867064e5a06a7471b671054275171d1a25740bb79de11127a892d0f0b687b3d162492c967edac848757bcc570a560c6b4b1a9d7dc2fc0589067317804f93c969c41ddaa8db4f441fae5312121fe9d7f73f471480e5fe110c13df0e4ebe032e757da07c538e14b5aa9a9b2210f881817b77fb48240fa5254d6ee8ce06b36bafed75c3e4bfe2e90f1c7c74354842b649663a0d49770a2cb421f9f2eb2577e658fd862b22dbbc6b1e506b406a89ea6d54ca34791ba24f4648d28df5ae32202bfd39f8487183219c4914ce5530a38f611c84f5f964b9716a4ff4577932b990992484c3854a84dcedc1dca3d8928886c4911b0a57ea2d44e89a96f6e7fa0f22ab076db748b97f809ddb779fab9d22729f52e63b85dfbf79ae1e653845fe5d7fbfc28f40b285a82571531a22168a6a18ef8e5825d5672fd3fb0fd472a0758baa950ab2e2d54f421fdefbe3b62e32fad7bc18da77dae1db89ac08d031e89c03f31b96991c142bc25032a898ab541c167246956b13af6047e1e38b84ec7692268aaff581e1547ca6fe290d473231354f52469bec407d889012d265cfee171d51e79a68c7fd457f81fa3687959e7cf5d2d14e7a83518d16d5f8a09d8c531a3fa4fc048c58ce7bdd5371eb0d4f4a1e871828ffbb60564473c33ddbec49d33cf0eda5916df2943026c140af0322c357f6e0a56b66272417198360b223a9e6d551d5878fd1b8350b5d9af5f76d93b4d347e0eee875c48d0f6818527f61063a8e711852f6848a9e64f59ec5a03eb12527ef623b53ad077f6901d7275ff8bb119b202dc1a0972e74767c7fd75b9c5e4bd4db4763d8fc1ebb16fa4ac2d8942e83dda6bdcd57ed98034bd5b054cac8a1c0af4d0bcdc98ceda9ae1ce1dc980f26e6eedcf43506bada0b7890895d3e217c6e06b9f9a6d0bce0a6394fb386c5b595b655130e61509fdca13b299af7db816809659b08ec796fc7b54f41582e04d0e7ac84a81d56acc0d9afcef693ae836aa580a60886c65203da9911d275c8b5899f6ea805913328407734d5b7807b4d88db0da224e4a88abcdff6cc1c34613c70092da06311a3d55d2201a8b39416cda2e492dbed1ea65556a21b5a9bbc76cb7f581269dc6db61d14fd6a6398599c411b7960b92756b9672609f36c918e86d53916bb990a7f01a3bbb1f5364e450f6936ab8e1f7010dbc3dd8587a432cdfffafb16ceea4288ba503d3b7e4bee9c65c34ea9a92841d7a2836a88db1d50794b1fc20df45cd19ca153c20b1e761d3da1157271682a559fc6eb9eddddd1fe965461678a2e84c0c8ed450d8faed34e1217b3127e6f74f2f7e788331629030c6f9e304a6df6d9362b2e59af9f68bcd9ac94f890f18f5d258000b39b020140113d69253f34019a68ddf87e33ed528291c9813a97787d1f508863329420063ce0b8c205dd9595371bf32864aeaff020095d391955967d3e6ecb84bdc2d1bbc8cb09b8d7ac80cad2b56efcc3372fe05e93b4a1e3ac33f6faf6fd3c52aec0c0033fc2c8cade1b243afabdf7fe4c065f1a2243eea2076435a2f38b13d875098afc0126a7bc487759d18b93b3de8de4c644e322dbeb266056d414894cc3e4f7213a7184a61abc103cad1581c603a0fc9ece5a676d8faffdd495cd01f2ce67489d15527afa5f919bf60158ebdd308db62ff9cfc43a2f95095b16f49af6508b28cf7c1291c377778cda6e623748138cbc5128df6c3071921170bb27ab292f488137c26bd2301b03e6b2dafb2a55bdd73a0dcbf9560bd00a8dc319bdc826870805e7cbac6732a7e1fc6e4cc14ac3fd8749b04bc7f81145bb22ab47bd0ca7abb8656022f1fbe8938c92343f07c746c265b3e862c7bc1bbba1e1972e1d282813b18cb456b17a8dc8cd052725edbee4ba6c89fa1a9fccaee770938fe5f420a93ebcc4a2f79068509c7d1f5ba8ac71f733c014de6664a6d3bdfabe9090ea515765281e96bcf5716b74befd57454410fe0e6c6a2c7cd809a39d9f30dcbba0e130fb3c4f732ae2e281febf2a2842808de2b04db7128c8277a086f01dda158058b0aba8395ecdf75b7c4a1698c39ca7c8b862a8cbf028ef4bb35a3d5f159475dfc2b64ddb8f40662be17c6e935ccbb41e9de6b66139902dd902a5fbfca0002862b78ad1128c51df2f0afb5ee398ef969f31aabda3ba52caa91f3645f7e346882843cb5194b351a143b297978931bc92c22ab3bee733d9c20ba2193631799e61841459296ff39b5a77da1bfcb364a5bfbdc5620212617d88da56898d9059389a2b528ac7412418d50735d4094f43d6d2b25f2e4c69633dde9e38b1dbd368ef84226009c931c6104d1e0a832e7f4cd84c9211cdde7f3dcc22c4fce486e6fb9d7ae62123494903e0f331e9ad3a384e7a4c26398de2802619f97595a89310ea40e4e88d788fc563a353da16f7e3fc1e9d43661a0cf5d2c048dd91ac7c434271cf66f964af44d905e580bf02231dd3abf452fdd48ce9c734f513624bdc88d95fdfcfcb1cebda24093509b60e62d7b7196565b57cc9e841b42306dce78d72b00f511c938e6fa575b58646eb2aff309363a73f0093d6277912c47acfd23b7e0a6228ee63e6d2f957652351503f120d5c5ae285ab71843796d87013a27f7605ccedc6fd7683a374511d959b7c2d9b4e89ec987123f4300af64f83260bf615691170e7e44ed68217782568b61320baa7d5b340e3cfdc44448799bdce5392b1c5116a98ac1c0d4bea416cfe36a28e716628bbfa6ddd366da47f5ff77f7b540ebc37080d666e74b61be30e8a030a32d451cf19426aa41e709eddd532e40b1f33bcc29ed3e2abfde88cf08249253237bcaeb32bbb95a09e1466eabf46a550553865c3e3a9420cd5f3bb66f20c86025664a0524d31a46f43a15e6800d1d104475f8015b38e7b58fd823fc3c78359cf2282dead5da745876c19769fb848f6572593d252508931e191b77c8c5a0b12bc57e43f4cbe7392815a2d79b0a5c92cccc26763c4468f166ce2446d79860d24d727fa57ecfdb018673576a2be1025bb1a64ff487c476a4d578094c685faf628c50888536ef543a923f18b50be0c48aed1fb6442db71446a070cb3966fa89dfe2f08932289a425b5e4553da4aa79c82422d00edc32f407faaba674966926eb914f14b2c0168b863cb8b6f72aa33b815401014a86ee1ab487e072a0244ee891ff5cc0fcda8fd44920437989428f3511fc7e36a9e5917cf46a6dfc90d5e1419973ceb0c1853dfdff521db823d54822152f02936a0f493a54f11ceaf6dc21462fba05794830fc4840cb6c8ee3c2a5d901e9fc5c8c12ba60ffedd44f582fe438a73e4f3983c2319fa08228a252753070aa88a94da4577b8681d8688ac75dbb91fff0311f3930f220910b4420c0c0d7ef0f9cc2df110f36bcf84fd3d6bac6891a64ae2422af0190a470f8b90c25eacefc1c3bfd4e69592ef78f86526274c5fb290c2503bd4639e7c602820026a0d73124e034d348411bd4e662a4a1370610c505cd8395a207b66c7ecc3f35c01fc7be9fb41b1c9b870cb557d1a4d185c8069f44e0ea879344c95ab6e7a0646f1344b339d79b08c03963e3418584f73dd3b1789b14e1ff5ce6d042d44b39c0df37f40a65c5782b6191c841d3c9cba56236fd0dcb2ce5cb5b1a6745815897f4aa9e076789a404ab77381437f5ffb42dc19e895f78912dae53c6fde7ebc3475f9d9f1221081de2aea418587630adcc2fc33c59d3539d63f84d165ebaa508ce70eed4084038f0da899a40f33f11799fba5c145b722c93a6821e07687f4a29053adbbecd1790c4b297315f35034432eb563e0e26365c361e4e7aa6565b83682d8d29c9b6c34667672c0a31bc81b0ea18b099ce4ede4afd3652ef8d6b689cd2865479cc2700173a38959610485f645d915868351a099a963c88d3fdadd6124f4f351089207e3473ef23ebe1e5cca74357f793e5d758fa86b1ba1c5719ded1064c393f819966342a45b9a5fd14994d131eaecff3c07ab6b7a3413f7286a2b69894fe5734d79a3a6c59487f9bd152c9268679aad3b4c32ad1b7887a45a7cdad51f0243e2431a57f8398d57bd18deac09a05327f310d4458831e879864574dcee589cf99639912fda06067dfdb12ec5df53fa0bcb78462843a197c564554712e96c7439d42e6b87fde419f3c3233f9b259ed7f3443cf90fe1f7dbe2c3131af87b2f6b8943259e17a734e18373c45e8c86669dc3f12f1f83d1a5070abedfb7e4ade9550ef45193e5e6f153a873be0386448c3fe326aab6f5e7331cf0938c9964d28dda1a63c059501808c62de2fd7c05c3d478ba8b1fc935055a97e5f5fbd45cfc27b94cdf361c1901dde06b921358d041ee1abd264d4faac0b6be5ce8cdba95aa8dbf878025a224ddcb578541949dba91b95bc5ba4a0159a2e08af17c99cc24aad034f762619811ebc513da0410e693afd07dd1572eedf5f3b4d6d1dda1e541fb1291a7f98fd1ac10010be28168d24fd05ddcec66c7c9536a7b9f55080a5dfdf99cc7a9ff18ae2094ecc0c28559eac23bb633a2e1430cad2cf02c5bdc16fe90a3f8c6729f467a0099de828b64bec6468996e55abaf49a090bcf99be22a212d2c55eac666d7603231ccaabb57dd8d1ad0852adaefb5d0028fae2d3408eaa4f307cbac024383b93389039392aaafb8c641b6f763b28909c9ab4608c223a7833bb7722207b260cfc776e6703f9b0cc3c7d7b598d7d1f3dcc7fcc872376d27500d44ea8f96bb43ef629dc1ca32417ecf98696e3f3d0906c73fd3301913ed5054612479d8cb90977bd09058659c8419d7375155059ac703dc1b0bd325ad2fddf7784d728af87dc63f32251aa4b8ee3c75d4415c88ae32b86ef25f9a2e0c624b895929c460eb5d28bbaf7838ead6897aa0b3f505a50cf4b3762e23fc1e8ff6734452a39cea083d929aa8b8f04a0cabe2babd2e590909e115a63ade562bcd115e79a590113736c9d973fd71dcd6fc642652340a956910e30c8ef2001feb4d5fb39a88872dccb406cfc33e6ed235180bc09eda932c4f336af04e34a775a2f03eb89a931958443b795c645db6b2ee1f832f566bf45cf9d03e90bb731079f53cd8bc32ea5e87a98b5e00d524b497af0dfa2629764bd75618c7cd75c11633dd99e78379a19891c0859af94231c8f2ded0cf9268ecb82c3a4f366c0836ccb1f77e59c6469ea67d90fed2236f47bf6d34b52bbd966607fb97eb7940c34f2f2393315d73a621806bf771c5d1ab7868365bc9d19b1b1291040568d54ed763da40d9a6860f01bc2648219bf64e6754cca633bd67afae6284281098be5893f099b36fbf8784b45f0f40186130cee8be1330c50f193b80a1a2c204baff02dc94732dca3fa63f517f579ecfbcc57f31d92e0da53dcf728dd7e8d8aa220e02dd74a09534909d2ddbc24add13dca87b1c168b91bc13bb4ef8a573ef448687efd769e1c77ea6e1f8a388511430b37efbe775939009ae5e5e02dc9c88be94674a9f342b90900b3c925c506f7b362204cffe0b7c4758b01925d3ce8959807b2223e4b6fab805525206df8d2fd3142a3954e71992458404e641ba09858ce4abbc26d698e23d9afd142a88f8e905971991f2385553b8d428f11a7d3e4378f55c6a0163b328315e70148d5936ac8d98304af4c8da8905b4ff6c4fc377bfeee63e63bfc00b42944678b050a34908c8a3f58fc61846f7787a84546eafa378a951fba25fddf50511d64c3ef3d01d5c837b03386b29397a4a79adc86b0ec811dc7f337f8d94e8308d47587e80e519744f77fe4d2f7d83cd3277fb683237d0e90a275e243ec016f825c81aed6ce8cb5a0c0f6c2a170328b804227a5002909422b57a80ef2b7dbab5934747bd23c994a532cf5bcd31ef7116e5bc645572ab1b8311fe311baaca73cbb07c4713fa3c0aa52d6b31d8e7037d8a76f0724035592779d06879141eb2e5757c5bd796400028b67bc778098f4146960d9c0793c7b2c21d3c4cae36914ed194e67640581163f491007e6cab0651a7123dccbc50b1754be9e7af56deef9bc0f36c1ac07270a70682abb2378c9a043cbba552a8e83d41df34d86e4a49675d799db45618077975375df972c8afc76d47c846e1ab0fd985b4cc450918994e46332a4e3ba6de413e0a90954ee8a7f1b01c99d553c3bb2ac0a54398887264b74179b158f289a3e4c256b471703096524a050c2c8584f61e06f27bf24611b7aa98bb4001e17369e1d189c77e3aff48842784d97835859b329bc48d1bc3adfedbb835a93772e54bf5ea37e22482e1aa8f10faf04c63bdde357f65dc4cc627ce332c2bbe83bec0303df05d08d54f510945161c6c46d8968d9e75eefa0886b3936ffbaa4dc816de27979043a80c66c4962fa132430057886c529046a177971935e99b24b1f190edbabdbca2b0bc06c3d53a575dca4d3262c327e32fa1fc52fe5e158d9616308f3b80c9c4c3958f70e84eafe19ca0021275c8656d7df668567c321fb82d31fc0ae95548178dc7dad491a4f4349462a2d3ec84ee0e08751ada1ce25132924bffafbf7cd07a7b7848c97bd48435aadc226f3e17524682221c1fcb1d892c2d543111fa7bf1387fbd0237e9c2010de6feb9b625c3d8d28f2ab402803b5d80e25deb6860456a299dd497fedb77df946332a723730c93a8c65a8ee9e379ecc2ebc3eb64448ea305e45bbc8097f9a848044335d11d31cb626c4fbc144f1ab9e5f140ddc95c210565cf5bad1615072b1d5f65f212653712efc39d56b22ea6fe0b223be890384a611df3e53989cf7963874e7be5d562e9374e631b29609b118a5000aa4bcec008a8b202720603de263b55aca7e21bfc5c16e8345a8bbc697bd457bba3dfb1685a800fe3e281b35f9b9573b5fe1de0934ba32a13ba8ebec4c99819329ff03608c7bb533f5982652f7fcb359977f433c4eb7e87c3c1028bd13c5a84489e228063098ba527f52efdeb17fdd6f3f516554fd93b4519807c0befe0be4e88821d039c5c9a2afb9fae47caafd36ac8e0141e5ba59c2c625526932487c34d0b5bff7764421ccd0554a911e91a44ae04486932f1e356f3a3098cfbe70af71528af2b393d9980638ff85686b2c6d44a79d38d91532c55d19a3b35976b83efe4d77cca8bf33429ead4096ce74f8db73367b8fc220281ae0693b560d7fd9dae173902e84aba991ee42d43cce205a9b5c844ba12b2216491a72988971255ccb21eb06c0195fac120e9e0226e09ecfeeff64f3c692ebd5a4524938f4e7b7ad6511bb60883983942a54f12bc20dc0a3afcf370dc753a8b5c076e8090887418b1faadb22196d4df726dc6e3cfeaf73177030ba3715352a21121c814083b2ac4a4132f1f8a730cd216f6fe9257d6e43a7dc9393fdd1c8671cf956b4795bb94c31d5f3358505bb2196c44766e5e14dc1cddbcbdccebb54f740c911be6235cd5df74a68a9f681955646e5a06fc046256ab1189d1501368499f859108914b14a4905a72281ac3c3d85915cfc03ddcd7279e61bd8c39586bc75642e1458ba120d27a28515678ded564fb8c4f45bc287e714b37050c96c50effd23a9d2954d7b10907e92a4e1cca5968c4ae3c8574f5ad94dd9c068b107d6250569101d7e93d11c231c4efa6d1490ffdc220b2445fc890877a90388cfe421a05d40db3ef99715db9c1014b7bee3b8cd9b8ff1fff702e0d189b6bc139c93c71c53cb3991337c98967e0522051283bb02dae4cad64c86496c02897e9fd62eb9b65bfd3c1e64aaf9b390543e9906335545911eb4089d7651497db6f3566a9104691adef10b7796591b62cd707c1c37b4ddf558db91bbd7c6e4fca1b6fdac66046769aeccd2676058dfc15cac502f4e24398015877df034c7389c693ce669ec9de4cf21637a40c8baddef72b129f63f11c1f9aab463791a6ca56e898c420fc5749284e9022165652960c777a2640df20a5543b21d602532290e92ea03a7c0ee050b6abf2c1609b8bf99b70c2236e6389c8d23f1b948bf2068318285f7183a3c0f34d11a9e5fcc3042f4ff9d0a738a26b51bb6ddc8b0def20020d87ac92b3d2d472bff80fff39284001b9417e77d46db2538398b757a64ad19a00f4bd51be344e322439636ada83ff32189b903e33fbbc6ac7fcc40aec9f53f21297668e7de6b48ddbfbc73d6007302be1c6532dccaebe80e08ada5d13b30617b151ba64264f4224fe648714c43eb40fb14af65c387c28182c3da703230ebdefdbed65043a71871bcd10449dc2cf9ae9eec260c70654716037f472e38163a4cc8ee49bf793816a71f476501c9147e53a2cb749d093408b66e69061c0c6088c70d721006bdd3d5ced04e794e258eafbb988ae2ccfebd45bb1a1986a206e4edfd0fee14f2f83d1a93e4ec03cbce7f01d03b4e1ad3435fe65cbb425778da583ec245edcd0a2ecedc2143f9801cae12cec9a503c76e40f180641b727a6e24a8a5605ac158256513812e9e9e10b935b9961927df2b0d329c42eefbe625ebbba6194435d28502435e996b09c4e8f72f392427f0a3f00ed35d2c31c7463aabfde5f52f5a309ce8b924a259bb68e8751e0e42b73e9fe5b7fa18ddd3f5c3fa1588ecf637ba8742724d5f738cc14bc3c06d1ae7fd2c5946bc66e296d5cc3920a1a95d3224ab67f9fb057528ab5aa842955ba22f1297bfbc9a878b96b3abdc8686917dda17a4b172c0f2ca2fa669fed6b99c22d1a19999b0caa139d517e18746bc1f7beba2804d292aad0b38ca4c40113d24e6bdd748db5ccb0abf008a698f92b1ef9cacc46649fb472d9428f598f47f54c9375375dcc1bf55629601a89cf3d90880a4e2681ec002b0a1526cf79daf55d0d8b953986b952788e650b4810f71098202457750fc8c1575e9f586e7fa603a1a5cb9f050f7d3337ae34d24f1f3bf6f5e2c63f1a5028f9ff4356e838c8f14116a1b112789ef99efeebd25f73a3c31a19dd86d7751d3ab93e63e315221c632a8a729d3fadeacc0c3996198cdaec0ac032249efb7ef4a81bdaec777b77c41d0eeffadecc46100b26843d1b701dfec6b4b3a08927c0acf2946f2b17f7cc06a753cbe1873d729fefd80cb317a06a379512ee8687ef73e50a910df37d447942f04e43d179c762c338246f84fac550fad11ff767e30011ab0eeb2535581fb258591b88120ddffaa850befa310464ecdeb3e84eb2ece2ff44c74ca5cae355dd3d17bd93ca8f0444aae1f0d8bfd3c28dc6b7f82a4819d60f1ca1dde3d2d4664290bfbd4a6e35f9304bb56dcd2a5d38f14102def09e13bce7eb4d8ea3f93b7c656869e3d622df631612405074f6e9ba533f6e38ca8bc45f7746767601a9388d20819cf95f3bf33e13f3794851d5d96859038507b910f01f2834cb94de55c253569a3093562471b84bed796d23be2ed4d3fb28415f2f7d6f2562bf2618b93a454311080b43d803df3734177aed24572467da31a1d11a2afdac5c6718064b7aa3e89ae9a5c39fe53e78234b479aecbd571c12a692d0047f3747c8fd08a5900e3a438617f0ad6ec0def8d5f35ed638953e9b53b0b88c98539aacf8d81a3367585be41d466ba2e168aac1997d19a6f1fac364e6e1918fbaa4436bbda732cb1b3fc7357854b4357f92576831d58cc6d458d60ba4c6926a559ef02987af03ea215f47e3d1b83b2788dddf2b58fe862a882d12839b398cd2a420d4b3702114d08977ee150eb66a7a6a26e3eb207fde3310897992247f385794f0a82a032ab888c461eb7bbd728e9e004a62ec1e8020f53ec7c518a75b67c91080711749d84d6355ccd15325ca64b7d51e7bd5381d2123708d4408b4343fa110a9a4cf710884b9fa3da4d033bf8536651ce61bc971b3a91764c06e27be02c4ad7a441fcf632f61f951586ed0ed883b153153e65cbd262812427715bb5b391e0cf6820c24bc1b018b18ff21464f136e75d65a36494dc462948c0529308989e08caf21e8e85df70b1fee5933f81a71ba0e490d5fe3d781a7fca87c33fec68b31a78819eae91f6e8ff69becac74e2817ee60e810345da09ca56d9ff5cba5c61ed4f8767d1ae7b220396682c3b882203a809a17808fcd0538238415b95c08913ff974e8a06e58569034d29c3eaa851bcda12d225dd75b5e7f26619925acbc552d04bf0b15efaaac21ddf6b904db6e173a756e0be0c6d5af40067ad7849e978387e39136d2f46dce1d316257a8f800757257c686be78bdfccc1e1fda827084b6924122d88381c0b0c0d8e8c1443d7db8be764b7a96459ad72cfb1343960c90345f9845420b13783847632c07310b63d793ece20ffe624f0ea8850b1e1511e1d5b6359575676aa07cc339db187857a981dcc8c770c5d6483171dd3836e07df49f61dbb9d65a134fc07f181d498cbd0303bfc4462b993d56bad05c05446ae2a50cb06b7291b080affd86c0cd3b2088101404a7e7e9f97c537bbbce6cd1c022196ff2eb7d2a7329408cc5822ff7e1b9149adec1ca8a289555b0283b84f2ecb8db26d0e4958f211d0b741e3ef58130dac36a5cfc3d39b7bdf98a2b9ab53407a6746980074b1e4ec525447eae9786343336f35524e6f3de2df6fdbdb9ee07ce34b9f5709b9d271026164e32484b782d7be9e3f814b655f936cbe9577bfbf72f20b13719a5acc160de0e1c95fb0ed57da022162f1d31413987b3a8852667a8e80214db9dbb4915d520f52939572c9e3df0f09e9d094163523c3b0ba8339e5a364a4b4239282b02831cfc3af52850dcccac586d13edf7ea24c7d45b409fa3637d4392e8563a5946f284a2ff6c378fff9b589439afdfc2b613adfa851dd7e7d321f50e18a40e0ca9b6ef513e605cdcd4fa4bf424ca4991baeb2aaab843b8d07143d9aea3a3c1956b85f193cd4d11f68c4b82c3cde2425dcedeff0d8201f80ef358e46e1bd1ffb94f489a35ccbbf16b78172ed90c8c191156e6f10422ab8e0875c777e11ec0c311a6826b9eadc0bb09f1632fca68234e92d47a4b7e18fb1cfdded5353354f48eeca2208a19a95ccbecd541ba2201b7fb1f7acc31d9dea16c866f4cc71192c07c7f1dd65b8f9deb8b387d9db72ff480caa6ffe7563eddc560b21bea4790f40140a27d7c136d0c70478908865fcb3b17583a61f8df7941a37fb106b136ca7ac39c4ce6075cfc623629bb64ebda0c96ca775d5d0c8c4b7c9b1e6fc314cf315426af4358bd995929b540d0ed81436678f9ade70e4d0991240ec16467c49e81a63da6dd8646e2c0fb63470fb3e4e39cd85fc930109f2a0f44f9609ccbf22da6a3ab9eeec7cace0e13c4d433fbc75a9f9e42a4fa841541a259b8195da3c9cdf4bd8a6e6720691b003f95e1e832b4852e5c69351057750803d7b8343399e2a18f78e03cbf1471537e28ca5d612c905212577055e3f9555c75b033eab9672e96b36d9800fb66f246392abfe0e17ef312fd31a42f903967659cb5e70d4e6fa395208f98508343ada898c2b2a21072a25a3dd4c6f75c16f7f7c6ef7dffb73db651dfcd255ad8fa7ac64147798fb7ed54bd844ed43a72043ac46661d81d5d856e0f415059ed4cffc711fd6ed0a20d1441892c9cbfa43f0ba68e63fb286350259c3f810f237874046878e5199aa4b49ff87f80fa692d6737f4d6e57153240380afca36bc5652a25dd1de4b16b567e9806f3a11aeac8f3980e43240e15d05222b0ba244aafa69550c457028fead3faf5ee98a76bb9e984d1ddb957a307b38ad45e9274ce5a6b2c211104394c322c301f63c4a07c1498f772dc994e5489e99cd4f43c3ef9b2a19f81c40522718fd7d762d0d739a207cc07aac11d178ac86d517632c4d6a3013a92e41ca5aedd7b4ff6b88f1066db511e4531b28f74766e173239d3efa04826eb968dc95efd29be4b683c6c22b0fc9b34d0d0561bf731b623644ff0cefa3877bbf14171fa5af22d92369e46bbe4ff4c69542b1778ed9ff38aa08e381afea76f09c51c2c0f353f88fc846f146b3a85bb74feb2d877d06d19b553a6f78e0956b5f29424dcdbaa263ae91d1097140369e8d25f0ce6fd13ea27e66f3de6134887c777a755518af9a41b8cca98cce2492e7c3fa5934c2acf5bfc5fe266056a1072e676036bb814ed7d13a324e3bd5f8495e13f4af81eff3f42cd8d3af2f77b7d26ec8d94c406f5125be2ea50ef31b322a07ffb93f727e0f17173c86cd38a8460bbec6c2e01988697641e96cf3b993cd2c8fbf17700dfa2e330b54f7eae6e8cec1741d6f9abf31d4279574659b62581b0226158d52227d90eb48f167c27df3992b752fead3da0710207ce928d0fffba77de91f898be16728f2ad9c6807d5421a7ea4a03eb895d625dc8521532ed2da999c8c136d5f89bc5f2bd20a4d55d9e11b6fb997f57221d3faeebe2e2db409fb848f9a091971b5393ac47122f8a8d1c0844f31dc10bab0742c1687a163a8ad9b22c891fb2efc1903a050224a4a49ce7ba3c588489aceb54fc19d514865437974d2e67a3667d016d687e9bf8457b5d2dd94c512363e4c18a40b48fb7e03843e24d2ad4a727e30bd032b52cfbdab8bd84a6d5a597967cb76181d97826f8225fe0279eacab6a738a8deb8db65f105002bc789e496ddcd3b0fd73fe295e49538e6400eb37ff41d4ed236e268677e6792a9d51ffd92ac298b0fd09e533019d1df6cfec6d5cd1c080772bb09f7373fe1943420d22b7ff4e7d0ffa39e78c4d1e9c8290a1007b753c0857ac35f6fdcc81864764e6ed69957fb7899488e42b5d0600ef26aaaa127f378f59a42ed8bfb816376a40ab861774b2b162cbb0986dc439b612a693ffd4d75704024acd9bf0df4248995b181c884fe94b180ec94e2bb296845095871daae2e654f3d476618abfc74ba6c3d79842c68092c5aef70a534cf9e650113a5f90c3830a9b8711bf31b704debd527df19ce0b32b927f21fe02d8f748f2cec58df7ad676ad6ee98729b7d7f6e8490eeed126f4b521ee003a531b67d5c20d1c03530e7c2fa72ae71ee34eb5cfa318c1757e34f4770e6c4765ac14d7f076795a59b820ad50296fc070a0f9644059b63ac159afb148c9caf5fa83e701f6ebede8aefb204814aa8dbef285742b9b9f35d9826c0517559813da6cac7b5bc6d82de6eb3f9d3ac769ca03dea36e186017dbad9dc1e9f10ec63028dac9d41b0ab6969635a376e595a181ebaf8fcbef60896d05aa4e09b92f66834666b74d0c1c8a063ad8a295feddba2411cea876b05915bdaa329334a512f701f3916740ce94691bfe1940b685053903ac45850f3caabc044d104091a6df5e2fa19bd3cd7e00199a50d31c1a1d3f3c8246b0d1235f03e5db3a982e1115685b7712a844fc5f2f5506182aa22859e5b984faa621f9d96a973ec4c64a54853be57d3c69cfbf6c318353a78d4be96b043fbe26ae229c554d63bf58fc0f0444a4220e954b1304d440d007e5ae294cf0db4a06f9041a095d4be96be0a03b779d34d406e2e807edfbce6494999478444740bb637754626b834f2227cbb7d2d516b9a8f3f6f775d83b4d768699445b8d5c2ea6e8487dff80f6e143bf8e72101b6a72bc66e0363497675fa381ab3beb7d13bf1eb0463eb3295298ce8119e69d72d36dc4cf6866faa159bed778f80194fe8b6c8319d6dcb65368fe1546d9cdae19582f3bac4101544acbc7a7d6567797063ed016f751c77344a25c7c738e01ca4414f9df283cc81cd30f167596bad9d97da960a694256f43884ceb793cf6a2fe5df5dcdd75d54acb8247ed27ff989b502967d0568f0dbfac4304cb16f2a64a19cdcccff9b060fb65aa19c14e2365c95d8a175e82ab9a574db003641dc992d9120950048ba2ebf76cd0b121c23e4a5feeac3674727a1e24f3a74d76521fb2659cf67e361a9da3eaa1d628055bd3247237e0e9469ca7dd77f371a4079dcc4f300c5da965f2bb72d624b619a6ea749dea478f55cdf71f7124fc713dc29efade1795cdfc9eb48fadb30c19d091d1e43c9abb4e9f4b1ad06184beb1d309b13e5793b190872c579498e68be38f5d5c2f0e85ba05b51c49dd7f1c9404950ce969988c701f733ce8ce9875d4ee350407de92506903787467a6f45bd05e092b1fec0cbf250fe0648d488b1b26394bbab126c6c20f0e9c65605a5295ed8cbe5201a6f9d1c8edf23b8c2182b11eee8d25e336cfb23f22e6d126ea64a3646ddb3b9a30eb2f1cca699fd272a6176817b370a355523a20a980de4d3e054b8cfe67de95981ca58432956356d37b28cce4bb111ac3f35205272f6e79e1e222315a525f7e3977cb6e13b32c55edaf1f488f5c6cb1e3995ba40d6cedaba48e41e6bf7b9b376354df70c4e758edc3ea3245b69ea7b3ccb1969652c2498b9da88db714568568d1c62137fd1e80c154aff9d6c90ebd54c79efc0b9d4e127b231eb8e8a2ef053f80f6e8977bd86ccb2079fa62c3eb13870ed4573647df436c8b9595f6ae36cf042941ef19388f7ab677de3ec27787794363191abf0cd5b6327050095267a923bf3f33a77c580cb97d437aa7064d306e3b0bb76b4ec340dfc1882a2d621bdd2cc4e1bb7d7154be658da441dbd5117bc9aa41ec6064b31094b12406f128f0e0acd6bd5389cf7ac8066de3db2aa0873e7aba1febdbcf4ad457c868247840b6b0f344d81655aea3383a8b00278b59ddcb70a22b90affff41006dcfd1a23d2d8411546ce57f5262cf9e9470e4a46cea007f927d61363a5248bd90932e2ee78cca5acca32cac9db2d8ad68cf5d7336005962ec7607b7dca67a4d73ca48e78f0f9e1d98732613f2666059935cf3f1badb69ec86fa90a425d28ba05ace0c8b7d26ce971e0e322e26d140c4789d35f1c9f507e23104b7f5962fbba2743d374eb90c7fcc6dcca9bae1c9af70a525d0e010481851eb32b4af4e23e27ae776a104cb9f4cc01416f7c033aecb9869c2aa06611e9b6d442ecf35d0e27ad5fe01ab24b61656058cf1c93a72ef0e0cd7a256d4f2c31c8a19ede2ca532b79262bdb513a2a758eb621eb74fc617bdb8ae0e71018d722a68841f890722b7b4a27b4be41b1ac61bef0a1a22240a2c05055dc7c5e819cc3b53e6a7d759214f2194f0917bd6e2388df75c6fc36c805e79c6d52c4c971e27b89a8d821771cd3e37a5b2aec8532fd7e79bffd49eccd32abd23ec4c83c56555caed7852b9aa82f40786d6d810e88daf11d0157a8bd9779bfadc138de5b2b771d53623a9df2eb46d918fcbd0315e8f6824eeadc0c3912da36347124119ab090be27cd9abf4df58febb58dc509ba40e6c305f8e636ac4c202b4eb536a32e4692fe76211616409b731fec315bccff55d7983749a7c8310fbd84b36df9c7d8b05ddd02c9b7314b3de85b4f0dfe3f8213e9551bc3fe4b15b7ab25e4ecc5f1c2598943b8121722ae2f0a05dfae624646bdd4491e09f9dcf666eb51c194734577122eea136fd8a000231309040a351cd012a6aae909a85ba29c2d664e4ea8db355ec0df109df43d36b062a2b65dbec834f93e618fc136d16b0d7c4e2e0bb2af1ef2d4fbe99adc18a1789c1261e7f59b1bb4375dc23e3f1be9de4d72ecae6892b1b0af81019fde3a346f48ecd95c8da0b55acd733efdb2986133f1be78658698d393dfd097658bcc931ce307d885b359df6cc32a55e0326467f6b9b67d08cb2f1174e66c22f9077f39b117c40d20acef300092ee1a197cc0f18dc7fd0e035f9a1460c8614dfb7482ba973cce6b2187dadfb7060721cf1e0c9c19fc6c29bf169784bb7773290acf2e42ed99cc366c12a8fbc91955aa0b25d4fa8dbc35a6ddda151d2c6fc38d81fb13f478b9c8b7b517b70fa8dd9c66b47bc8708334e2b700c838a0457d99b262f668f5488ee51fddc55a691875abf833860101be4aab875ba1ad06044a31754ca667d0201ca2fcb323c9e587b74a5b45b79ae1abebc10ee7da3705e98daf5fc008a3e36296d1b06f261a269f0d9004fceb4326d3472fdb8510e324afc99544ebef4ad31f43b0411fec5f206bb198e550158a0c15d145e16f606bc09f14dcd38f80af55427634c236eed3fb49bf29bb7c68b7a3e440960c715daedb628275fc02ef25296394bd6590eb7b2bcfefab24a596539defa57c6eeb817ddbc9cffa2fd890f3718cc31e97df7927be64015dd29e94cd807539f310a111bb5d18e3523a9ad4ab906a30aa20595e3f3af2777f148a25d6b21dfaf72ee7741099d8f727378910b10e5ae0738c659706ae4e94f421bc04a06edc98a5c42c5726622e540131ec9af46c4c055149a5e0cff6a386d427e6a39794361fde2fb3b227331af7d6fde9464903992850192c3728f5a3aa98794c6464c7e0f540869324a60eb24893859b99477f3fd6bb4240d28d97e7b4b36067c0b7606c8db69ed2c71afd07e62993fe9122551de9b1c67172d6e0885339c2177348b2ca1e7a198f4ead137a91446302341e9dc997e28262b970d272edadaabd1e3043f1703eface0e95faba8d76c0222ad63a7ec177347e38fda2783170d4f32eb7b1132ebeaeb6237a6a6bff1fd67f2fb351f1510561c37f08452b3f1467604188b07dcc36b80b4bf4d73a483f1011c8df3b00e031a87fc7fdc494e0d9bfc05d9258be32af34c13fa8334b3b6c4ade5bcb9dc89a75ae6135e4f6f31bb987d45dce05eb9f4cbb47f454a6167c05c9ce115aa93ac00341b3a3957e854a82db09b1f51bd9320e884655254875c98ff10e71dd5760be317004d73c94c4469a94d9ba19c594a3e752dae0cc84b35fe2bd78e9bef65d34076fe03cb5e8be7291ca8b29821996bb6c9587c5fd10d96286e08d75670e08fb97a2a644b95d60d24f1fbbba16b24cf4f7994a7253cf6ce61f0b0404fb61bb4c2bfb00208526e716b0e5a0b43e346b0cd36173063bf93d08e159fb07882b6e9d9ea9a5f4139212428fd1e71e9e830a3f072dbd4ce08d1bbdc9b2160564b4c7507102416144dc306bc427e78c9311ec178380e06a73f7acfd127b3b8598d7a17636cabe8dbe696754c00feee7298aba55f904923d2450b2404daecd4f644ed9d2bd3378a58e34890a09cd1de474c4169f6838d7173fb659353575d99ac59e464e909903869dde410c53506f79f4104272006fd7159197beed67dfed4c882868a21a12e6c3da70e0947841f2ec2b06a7a02ec78aa6e311d7accca4b52e92722804fb1757d252a17aca05039830a37942ccc2d67e6ae7a1c9f8e47a57aecd2ffe16863bd4fe0c879070af3de05b49c327338fd353543bc6609dabc92a036421af40de8b397834ed7ec1b0a9a88f419d85ce1e34b3326539c2192da3ad31ea7ac5c891369cf4e2f04a32be92b80fcb178a45ff8572f3d03eb972bda3802a385fbe458e86ebf14ef035739dc5730858321d6ae9c426a12d0492dbd98f698101991c8bc71a2ef34d346584cc</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 模拟费用流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2020 微信步数</title>
      <link href="/2022/08/18/NOIP2020-%E5%BE%AE%E4%BF%A1%E6%AD%A5%E6%95%B0/"/>
      <url>/2022/08/18/NOIP2020-%E5%BE%AE%E4%BF%A1%E6%AD%A5%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>为了不让自己颓废，这篇博客必须写了。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先考虑什么时候会是$-1$，手玩一下就会发现：$-1$只有一种情况会出现，就是当且仅当做完第一轮$n$次操作时没能将这个点弄死，并且回到了原点，这种情况比较好判断。</p><p>然后考虑有解的情况。</p><p>首先发现最多的情况下会有$10$维，这意味着我们直接枚举的复杂度大概在$nw^{10}$左右，这显然是不可能的，我们考虑拆贡献，我们首先将所有的点都拿出来，经行操作，每次贡献了之后将出界的点都删除，每一次贡献的值显然就是此时剩余的点的数量。</p><p>如果这样暴力维护的话大概会有$45pts$。</p><p>考虑优化，可以发现，中间有很大一部分的轮数（记$n$次操作为一轮，下同）它们所经历的删点的操作基本类似的，我们将第二次操作的情况拿出来，记第二轮第$j$维会死$b_j$个节点，第一轮结束后第$j$维还剩$a_j$个节点，令$T= \min_{i=1}^k\frac{a_i-f_i}{b_i}$，其中$f_i$是最后一轮（可能并不需要经行完，所以需要单独拎出来）剩余的点数。</p><p>这样答案就应该等于：<br>$$<br>\sum_{i=1}^n\sum_{x=0}^T\prod_{j=1}^ka_j-x\times b_j-f_j<br>$$<br>这个显然是不包括第一次和最后一次的贡献的。</p><p>我们将最后一项展开，这是一个关于$x$的$k$次多项式，将系数算出来即可，没有必要用多项式，$k$很小。</p><p>这样复杂度就是：$O(nm^2)$。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, ARC &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123; <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>&#123; <span class="keyword">while</span>(*s) <span class="built_in">putchar</span>(*s ++); &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T, class ...ARC&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res, ARC ...com)</span></span>&#123; <span class="built_in">write</span>(res), <span class="built_in">write</span>(com...);&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>, K = <span class="number">11</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>, Inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">&#125;seg[N][K];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = <span class="number">1ll</span> * res * x % mod;</span><br><span class="line">        x = <span class="number">1ll</span> * x * x % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> <span class="comment">// 拉格朗日插值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> fac[N];</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= k + <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= x;i ++)</span><br><span class="line">            res = (res + <span class="built_in">qpow</span>(i, k)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k + <span class="number">1</span>;i ++) </span><br><span class="line">            fac[i] = <span class="number">1ll</span> * fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k + <span class="number">2</span>;i ++)</span><br><span class="line">            t = <span class="number">1ll</span> * t * (x - i) % mod;</span><br><span class="line">        <span class="keyword">int</span> v0 = ((k + <span class="number">2</span>) &amp; <span class="number">1</span>) ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, sum = <span class="number">0</span>;i &lt;= k + <span class="number">2</span>;i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = (sum + <span class="built_in">qpow</span>(i, k)) % mod;</span><br><span class="line">            res = (res + <span class="number">1ll</span> * v0 * sum * t % mod * <span class="built_in">qpow</span>(x - i, mod - <span class="number">2</span>) % mod * <span class="built_in">qpow</span>(<span class="number">1ll</span> * fac[i - <span class="number">1</span>] * fac[k + <span class="number">2</span> - i] % mod, mod - <span class="number">2</span>) % mod) % mod;</span><br><span class="line">            v0 = -v0;</span><br><span class="line">        &#125;</span><br><span class="line">        res = (res % mod + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, k, c[N], d[N], sum[K];</span><br><span class="line"><span class="keyword">int</span> w[K], delta[K];</span><br><span class="line"><span class="keyword">int</span> v1[K], v2[K], val[K][K];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;i ++)</span><br><span class="line">        v1[i] = w[i] - (seg[n][i].r - seg[n][i].l);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, sum;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= k;j ++)</span><br><span class="line">            sum = <span class="number">1ll</span> * sum * <span class="built_in">max</span>(<span class="number">0</span>, w[j] - (seg[i][j].r - seg[i][j].l)) % mod;</span><br><span class="line">        ans = (ans + sum) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= k;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            seg[i][j].l = <span class="built_in">min</span>(<span class="number">0</span>, seg[i][j].l + delta[j] - seg[n][j].l);</span><br><span class="line">            seg[i][j].r = <span class="built_in">max</span>(<span class="number">0</span>, seg[i][j].r + delta[j] - seg[n][j].r);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;i ++)</span><br><span class="line">        v2[i] = seg[n][i].r - seg[n][i].l;</span><br><span class="line">    <span class="keyword">int</span> last = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= k;j ++) val[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">        val[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> T = Inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= k;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = v1[j] - (seg[i][j].r - seg[i][j].l);</span><br><span class="line">            <span class="keyword">if</span>(x &lt;= <span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">            <span class="keyword">if</span>(v2[j] &gt; <span class="number">0</span>) T = <span class="built_in">min</span>(T, x / v2[j]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> K = <span class="number">0</span>;K &lt;= k;K ++)</span><br><span class="line">            &#123;</span><br><span class="line">                val[j][K] = <span class="number">1ll</span> * val[j - <span class="number">1</span>][K] * x % mod;</span><br><span class="line">                <span class="keyword">if</span>(K &gt; <span class="number">0</span>) val[j][K] = (val[j][K] - <span class="number">1ll</span> * val[j - <span class="number">1</span>][K - <span class="number">1</span>] * v2[j] % mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = (ans + <span class="number">1ll</span> * val[k][<span class="number">0</span>] * (T + <span class="number">1</span>) % mod) % mod;</span><br><span class="line">        <span class="keyword">if</span>(T != last)</span><br><span class="line">        &#123;</span><br><span class="line">            last = T;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= k;j ++) sum[j] = <span class="built_in">calc</span>(T, j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= k;j ++)</span><br><span class="line">            ans = (ans + <span class="number">1ll</span> * sum[j] * val[k][j] % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;i ++) <span class="built_in">read</span>(w[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(c[i], d[i]);</span><br><span class="line">        delta[c[i]] += d[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= k;j ++) seg[i][j] = seg[i - <span class="number">1</span>][j];</span><br><span class="line">        seg[i][c[i]].l = <span class="built_in">min</span>(seg[i][c[i]].l, delta[c[i]]);</span><br><span class="line">        seg[i][c[i]].r = <span class="built_in">max</span>(seg[i][c[i]].r, delta[c[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;i ++)</span><br><span class="line">        <span class="keyword">if</span>(delta[i] != <span class="number">0</span> || seg[n][i].r - seg[n][i].l &gt;= w[i])</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">solve1</span>();</span><br><span class="line">    <span class="built_in">solve2</span>();</span><br><span class="line">    <span class="built_in">write</span>((ans % mod + mod) % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 拉格朗日插值 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP2021 方差</title>
      <link href="/2022/08/17/NOIP2021-%E6%96%B9%E5%B7%AE/"/>
      <url>/2022/08/17/NOIP2021-%E6%96%B9%E5%B7%AE/</url>
      
        <content type="html"><![CDATA[<p>重考就我没改，退火还斜挂了，垫底了QWQ。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>易得答案等于<br>$$<br>n \cdot \sum_{i=1}^n a_i^2-(\sum_{i=1}^na_i)^2<br>$$<br>然后不先推一波式子：<br>$$<br>\begin{aligned}<br>n \cdot \sum_{i=1}^n a_i^2-(\sum_{i=1}^na_i)^2 &amp;= n \cdot \sum_{i=1}^n<br>(a_i-a_1)^2 - (\sum_{i=1}^n(a_i-a_1))^2 \\<br>&amp;=n \cdot \sum_{i=1}^{n-1}(\sum_{j=1}^ib_j)^2-(\sum_{i=1}^{n-1}\sum_{j=1}^ib_j)^2 \\<br>\vdots\\<br>&amp;= \sum_{i=1}^{n-1}\cdot b_i^2\cdot i\cdot(n-i)+2\sum_{j=1}^{n-1}\sum_{k=j+1}^{n-1}b_j\cdot b_k \cdot (n-j)\cdot k<br>\end{aligned}<br>$$<br>其中$b_i=a_{i+1}-a_i$</p><p>从最后一个式子可以看出最优解时差分数组呈现单谷（<del>本人并没有看出来</del>）。</p><p>附：对于这种结论，个人认为还是在考场上先写个程序将小数据的最优解的情况算出来，然后再用眼睛去蹬比较好。</p><p>然后得到差分数组单谷这个性质之后我们思考这个问题的解决方案，本人技艺不精，写了不够优秀的模拟退火，可以得到$84pts$，理论上（当然也有人确实做到了）可以拿到$96pts-100pts$。</p><p>但是仔细思考之后我们发现，完全可以乱搞。</p><p>当然，最简单的做法还是$dp$。</p><p>首先我们将差分数组排序，定义$f_{ij}$表示填了差分数组前$i$个数，其和为$j$的最优答案。</p><p>之后分将这个数放在左边还是放在右边两种情况讨论即可，不难得出转移方程式：<br>$$<br>f_{i,j+\sum_{k=1}^ib[k]}=\min f_{i-1,j}+(\sum_{k=1}^ib[i])^2\\<br>f_{i,j+b[i]\times i}=\min f_{i-1,j}+i \times(\sum_{k=1}^ib[i])^2+2\times j\times b[i]<br>$$<br>最上面的是放在右边的情况。下面是放在左边的情况。</p><p>然后我们会发现这个玩也儿是$O(n^2V)$，比较令人难受，但是我们观察最后一档得不到的分，此时的差分数组会出现大量的$0$，这意味着我们无论将这些东西放在左边还是放在右边都没有意义，于是将其特判掉（从有意义的开始转移）。</p><p>于是复杂度就是$O(\min(n,a)\times na)$了。</p><p>空间有点开不下，滚动一下数组。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || <span class="string">&#x27;9&#x27;</span> &lt; c) &#123;<span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, ARC &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line"><span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">write</span>(res / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123; <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123; <span class="keyword">while</span>(*s) <span class="built_in">putchar</span>(*s ++);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res, ARC ...com)</span> </span>&#123; <span class="built_in">write</span>(res), <span class="built_in">write</span>(com...); &#125; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10005</span>, M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], cnt, c[N];</span><br><span class="line">LL f[<span class="number">2</span>][M], sum, tot;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">sum = n * a[n] * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i ++) b[i] = a[i + <span class="number">1</span>] - a[i];</span><br><span class="line"><span class="built_in">sort</span>(b + <span class="number">1</span>, b + n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i ++) c[i] += c[i - <span class="number">1</span>] + b[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i ++)</span><br><span class="line"><span class="keyword">if</span>(b[i] != <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> cnt ++;</span><br><span class="line"><span class="built_in">memset</span>(f[(cnt + <span class="number">1</span>) &amp; <span class="number">1</span>], <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f[(cnt + <span class="number">1</span>) &amp; <span class="number">1</span>]));</span><br><span class="line">f[(cnt + <span class="number">1</span>) &amp; <span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = cnt + <span class="number">1</span>, id;i &lt; n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(f[i &amp; <span class="number">1</span> ^ <span class="number">1</span>], <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f[i &amp; <span class="number">1</span> ^ <span class="number">1</span>]));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt;= sum;j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f[i &amp; <span class="number">1</span>][j] &gt; <span class="number">1e18</span>) <span class="keyword">continue</span>;</span><br><span class="line">f[i &amp; <span class="number">1</span> ^ <span class="number">1</span>][j + c[i]] = <span class="built_in">min</span>(f[i &amp; <span class="number">1</span> ^ <span class="number">1</span>][j + c[i]], f[i &amp; <span class="number">1</span>][j] + c[i] * c[i]); <span class="comment">// right</span></span><br><span class="line">f[i &amp; <span class="number">1</span> ^ <span class="number">1</span>][j + b[i] * i] = <span class="built_in">min</span>(f[i &amp; <span class="number">1</span> ^ <span class="number">1</span>][j + b[i] * i], f[i &amp; <span class="number">1</span>][j] + b[i] * b[i] * i + <span class="number">2</span> * b[i] * j); <span class="comment">// left</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= sum;i ++)</span><br><span class="line"><span class="keyword">if</span>(f[n &amp; <span class="number">1</span>][i] &lt; <span class="number">1e18</span>) ans = <span class="built_in">min</span>(ans, f[n &amp; <span class="number">1</span>][i] * n - <span class="number">1ll</span> * i * i);</span><br><span class="line"><span class="built_in">write</span>(ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DCOJ3110 T-90A</title>
      <link href="/2022/08/13/DCOJ3110-T-90A/"/>
      <url>/2022/08/13/DCOJ3110-T-90A/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="31da495ef2ffcbcdae42b15e83591c94e328201f0cc3403a37e25bfa38f264a1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> DCOJ </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DCOJ3109 游戏</title>
      <link href="/2022/08/12/DCOJ3109-%E6%B8%B8%E6%88%8F/"/>
      <url>/2022/08/12/DCOJ3109-%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8b613cfe91630b54bd49135a9b3331d41d65851c99b38415df759de78cbfb177"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 三进制线性基 </tag>
            
            <tag> 博弈论 </tag>
            
            <tag> DCOJ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1139D Steps to One</title>
      <link href="/2022/08/12/CF1139D-Steps-to-One/"/>
      <url>/2022/08/12/CF1139D-Steps-to-One/</url>
      
        <content type="html"><![CDATA[<p>期望+莫比乌斯反演。</p><span id="more"></span><p>期望的题，每次都这么神秘啊。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先我们先把式子写出来，令$E$是期望，$P$是概率。<br>$$<br>\begin{aligned}<br>E(len) &amp;= \sum_{i \ge 1} P(len=i) \cdot i \\<br>    &amp;= \sum_{i \ge 1} P(len=i) \sum_{j=1}^i \\<br>    &amp;= \sum_{j\ge 1}\sum_{i\ge j} P(len=i) \\<br>    &amp;= \sum_{i\ge 1} P(len \ge i) \\<br>    &amp;= 1 + \sum_{i\ge 1} P(len &gt; i) \\<br>\end{aligned}<br>$$<br>最后的状态是$\gcd_{i=1}^{len}a_i=1$，于是又可推得：<br>$$<br>\begin{aligned}<br>P(len&gt;i) &amp;= P((\gcd_{j=1}^{i}a_i) &gt; 1)\\<br>    &amp;= 1 - P((\gcd_{j=1}^ia_i)=1) \\<br>    &amp;= 1 - \frac{\sum_{a_1=1}^m\sum_{a_2=1}^m\cdots\sum_{a_n=1}^m\sum_{d|\gcd_{j=1}^{m}a_j}\mu(d)}{m^i}\\<br>    &amp;= 1- \frac{\sum_{d=1}^m\mu(d)\left \lfloor \frac{m}{d} \right \rfloor^i}{m^i}\\<br>    &amp;= \frac{\sum_{d=2}^m\mu(d)\left \lfloor \frac{m}{d} \right \rfloor^i}{m^i}<br>\end{aligned}<br>$$<br>再带回原式可得：<br>$$<br>\begin{aligned}<br>E(len) &amp;= 1 + \sum_{i\ge 1} P(len &gt; i)\\<br>       &amp;= 1 - \sum_{i\ge 1} \frac{\sum_{d=2}^m\mu(d)\left \lfloor \frac{m}{d} \right \rfloor^i}{m^i}\\<br>       &amp;= 1 - \sum_{d=2}^m \mu(d) \sum_{i \ge 1} (\frac{\left \lfloor \frac{m}{d} \right \rfloor}{m})^i \\<br>       &amp;= 1 - \sum_{d=2}^m \mu(d) \frac{\left \lfloor \frac{m}{d} \right \rfloor}{m-\left \lfloor \frac{m}{d} \right \rfloor}<br>\end{aligned}<br>$$<br>关于最后一步是生成函数的无限项求值。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;LL, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123; <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>&#123; <span class="keyword">while</span>(*s) <span class="built_in">putchar</span>(*s ++); &#125; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res, ARC ...com)</span> </span>&#123; <span class="built_in">write</span>(res), <span class="built_in">write</span>(com...); &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> mu[N], primes[N], cnt, st[N], inv[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) primes[++ cnt] = i, mu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= cnt &amp;&amp; primes[j] * i &lt; N;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % primes[j] == <span class="number">0</span>) </span><br><span class="line">            &#123;</span><br><span class="line">                mu[primes[j] * i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mu[primes[j]* i] = -mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++) inv[i] = <span class="number">1ll</span> * (mod - mod / i) * inv[mod % i] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)</span><br><span class="line">        ans = (ans - <span class="number">1ll</span> * mu[i] % mod * (n / i) % mod * inv[n - n / i] % mod) % mod, ans = (ans + mod) % mod;</span><br><span class="line">    <span class="built_in">write</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 期望 </tag>
            
            <tag> 莫比乌斯反演 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test/2022/8/11</title>
      <link href="/2022/08/11/test-2022-8-11/"/>
      <url>/2022/08/11/test-2022-8-11/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c24cd4a7c01993967df87a544cc6cc43fbd39308f1066a8d434db4b58424c30e">f7c84d52981e04730e0cb33ecf03c038910740211be4281c6f3eace9abc81e1ea11c0745fa7f4ddb00c85c6cd520f02ea0992689e0881866141a7ad9d087ab00c09ab75d9f6ddff9a7a3f284dc175a09e79f5491e1048085cebd68268dc39408d91c870f6b211d9daa0d76132290268a2d0a6e5a36228815e25ee14b3830e384b835749a89c20d7500e692a00789c9a1058b96752a0ae5cc77c167a22bd57756155598eaee5840605b18be605431415d884f835e3cd4995bdf2421fd77c626bdd7b457f3e61f1764bfac4c08516738ab92ea537352f0ff41c9599a7775eb71b84bc6316f5a93ac6b3cb5db3b4bdd07461f48e765bb7edf2d1f52d2fa45ae112d1626c7846e3d88e00c38bb3716fec3bb222a20db97872d54fcc75674c1ed30a6ac63da0b61faff1085a95e945304cd84a0e78ffe006a4528715b3f2862fe2f864f9583f16f7fbbf392192ceb05a03301b0ea79ffdbe515950dd6283d50835ab94407cee2d672abb80f0361eda8e45d694dd1238114a41409096215c2d68ee0f8070a0e3f4f3c389179959ab228b86ecad3b35dfaf63025aeb03d0c93dd0142ed04daa7a0efde371e7bb545c92dd2a216450dcc4916034b0e21fb1cc71f133cb6875a78f93a6305ca8f886d3e478c6ef80d05e8ee4fc9ab7f24fee9047e8da4635bec6c711d08d951e5c3d54fa2454df39d83616a97bc44096fee4626383968ac9f24e470f8a04acae66b8448e0cdf33733ba4eaca39c475ce9d5c22c71a06b208fa755ce950ff7ae92b321ced9f2c8ce7756597c7ed5514d640f4313b9383dac6c39241a50be5367ad7fd21467e92327aeac783e425fbb2c466ad00ebeb6ad0e81c7a37067dac4346e9291ef60bc4077</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test/2022/8/10</title>
      <link href="/2022/08/10/test-2022-8-10/"/>
      <url>/2022/08/10/test-2022-8-10/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6bac90cb3fb44aacafe53abb6f091d4ff4097e41eee4c4c794cab8d2779f8365">f7c84d52981e04730e0cb33ecf03c038910740211be4281c6f3eace9abc81e1ea11c0745fa7f4ddb00c85c6cd520f02ea0992689e0881866141a7ad9d087ab00c03bcef1a70be8e140c03b4eeceb5b3188a2a5c18b5780eb5753401b33335983a14ee55a97fb4120b0ef9c0da540dce4a6f55f059c47879c078f34227d960263f2ad4542544ce50dc54849d15cd3bfff9d32eb8760ab6a930916963203efacc4339a10c17bc6c5a5161f409ab842f0885ab31be7395f6f3c041f105ed8ef728cbd56b803f3e84fdf3138b5d4be983bc7da5753580c9193ded66be1e586769b094e5112b7782c741e4c0a91994abcf83b6cc9777cf139d8113e335625cd05ec6a3fd3ce2fa5298105fed904ebe9ad4626513023adff462a999086d77e827c370697e81969a2b96f2dee75851f2a820bd1b441525a135864765fd88aed4934b7f10f33dfde6ac0f2456846627357ff221f82190b239d3c8496aae210e9505fcd7dc270a7ed3f87e3044039b93400f1ee7e950143e8d37288b918647eae6d428d401586b57b783b0511cc1d6ee8228bf83805498dbe984f1dacde288e3fbb763c002989b3d2df16d5f11f6a6c00c80b7241ae0048d2d89f9208628a2a824ac70da2dc455dafe8fde88f3880399a8802272cba3bca9ec1fb3d2c3c6f75030822b7a3fd83c99791c6b0153c41457a98bfec1a098283c526b3d6b2e83e9844de8c6ed69915bf852de3c570356459bbca074c97bd00fcb6002372f334f59c3768dcae71ee8e7fe5ed514f55234e2ff6c9f75091559467983554d32aa878cd186a5c4bbfa47dab53fd1ffd7062cf18ad294d054cfd7fed8bc60a2da5974048e91a3c09d040a507080feb2afcc5d4c16f51914d3675329914a25f081a4701de395b272d1ab157d0b3b92d878b8255c8b02ba9cfdfac6c16cce9dba16b2c7c40c21647d7e38dc399aac64f646045a7e4d05abfcbec6ff90bcbccc85eab5e608e7e0b65491437c8684181fa6bd3631de50ee58aae515c388030a50ee2061c44a8ee9cf0f876e97a09b03dce15efbf8a727e816ad55eb354a2b3f3e27efc1f1a969724c6620fbb2f09c81db1dc226ca284bf20dc86ad603903b234e8165315a766eee1b0394ea12507f3b1bd0048b2282243d9e888485c28b3f122d98c592c0105d4c16fa2f002e78f7b6de97fc364bbafbbb8733fe28467e0adc1947ffee9d12eaf27dd96b1f4f4974c13e85cab0a96e85d72a9c6e33f4f890493a06757cdea7794df2ef723</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test/2022/8/9</title>
      <link href="/2022/08/09/test-2022-8-9/"/>
      <url>/2022/08/09/test-2022-8-9/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1bd9a2b4511f8ab9599554eed2f355b5440c8f9864bee10b04ac0e2a3c8cdc28">f7c84d52981e04730e0cb33ecf03c038910740211be4281c6f3eace9abc81e1ea11c0745fa7f4ddb00c85c6cd520f02ea0992689e0881866141a7ad9d087ab00130f853708df9e241643a17e5bff1d53122a2198c6dc553d8caf89b9dc156d089d6ab450a2a88e5a8774b9dbdd20921216b163bd36aebb9d2e0dd0683164ba2ec6ff1406f321ee99259796d6a7bcf528e4eb143216ff3d86a057358a191cfb93</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2022/8/8</title>
      <link href="/2022/08/08/test2022-8-8/"/>
      <url>/2022/08/08/test2022-8-8/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1d2af27149edea065d883405b591815a32509d421e05ecd6043c5a10ce6b90ec">f7c84d52981e04730e0cb33ecf03c038910740211be4281c6f3eace9abc81e1ea11c0745fa7f4ddb00c85c6cd520f02ea0992689e0881866141a7ad9d087ab00509167e9587a445564148deb2fd99befe25c63a3992d2c203eae46e0d0a70be26c5859ef27d16f6431172af7949a5ddf9dc35f67bec47899a849194a84ea81d09265135f42ea293d4e901af68297240afdc276d4ec1f36b93434bd6f69ee008e0e301f77249944faa7a2b795be268e591cfe67ef80d8e711328be546d3f466835b3ab77344c2335d3e25f3b8715f2395e6362964a65fc71dc3b44c2488fb7d09b4905e45709438d89564da2f9a8d04ee9a6e94bcc46cb4dd17de84dc3793083307e714e9bb4101aee126e72a8fe438506b4c671052ef1e2019a646e89aff9ee41989b76d22b26810584b102ab576fb148c22aea3f1ed56eae134f7bb26d1c24cd5ae80e9857d20e13b80f7ec3bc2cef55360eb07e67e7c6de4cd74a3ef4939a8e3e8628480b84ec1ccb95e8dc97e4d2d19d43e99f6f1b5f09f0b58cb625eb5c3f0058b150a0115a272166992332aa67e89afd8ced83a270d51afaa35f65c9c3aee22a74eb5849236f52dfd0dd0de2366c2991f7ad224b9d02f0dbfb7e0005f0c146e020f718e4735639039c902f86061260893540b86362458273800ba1751e7e47cb2a071cc59684dddff36383bf8f683d4803ca94d47f25ce8fbc91cca2c4c9a3dedfaab8690fac5cb40ecede7bdafb827172f05e93c50b38665ba2f0fe0531106da9df98ea3492b928ebe94c3b21b2cf127cee8161d86514c6768f62d9fa3c42f0be9f5784d024f835b31b3f0df55367e88cffd3be37da44ddfc8caaf1898cb442f46ba2fd8100b2774845f18e693bb548a81061b5645567dbb2f108fa67772d7de6d3b9313ad4f1356e3689b68682f331df940c92d1a4750db8fca8b54194a522ac304f1a9789809919ee1cefa325a703b68238beb9f1a3ff40c299357b59514fb74e8c4062f1d39f0a3a0138be9b00973686493612aa5f5a1e01f031bf14ddd9ded1c1893c12b997b44caa4495cbea4bab2752aba175ac30575eabae49de671424d06c1abb316210e5ae10e07b9fe60ea357348d283e3e9b3a58f5b024815c449c612645288c3e962f6ae2a9a4d26d31b1fe14053eec261e750f4a91ab9dee8bc446a8eb6a6e7b14943db199193fd9a60438635902e89125fb2869aac07c15ffcadd44f5b054a42669013e0fec75916246b35271315d188d04640a64f6968e04932ff2cb2aed607a2e9ae4bd2561929f0963180e98fa111c21e562e7d104073c5c8b808fe72edd885ce11ef42539cca04898840dae7704d396d8d8c0b797f22407062e9580c96726df0f2860b81eab0518fee96b389dfa0db7c3f09d273eca6ade03c05431dc2c2b54ba24e7e4fb1e3849ee6bb0a6e3a34cf4756a4e4e560740fe273e46a092e4b989119137e91408767ff1e3d1202afb0ee241847aa57f674817743d5894fb18f809b22eff75f3e604c58618891ede5210f6639aa22aa95a16c2e81ef6d8ac32acd41f2f1abdbcd3a80f3a2206db3f67c63bc79d7aa705778191e317d4ad5db9224e472aa7dbfff249701dd58fc89ac00cc0d11c4f52de04acf40c8ec5a83d011734329d1d111bb5d7251b3c347d3c38bc40a39740cf02ff13c27aae92959206c05ef8fd86a28d97978805fd4007df68fe06a5e3457a0d0788906520f1b14e065931f6341476c4f9e13f8c8c18488814551bc6ec948085c9909cee2cfa7eb7262df323f7d1522fe1f3972dbba4518018e9b5471ea1e253b3a3dfb62cbd7eabb3f1f1f15143e09cb1a808c465a07d22b08335d73c3893ef10fd2e5f2726ef58762db2e6fe5093df647ef09d774b3d7e4a0be7ff596cef6944139f426e6adb5c20774f524f47a37bc37a484cfb3e65971898dc980bcab64e1be790643d00d6197fc2aafeeac70dc9ee5e40b3d544e42ba5c687a0bb36ecd130807bd86ffb47b9ea3e5273ac3b7f752a1e1bf0bf81d9f4877189d575461d940b31e2987d66fe21c926633f4a47fbfd4b97ebb871e7f1144abd56b89a76fd0092bd727221442bdaa6f40821a5c23e7e86fb7ed602d5073bfe5d232130470636bb5088e10ada467bea9fe85241d261b70e4f0c12c1bd0a8e160580d7ce0ed18f98b518395dfe0ee828b43297690e3cf075961306a949b86c4c72f93f3b6f2bc</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF题目乱做</title>
      <link href="/2022/08/05/CF%E9%A2%98%E7%9B%AE%E4%B9%B1%E5%81%9A/"/>
      <url>/2022/08/05/CF%E9%A2%98%E7%9B%AE%E4%B9%B1%E5%81%9A/</url>
      
        <content type="html"><![CDATA[<p>这段时间天天降智，于是开始刷CF了。</p><span id="more"></span><h1 id="CF1710A-Color-the-Picture"><a href="#CF1710A-Color-the-Picture" class="headerlink" title="CF1710A Color the Picture"></a>CF1710A Color the Picture</h1><p>伞兵构造。</p><p>不难发现可行的图形的颜色块一定是矩形，对于所有颜色放置的底边是$n$还是$m$进行分类讨论，直接算即可。</p><p>贴一下代码，之前<code>vp</code>挂惨了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k, T;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check1</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n, m);</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = k, cnt;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = a[i] / n;</span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">1</span>) cnt = <span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        u += <span class="number">2</span>;</span><br><span class="line">        ans += q.<span class="built_in">front</span>(), q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(ans &gt;= m &amp;&amp; u &lt;= m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check2</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; m) <span class="built_in">swap</span>(n, m);</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = k, cnt;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = a[i] / n;</span><br><span class="line">        <span class="keyword">if</span>(cnt == <span class="number">1</span>) cnt = <span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> u = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        u += <span class="number">2</span>;</span><br><span class="line">        ans += q.<span class="built_in">front</span>(), q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(ans &gt;= m &amp;&amp; u &lt;= m) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m, k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + k + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">check1</span>(n, m) &amp;&amp; !<span class="built_in">check2</span>(n, m)) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>), <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CF1710B-rain"><a href="#CF1710B-rain" class="headerlink" title="CF1710B rain"></a>CF1710B rain</h1><p>离散化，数学。</p><p>神秘题（没见过），首先有一个<strong>结论</strong>：水量最大的点一定是降雨点。</p><p><strong>证明</strong>： 对于任意相邻的降雨点$x,y ,\ x &lt; y$，对于他们之间的任意点$pos$，显然$pos$水量最大时$x$和$y$都必须要对$pos$有贡献，那么：$val_{pos}=val[x] - pos + x + val[y] + y - pos = val[x] + val[y] + y - x$，显然等于降雨点的水量。</p><p>于是我们考虑首先处理出所有降雨点的水量，降雨的式子是个一次函数，我们考虑用差分来计算，最后考虑如何验证每个点，我们考虑转化，我们重新定义一张图，这张图上的所有点的水量都是$m$，我们在原图上撤去降雨就等价于在新图上降水，而当新图和$x$轴所形成的图形可以完全将原图和$x$轴形成的图形覆盖掉，则撤去这个点就是合法的，否则不行。</p><p>然后我们考虑几何法，将图形画出来时，可以发现每个最高点到左右的两条线的斜率的绝对值都是$1$，所以我们用截距表示点，预处理出原图的截距的并的范围，如果新图的截距的范围覆盖了原图，则可行，反之不行。</p><p>注：计算原图截距的并的时候只用计算点值大于$m$的，正确性显然。</p><p>复杂度：$O(n \log n)$，瓶颈在离散化上。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123; <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>&#123; <span class="keyword">while</span>(*s) <span class="built_in">putchar</span>(*s ++); &#125; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res, ARC ...com)</span> </span>&#123; <span class="built_in">write</span>(res), <span class="built_in">write</span>(com...); &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL Inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">map&lt;<span class="keyword">int</span>, LL&gt; mp;</span><br><span class="line">LL p[N], x[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(x[i], p[i]);</span><br><span class="line">        mp[x[i] - p[i] + <span class="number">1</span>] ++;</span><br><span class="line">        mp[x[i] + <span class="number">1</span>] -= <span class="number">2</span>;</span><br><span class="line">        mp[x[i] + p[i] + <span class="number">1</span>] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    LL last = <span class="number">0</span>, cnt = <span class="number">0</span>, tot = <span class="number">0</span>, maxn1 = -Inf, maxn2 = -Inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> iter: mp)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt += tot * (iter.first - last);</span><br><span class="line">        tot += iter.second;</span><br><span class="line">        <span class="keyword">if</span>(cnt &gt; m)</span><br><span class="line">        &#123;</span><br><span class="line">            maxn1 = <span class="built_in">max</span>(maxn1, cnt - iter.first + <span class="number">1</span>);</span><br><span class="line">            maxn2 = <span class="built_in">max</span>(maxn2, cnt + iter.first - <span class="number">1</span>); <span class="comment">// 前面的坐标都加1了，所以这里要减掉</span></span><br><span class="line">        &#125;</span><br><span class="line">        last = iter.first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="built_in">write</span>((maxn1 &lt;= m + p[i] - x[i]) &amp;&amp; (maxn2 &lt;= m + p[i] + x[i]));</span><br><span class="line">    <span class="built_in">write</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CF1710C-XOR-Triangle"><a href="#CF1710C-XOR-Triangle" class="headerlink" title="CF1710C XOR Triangle"></a>CF1710C XOR Triangle</h1><p>数位<code>dp</code>，数学。</p><p>直接记录此时满足三边都行即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123; <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>&#123; <span class="keyword">while</span>(*s) <span class="built_in">putchar</span>(*s ++); &#125; </span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res, ARC ...com)</span> </span>&#123; <span class="built_in">write</span>(res), <span class="built_in">write</span>(com...); &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N];</span><br><span class="line"><span class="keyword">char</span> c[N];</span><br><span class="line"><span class="keyword">int</span> f[N][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> flag1, <span class="keyword">int</span> flag2, <span class="keyword">int</span> flag3, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!pos) <span class="keyword">return</span> x &amp;&amp; y &amp;&amp; z;</span><br><span class="line">    <span class="keyword">if</span>(f[pos][flag1][flag2][flag3][x][y][z] != <span class="number">-1</span>) <span class="keyword">return</span> f[pos][flag1][flag2][flag3][x][y][z];</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= (flag1 ? a[pos] : <span class="number">1</span>);i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt;= (flag2 ? a[pos] : <span class="number">1</span>);j ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt;= (flag3 ? a[pos] : <span class="number">1</span>);k ++)</span><br><span class="line">            &#123;</span><br><span class="line">                res = (res + <span class="built_in">dfs</span>(pos - <span class="number">1</span>, flag1 &amp;&amp; (i == a[pos]), flag2 &amp;&amp; (j == a[pos]), flag3 &amp;&amp; (k == a[pos]), x | ((j ^ k) + (i ^ k) &gt; (j ^ i)), y | ((j ^ i) + (j ^ k) &gt; (i ^ k)), z | ((i ^ k) + (i ^ j) &gt; (j ^ k)))) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> f[pos][flag1][flag2][flag3][x][y][z] = res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, c + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(c + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(c + <span class="number">1</span>, c + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) a[i] = c[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="built_in">write</span>(<span class="built_in">dfs</span>(n, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CF1628C-Grid-Xor"><a href="#CF1628C-Grid-Xor" class="headerlink" title="CF1628C Grid Xor"></a>CF1628C Grid Xor</h1><p>比较牛逼的构造题，首先猜想每个<code>a[i][j]</code>对<code>b</code>的异或值只可能贡献，或者非贡献（意思是不可能出现别的值），我们强行构造这样一种矩阵，记<code>c[i][j]</code>为<code>a[i][j]</code>是否贡献，那么由于<code>a[i][j]</code>是由四周贡献来的，所以<code>c[i][j]^c[i-2][j]^c[i-1][j-1]^c[i-1][j+1]=1</code>（<code>a[i][j]</code>一定存在），对于第一行的话由于这是强行构造的，所以直接全赋一就行了。</p><h1 id="CF1679A-AvtoBus"><a href="#CF1679A-AvtoBus" class="headerlink" title="CF1679A AvtoBus"></a>CF1679A AvtoBus</h1><p>垃圾题，分讨即可（还爆了两发罚时，菜成狗了）。</p><h1 id="CF1679D-Toss-a-Coin-to-Your-Graph"><a href="#CF1679D-Toss-a-Coin-to-Your-Graph" class="headerlink" title="CF1679D Toss a Coin to Your Graph"></a>CF1679D Toss a Coin to Your Graph</h1><p>二分，之后验证即可（看来实力也就<code>CF2000</code>左右了）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群论</title>
      <link href="/2022/08/04/%E7%BE%A4%E8%AE%BA/"/>
      <url>/2022/08/04/%E7%BE%A4%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<p>群论。</p><span id="more"></span><h1 id="代数系统"><a href="#代数系统" class="headerlink" title="代数系统"></a>代数系统</h1><p>代数系统 $s$ 是个定义了乘法运算（$\times$）的集合，满足封闭性。 例如 （$N,+$），（$R,\times$）都是代数系统。</p><h1 id="半群"><a href="#半群" class="headerlink" title="半群"></a>半群</h1><p>乘法运算（$\times$）存在结合律的代数系统称为半群。</p><h1 id="幺半群（幺群）"><a href="#幺半群（幺群）" class="headerlink" title="幺半群（幺群）"></a>幺半群（幺群）</h1><p><strong>单位元</strong>： 若半群$G$中存在$e$使得 $\forall g \in G,eg=ge=e$，则$e$称为单位元。 存在单位元的<strong>半群</strong>称为幺半群或者幺群。 </p><p><strong>定理</strong>： 幺群中单位元唯一。 </p><p><strong>证明</strong>： 若存在两个单位元$e_1,e_2$ ，则$e_1=e_1e_2=e_2$。</p><h1 id="幺半群（幺群）-1"><a href="#幺半群（幺群）-1" class="headerlink" title="幺半群（幺群）"></a>幺半群（幺群）</h1><p><strong>左逆和右逆</strong>： 对于$x$，若存在$y$使得$xy=1$，则$x$称为$y$的左逆， 称$y$为$x$的右逆。 </p><p><strong>逆元</strong>： 对于$x$，若存在$y$使得$xy=yx=1$，称$y$为$x$的逆元。 </p><p><strong>定理</strong>： 幺群中，若一个元素同时存在左逆和右逆，则其存在逆元。 </p><p><strong>证明</strong>： 不妨假设$zx = xy = 1$，则$y=(zx)y=z(xy)=z$。 </p><p><strong>定理</strong>： 幺群中，若$x$存在逆元，则逆元唯一。证明同上。</p><h1 id="群"><a href="#群" class="headerlink" title="群"></a>群</h1><p>若幺群中每个元素均存在逆元，则称为群。 </p><h1 id="阿贝尔群"><a href="#阿贝尔群" class="headerlink" title="阿贝尔群"></a>阿贝尔群</h1><p>若群中乘法满足交换律，则称为阿贝尔群。</p><h1 id="循环群"><a href="#循环群" class="headerlink" title="循环群"></a>循环群</h1><p>若群$G$中存在一个元素$g$，使得<br>$$<br>\begin{aligned}<br>G = \{ g^0,g^1,\dots,g^k \}<br>\end{aligned}<br>$$<br>则$G$称为<strong>循环群</strong>，$g$称为$G$的<strong>生成元</strong>。不难发现循环群一定是阿贝尔群。 </p><p><strong>定义</strong>： $G$是有限群，设$g \in G$，$k$为最小的正整数使得$g^k$，$k$称为$g$的阶。因而$G$循环群当且仅当存在阶为$|G|$的元素。</p><h1 id="环"><a href="#环" class="headerlink" title="环"></a>环</h1><p>环是定义了两个运算$+,\times$的集合$S$，满足$(S,+)$是阿贝尔群，且乘法关于加法具有分配律，乘法具有结合律。 </p><h1 id="域"><a href="#域" class="headerlink" title="域"></a>域</h1><p>域是定义了两个运算$+,*$的集合$S$，满足$(S,+)$和$(S,\times)$都是阿贝尔群，其中$0$是($S$,$+$)的单位元。</p><h1 id="子群"><a href="#子群" class="headerlink" title="子群"></a>子群</h1><p>设$G$为群，$S\subseteq G$ ，若$x,y \in S$都有$xy^{-1} \in S$，则称$S$为$G$的子群，记为$S \le G$。 </p><h1 id="置换群"><a href="#置换群" class="headerlink" title="置换群"></a>置换群</h1><p>设$A$是个非空集合，$G$中每个元素$f$都是$A$到$A$的双射。则$G$称为$A$上的置换群。 </p><p>不妨设$|A|=n$，$S_n$表示所有$A$到$A$双射构成的群（显然是群），则称$S_n$为$n$阶对称群（Symmetric Group）。显然所有$n$阶置换群都是$S_n$的子群。</p><h1 id="群的陪集分解"><a href="#群的陪集分解" class="headerlink" title="群的陪集分解"></a>群的陪集分解</h1><p><strong>陪集</strong>：对于群$G$和其子群$H$，对任意$a \in G$，定义$aH = \left { a<em>h|h \in H \right }$为$H$的 一个左陪集， $aH = \left { h</em>a|h \in H \right }$为$H$的一个右陪集，且显然陪集大小均和$H$相同。 </p><p><strong>引理</strong>：$\forall a_1,a_2 \in G$ ，$a_1H$和$a_2H$要么不交，要么相等。 </p><p><strong>定理</strong>（陪集分解定理）： 设$G$是有限群，则存在正整数$k$，使得$G=a_1H \cup a_2H \cup a_3H \dots \cup a_kH$，且这$k$个陪集两两不交。 </p><p><strong>推论</strong>（Language 定理）： 任意有限群的子群大小一定是其大小的因数。</p><p><strong>推论</strong>： 任意元素的阶一定是群大小的因数。因而若群大小是质数，则一定是循环群。</p><p>后面不会，<code>ppt</code>放文件夹里了。</p><p><a href="./1.pdf">ppt</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 群论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2022/8/4</title>
      <link href="/2022/08/04/test2022-8-4/"/>
      <url>/2022/08/04/test2022-8-4/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="47ed4706fa7f40f4fd244462fb8205fd7d8cc919a26048c0d5fbc02e45e24a84">f7c84d52981e04730e0cb33ecf03c03879929a54e059092e9fe37d6b91bc0b6601b64c840c83124f595ef7dc07a6d9564c1e4e521a278f68aabf194747c9a8c563e3bf22ec7c844f15a381a0f63393becbe4023fb4d7c46a6ff0ed13ef1a9f7877958d9f3f1ff44631f1a3eed36c12f3732021fbc69d178887e20f58277f98c12a70ad9f64d3a3d8c9ae3744c6aac17a51d8c94a0141e422e6ffc37e68234a2f8a6e19495b882f0efbb9f7caf9d32637d5afbde53763837899887ec06361169c672a52a608bb793a863a289a7d6619e2c597aa18d2a9109211fce295c628604ef8cb7ea419d9a423072dbeb61f1183062efb92b03a1d7ed3c37ec1227a02df4d729ec5eeb6c69d15ab177810e794a52a2c35ea3609f173da7fcf7b350b9270ebf1ac5a514c84b424e0d3fd582f549441d2af1a745c7f4ae0a36611831d809e763270c6337adf077084b80de105dec32c77fa35c4e1dbc196b69ccf22eae825b2cff24bef92b8684ed8cee92278b0b1c39a8b1937d7fe2b4d4ddd6c4a7ba255b7f015892038a26fb1a2bb6b93e449a1ded68173cc876f55fddef84361795bdf3318a400687940b6c7c2a411d1ef28256f30317a7a94ce1062316c7f3db72a454f73e892312f02986586ad1a3c78d9c3438c4cdee159549b86296220a1d97e9910c0904bb9bde23fbfa63ef63fc4c60c9b1ab6fddde6c0c8b023ab11845cdd44043ddba2539aea3eae8e96d3511df483e9c6e3cda7da95135858a43dfdf19e6209088c18b63c3780eab36005d4a346ae6ef5448a46909d28ae327ae7462f863e92ecb6a6312998cf7c2551e199a7f4eb60d8ec955d00e2400dfb1885d9b58c1a249e8e1629a64d517d0af9a76a98c2efbcea4419b157aeda55ab970404c12f847863dacc5e18effb88f9bfc516fa3fceea4ba680c428f781066d2d05ac1e22a2c9229d29f1accf556f7f95d1d686d52ba1c05f751a89f0ab5db1c730fce9ca2de96eab7b4dcb482a5f590b432eab7fdeca5edd8bb217dfa8c5dd2bb316670cc94a71b36d66604a56c01291dfce083488ba0ccb1ed930956867553f3e0674ae8b06c786f38c37b12f6d043f905c7a26f15a671244a6f06635d6ebe35a5e66ac3194cf1cf991225f7fad49a3bc561a1d600a91eba8c2fdb07b70f0248733aeda52b9cc9e4fee5d772c35a7c21db1d38c2498d2509f1d3fd4e40aef30e5f1e9a3579488e6e1704a4ee437630354dd5e7b2fe3def4a21e4075907b2818018fad42dbb86fe77a80a6c1ca20ed89b5ff062cb271cb6d86a8d8aab8c9a9dd442a129b0f3e95828983997aeda621b1a8c0b870ba39a80f9564cd8f6fa2800e55c2e23e5716561906eda0e2de82a1d64579684fc386cf81bf5eff06d8d28ea4fa8439265f34a9f51b0c43181831148014c9e2155fd86e25a49ded934f6e9fb69ea1a798d33fb7467e7ff3437647be02e8a4899998f6abb99bdd97bc41a7f34461f7bc9de9ae908c80ff9ea8371e5b6da0225a77f5055a6925f467e1582b0f5a452b776a7c8c309b0e7c771dc91e0a3d6151a0a3591700d20587dbee2be5438d309f45c293db880487b468d4048883749b834ebc51e49ecab62c1ba0031d61872b1b0beabcda</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>其他</title>
      <link href="/2022/08/03/%E5%85%B6%E4%BB%96/"/>
      <url>/2022/08/03/%E5%85%B6%E4%BB%96/</url>
      
        <content type="html"><![CDATA[<p>杂谈。</p><span id="more"></span><h1 id="快输"><a href="#快输" class="headerlink" title="快输"></a>快输</h1> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123; <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>&#123; <span class="keyword">while</span>(*s) <span class="built_in">putchar</span>(*s ++); &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T, class ...ARC&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res, ARC ...com)</span></span>&#123; <span class="built_in">write</span>(res), <span class="built_in">write</span>(com...);&#125;</span><br></pre></td></tr></table></figure><p>什么都能输，字符串的话传个首指针即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类欧几里得</title>
      <link href="/2022/08/03/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/"/>
      <url>/2022/08/03/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p>求解$\sum_{i=0}^n\left \lfloor \frac{ai+b}{c} \right \rfloor$之类的式子。</p><span id="more"></span><h1 id="第一类"><a href="#第一类" class="headerlink" title="第一类"></a>第一类</h1><p>令$f(a,b,c,n)=\sum_{i=0}^n\left \lfloor \frac{ai+b}{c} \right \rfloor$</p><p>我们对此分类讨论：</p><p>1.$a\ge c \ or \ b \ge c$</p><p>考虑去掉向下取整：<br>$$<br>\begin{aligned}<br>f(a,b,c,n)&amp;=\sum_{i=0}^n\left \lfloor \frac{ai+b}{c} \right \rfloor\\<br>    &amp;=\sum_{i=0}^n\left \lfloor \frac{(a\% c+ \left \lfloor \frac{a}{c} \right \rfloor c)i+b \% c+\left \lfloor \frac{b}{c} \right \rfloor c}{c} \right \rfloor\\<br>    &amp;=\left \lfloor \frac{a}{c} \right \rfloor \times\frac{n(n+1)}{2}+\left \lfloor \frac{b}{c} \right \rfloor \times (n+1) + \sum_{i=0}^n\left \lfloor \frac{a \% c \times i+ b \% c}{c} \right \rfloor<br>\end{aligned}<br>$$<br>2.$a&lt;c \ and \ b &lt; c$</p><p>令$m=\left \lfloor \frac{an+b}{c} \right \rfloor$。</p><p>则有：<br>$$<br>\begin{aligned}<br>f(a,b,c,n)&amp;=\sum_{i=0}^n\sum_{j=1}^m[j \le \left \lfloor \frac{ai+b}{c} \right \rfloor]\\<br>&amp;= \sum_{i=0}^n\sum_{j=0}^{m-1}[j +1\le \left \lfloor \frac{ai+b}{c} \right \rfloor]\\<br>&amp;=\sum_{i=0}^n\sum_{j=0}^{m-1}[i \ge \left \lfloor \frac{jc+c-b}{a} \right \rfloor]\\<br>&amp;=\sum_{i=0}^n\sum_{j=0}^{m-1}[i &gt; \left \lfloor \frac{jc+c-b-1}{a} \right \rfloor]\\<br>&amp;=\sum_{j=0}^{m-1}\sum_{i=0}^n[i &gt; \left \lfloor \frac{jc+c-b-1}{a} \right \rfloor]\\<br>&amp;=\sum_{j=0}^{m-1}\sum_{i=0}^n[i &gt; \left \lfloor \frac{jc+c-b-1}{a} \right \rfloor]\\<br>&amp;=\sum_{j=0}^{m-1}n- \left \lfloor \frac{jc+c-b-1}{a} \right \rfloor\\<br>&amp;=nm - f(c, c-b-1,a,m-1)\\<br>\end{aligned}<br>$$<br>故：<br>$$<br>f(a,b,c,n)=nm-f(c,c-b-1,a,m-1)<br>$$<br> 展开$m$：<br>$$<br>f(a,b,c,n)=n\left \lfloor \frac{an+b}{c} \right \rfloor -f(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor-1)<br>$$<br>直接递归处理即可，递归边界显然应该是$a=0$。</p><p>则：</p><p>$$<br>f(a,b,c,n)=<br>\begin{cases}<br>  &amp; \left \lfloor \frac{a}{c} \right \rfloor \times\frac{n(n+1)}{2}+\left \lfloor \frac{b}{c} \right \rfloor \times (n+1) + f(a \% c,b \% c,c, n), \ a\ge c \ or \ b \ge c \\<br>  &amp; n\left \lfloor \frac{an+b}{c} \right \rfloor -f(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor-1), \ a&lt;c \ and \ b &lt; c<br>\end{cases}<br>$$</p><h1 id="第二类"><a href="#第二类" class="headerlink" title="第二类"></a>第二类</h1><p>令$g(a,b,c,n)=\sum_{i=0}^n i \left \lfloor \frac{ai+b}{c} \right \rfloor$</p><h2 id="小结论"><a href="#小结论" class="headerlink" title="小结论"></a>小结论</h2><p>$$<br>\sum_{i=1}^n i^2 = \frac{n(n+1)(2n+1)}{6}<br>$$</p><p>1.$a \ge c \ or b \ge c$</p><p>像$f$一样考虑：<br>$$<br>\begin{aligned}<br>g(a,b,c,n)&amp;=\sum_{i=0}^ni\left \lfloor \frac{ai+b}{c} \right \rfloor\\<br>    &amp;=\sum_{i=0}^ni \left \lfloor \frac{(a\% c+ \left \lfloor \frac{a}{c} \right \rfloor c)i+b \% c+\left \lfloor \frac{b}{c} \right \rfloor c}{c} \right \rfloor\\<br>    &amp;=\left \lfloor \frac{a}{c} \right \rfloor \times\frac{n(n+1)(2n+1)}{6}+\left \lfloor \frac{b}{c} \right \rfloor \times \frac{n(n+1)}{2} + g(a \% c, b \% c, c, n)<br>\end{aligned}<br>$$<br>2.$a&lt;c \ and \ b &lt; c$</p><p>那么同样的，设：<br>$$<br>m=\left \lfloor \frac{an+b}{c} \right \rfloor<br>$$<br>同上可得：<br>$$<br>g(a,b,c,n)=\sum_{i=0}^ni\sum_{j=0}^{m-1}[i &gt; \left \lfloor \frac{jc+c-b-1}{a} \right \rfloor]<br>$$<br>这里有一个等差数列（我愣是没能看出来）</p><p>则：<br>$$<br>\begin{aligned}<br>g(a,b,c,n) &amp;=\sum_{j=0}^{m-1} \frac{(\left \lfloor \frac{jc+c-b-1}{a} \right \rfloor +1+n)(n-\left \lfloor \frac{jc+c-b-1}{a} \right \rfloor)}{2}\\<br>&amp;= \left \lfloor \frac{mn(n+1)-f(c,c-b-1,a,m-1)-h(c,c-b-1,a,m-1)}{2} \right \rfloor<br>\end{aligned}<br>$$<br>即：<br>$$<br>g(a,b,c,n)= \left \lfloor \frac{\left \lfloor \frac{an+b}{c} \right \rfloor n(n+1)-f(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor - 1)-h(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor-1)}{2} \right \rfloor<br>$$<br>则：</p><p>$$<br>g(a,b,c,n)=<br>\begin{cases}<br>  &amp; \left \lfloor \frac{a}{c} \right \rfloor \times\frac{n(n+1)(2n+1)}{6}+\left \lfloor \frac{b}{c} \right \rfloor \times \frac{n(n+1)}{2} + g(a \% c, b \% c, c, n), \ a\ge c \ or \ b \ge c \\<br>   &amp; \left \lfloor \frac{\left \lfloor \frac{an+b}{c} \right \rfloor n(n+1)-f(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor - 1)-h(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor-1)}{2} \right \rfloor, \ a&lt;c \ and \ b &lt; c \\<br>\end{cases}<br>$$</p><p>上面的$h$是不是很蒙，因为它是第三类。</p><h1 id="第三类"><a href="#第三类" class="headerlink" title="第三类"></a>第三类</h1><p>令$h(a,b,c,n)=\sum_{i=0}^n \left \lfloor \frac{ai+b}{c} \right\rfloor^2$。</p><p>推导太恶心了，看着办吧。</p><p>$$<br>h(a,b,c,n) =<br>\begin{cases}<br> &amp; h(a \% c, b \% c, c, n)+ 2\left \lfloor \frac{a}{c} \right \rfloor f(a \% c,b \% c,c, n) +\frac{n(n+1)(2n+1)}{6}\left \lfloor \frac{a}{c} \right \rfloor^2+n(n+1)\left \lfloor \frac{a}{c} \right \rfloor\left \lfloor \frac{b}{c} \right \rfloor, \ a\ge c \ or \ b \ge c \\<br> &amp; n\left \lfloor \frac{an+b}{c} \right \rfloor(\left \lfloor \frac{an+b}{c} \right \rfloor+1)-2f(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor-1)-2g(c,c-b-1,a,\left \lfloor \frac{an+b}{c} \right \rfloor-1)-f(a,b,c,n), \ a&lt;c \ and \ b &lt; c\\<br>\end{cases}<br>$$</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><h2 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> uLL unsigned long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, ARC &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">10</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>, inv2 = (mod + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, inv6 = <span class="number">166374059</span>, Mod = <span class="number">1e9</span> + <span class="number">7</span>, bas = <span class="number">43963</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n, a, b, c;</span><br><span class="line">unordered_map&lt;LL, <span class="keyword">int</span>&gt;F, G, H;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">h</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">Hash</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (((LL)x * bas % Mod + y) % Mod * bas + z) % Mod * bas + n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a) <span class="keyword">return</span> <span class="number">1ll</span> * b / c * (n + <span class="number">1</span>) % mod;</span><br><span class="line">    LL res = <span class="built_in">Hash</span>(a, b, c, n);</span><br><span class="line">    <span class="keyword">if</span>(F.<span class="built_in">find</span>(res) != F.<span class="built_in">end</span>()) <span class="keyword">return</span> F[res];</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= c || b &gt;= c) <span class="keyword">return</span> F[res] = ((LL)a / c * n % mod * (n + <span class="number">1</span>) % mod * inv2 + <span class="number">1ll</span> * b / c * (n + <span class="number">1</span>) + <span class="built_in">f</span>(a % c, b % c, c, n)) % mod;</span><br><span class="line">    <span class="keyword">int</span> m = ((LL)a * n + b) / c;</span><br><span class="line">    <span class="keyword">return</span> F[res] = (<span class="number">1ll</span> * n * m - <span class="built_in">f</span>(c, c - b - <span class="number">1</span>, a, m - <span class="number">1</span>) + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pw</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1ll</span> * x * x % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">h</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a) <span class="keyword">return</span> <span class="number">1ll</span> * <span class="built_in">pw</span>(b / c) * (n + <span class="number">1</span>) % mod;</span><br><span class="line">    LL res = <span class="built_in">Hash</span>(a, b, c, n);</span><br><span class="line">    <span class="keyword">if</span>(H.<span class="built_in">find</span>(res) != H.<span class="built_in">end</span>()) <span class="keyword">return</span> H[res];</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= c || b &gt;= c) <span class="keyword">return</span> H[res] = (<span class="built_in">h</span>(a % c, b % c, c, n) + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * (<span class="number">2ll</span> * n + <span class="number">1</span>) % mod * inv6 % mod * <span class="built_in">pw</span>(a / c) + <span class="number">1ll</span> * (n + <span class="number">1</span>) * <span class="built_in">pw</span>(b / c) + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * (a / c) % mod * (b / c) + b / c * <span class="number">2ll</span> * <span class="built_in">f</span>(a % c, b % c, c, n) + a / c * <span class="number">2ll</span> % mod * <span class="built_in">g</span>(a % c, b % c, c, n)) % mod;</span><br><span class="line">    <span class="keyword">int</span> m = ((LL)a * n + b) / c;</span><br><span class="line">    <span class="keyword">return</span> H[res] = (<span class="number">1ll</span> * m * n % mod * (m + <span class="number">1</span>) - <span class="built_in">f</span>(a, b, c, n) - <span class="number">2</span> * ((LL)<span class="built_in">g</span>(c, c - b - <span class="number">1</span>, a, m - <span class="number">1</span>) + <span class="built_in">f</span>(c, c - b - <span class="number">1</span>, a, m - <span class="number">1</span>)) + mod + mod + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a) <span class="keyword">return</span> (LL)b / c * n % mod * (n + <span class="number">1</span>) % mod * inv2 % mod;</span><br><span class="line">    LL res = <span class="built_in">Hash</span>(a, b, c, n); </span><br><span class="line">    <span class="keyword">if</span>(G.<span class="built_in">find</span>(res) != G.<span class="built_in">end</span>()) <span class="keyword">return</span> G[res];</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= c || b &gt;= c) <span class="keyword">return</span> G[res] = (<span class="built_in">g</span>(a % c, b % c, c, n) + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * (<span class="number">2ll</span> * n + <span class="number">1</span>) % mod * inv6 % mod * (a / c) + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * inv2 % mod * (b / c)) % mod;</span><br><span class="line">    <span class="keyword">int</span> m = ((LL)a * n + b) / c;</span><br><span class="line">    <span class="keyword">return</span> G[res] = (<span class="number">1ll</span> * m * n % mod * (n + <span class="number">1</span>) - <span class="built_in">h</span>(c, c - b - <span class="number">1</span>, a, m - <span class="number">1</span>) - <span class="built_in">f</span>(c, c - b - <span class="number">1</span>,a, m - <span class="number">1</span>) + mod + mod) % mod * inv2 % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(<span class="number">114514</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, a, b, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, (<span class="built_in">f</span>(a, b, c, n) + mod) % mod, (<span class="built_in">h</span>(a, b, c, n) + mod) % mod, (<span class="built_in">g</span>(a, b, c, n) + mod) % mod);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">rnd</span>() % <span class="number">100</span> == <span class="number">9</span>) F.<span class="built_in">clear</span>(), G.<span class="built_in">clear</span>(), H.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="同步计算（faster）"><a href="#同步计算（faster）" class="headerlink" title="同步计算（faster）"></a>同步计算（faster）</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, ARC &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123; <span class="built_in">putchar</span>(c); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> </span>&#123; <span class="keyword">while</span>(*s) <span class="built_in">putchar</span>(*s ++); &#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;class T, class ...ARC&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res, ARC ...com)</span></span>&#123; <span class="built_in">write</span>(res), <span class="built_in">write</span>(com...);&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>, inv2 = (mod + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, inv6 = <span class="number">166374059</span>, Mod = <span class="number">1e9</span> + <span class="number">7</span>, bas = <span class="number">43963</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n, a, b, c;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> f, h, g;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">pw</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1ll</span> * x * x % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node <span class="title">get_ans</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node now;</span><br><span class="line">    <span class="keyword">if</span>(!a)</span><br><span class="line">    &#123;</span><br><span class="line">        now.f = <span class="number">1ll</span> * b / c * (n + <span class="number">1</span>) % mod;</span><br><span class="line">        now.h = <span class="number">1ll</span> * <span class="built_in">pw</span>(b / c) * (n + <span class="number">1</span>) % mod;</span><br><span class="line">        now.g = <span class="number">1ll</span> * b / c * n % mod * (n + <span class="number">1</span>) % mod * inv2 % mod;</span><br><span class="line">        <span class="keyword">return</span> now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= c || b &gt;= c)</span><br><span class="line">    &#123;</span><br><span class="line">        Node last = <span class="built_in">get_ans</span>(a % c, b % c, c, n);</span><br><span class="line">        now.f = ((LL)a / c * n % mod * (n + <span class="number">1</span>) % mod * inv2 + <span class="number">1ll</span> * b / c * (n + <span class="number">1</span>) + last.f) % mod;</span><br><span class="line">        now.h = (last.h + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * (<span class="number">2ll</span> * n + <span class="number">1</span>) % mod * inv6 % mod * <span class="built_in">pw</span>(a / c) + (LL)(n + <span class="number">1</span>) * <span class="built_in">pw</span>(b / c) + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * (a / c) % mod * (b / c) + b / c * <span class="number">2ll</span> * last.f + a / c * <span class="number">2ll</span> % mod * last.g) % mod;</span><br><span class="line">        now.g = (last.g + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * (<span class="number">2ll</span> * n + <span class="number">1</span>) % mod * inv6 % mod * (a / c) + <span class="number">1ll</span> * n * (n + <span class="number">1</span>) % mod * inv2 % mod * (b / c)) % mod;</span><br><span class="line">        <span class="keyword">return</span> now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (<span class="number">1ll</span> * a * n + b) / c;</span><br><span class="line">    Node last = <span class="built_in">get_ans</span>(c, c - b - <span class="number">1</span>, a, m - <span class="number">1</span>);</span><br><span class="line">    now.f = (<span class="number">1ll</span> * n * m - last.f) % mod;</span><br><span class="line">    now.h = (<span class="number">1ll</span> * n * m % mod * (m + <span class="number">1</span>) - now.f + <span class="number">2</span> * (<span class="number">2ll</span> * mod - last.g - last.f) + mod) % mod;</span><br><span class="line">    now.g = (<span class="number">1ll</span> * n * m % mod * (n + <span class="number">1</span>) - last.h - last.f + <span class="number">2ll</span> * mod) % mod * inv2 % mod;</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, a, b, c);</span><br><span class="line">    Node ans = <span class="built_in">get_ans</span>(a, b, c, n);</span><br><span class="line">    <span class="built_in">write</span>(ans.f, <span class="string">&#x27; &#x27;</span>, ans.h, <span class="string">&#x27; &#x27;</span>, ans.g, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性拉格朗日插值</title>
      <link href="/2022/08/03/%E7%BA%BF%E6%80%A7%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC/"/>
      <url>/2022/08/03/%E7%BA%BF%E6%80%A7%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>rt</p><span id="more"></span><p><a href="https://codeforces.com/problemset/problem/622/F">题目传送门</a></p><p>记录一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, ARC &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">10</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">100</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = <span class="number">1ll</span> * res * x % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        x = <span class="number">1ll</span> * x * x % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fac[N], inv1[N], inv2[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k + <span class="number">2</span>;i ++) fac[i] = <span class="built_in">qpow</span>(i, k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k + <span class="number">2</span>;i ++) fac[i] = (fac[i] + fac[i - <span class="number">1</span>]) % mod;</span><br><span class="line">    inv1[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k + <span class="number">2</span>;i ++) inv1[i] = <span class="number">1ll</span> * inv1[i - <span class="number">1</span>] * <span class="built_in">qpow</span>(i, mod - <span class="number">2</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>, pw[N], pw1[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    pw[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k + <span class="number">2</span>;i ++) pw[i] = <span class="number">1ll</span> * pw[i - <span class="number">1</span>] * (x - i) % mod;</span><br><span class="line">    pw1[k + <span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = k + <span class="number">2</span>;i &gt;= <span class="number">0</span>;i --) pw1[i] = <span class="number">1ll</span> * pw1[i + <span class="number">1</span>] * (x - i) % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u;i &lt;= k + <span class="number">2</span>;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        o = <span class="number">1ll</span> * inv1[i - <span class="number">1</span>] % mod * inv1[k + <span class="number">2</span> - i] * ((k - i) &amp; <span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span>) % mod;</span><br><span class="line">       u = <span class="number">1ll</span> * pw[i - <span class="number">1</span>] % mod * pw1[i + <span class="number">1</span>] % mod;</span><br><span class="line">        ans = (ans + <span class="number">1ll</span> * fac[i] % mod * o % mod * u % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ans % mod + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, k);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    cout &lt;&lt; <span class="built_in">calc</span>(n) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 拉格朗日插值 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF888G Xor-MST</title>
      <link href="/2022/08/03/CF888G-Xor-MST/"/>
      <url>/2022/08/03/CF888G-Xor-MST/</url>
      
        <content type="html"><![CDATA[<p><code>Trie</code>+生成树。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>感觉挺妙的。</p><p>首先我们考虑怎样合并最小，可以发现，当我们将这些节点建成$Trie$树时，最优的方案一定是每次合并$Trie$树的两个子树最优，为什么呢，画张图之后就可以发现只有$n- 1$个节点有两个儿子，而对于每一个叶子节点，想要合并到联通块之中的话最优一定是在两两的$lca$处合并，所以我们对于每一个存在两个儿子的$Trie$树，从它的两个子树中分别找一个节点，使他们的异或和最小（启发式即可），依次合并即可。</p><p>一个卡常小技巧：将节点排序之后插入$Trie$树，这样$Trie$树中节点编号更加连续，常数更小。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARC</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, ARC &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">10</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL Inf = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> ch[N * <span class="number">31</span>][<span class="number">2</span>], tot = <span class="number">1</span>, l[N * <span class="number">31</span>], r[N * <span class="number">31</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root = <span class="number">1</span>;</span><br><span class="line">    l[<span class="number">1</span>] = <span class="number">1</span>, r[<span class="number">1</span>] = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">30</span>, op;i &gt;= <span class="number">0</span>;i --)</span><br><span class="line">    &#123;</span><br><span class="line">        op = (x &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(ch[root][op]) root = ch[root][op];</span><br><span class="line">        <span class="keyword">else</span> ch[root][op] = ++ tot, root = tot;</span><br><span class="line">        <span class="keyword">if</span>(!l[root]) l[root] = id;</span><br><span class="line">        r[root] = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k, <span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> op = (k &gt;&gt; depth) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ch[x][op]) <span class="keyword">return</span> <span class="built_in">query</span>(ch[x][op], k, depth - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(ch[x][op ^ <span class="number">1</span>], k, depth - <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; depth);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> depth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(depth &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ch[x][<span class="number">0</span>] &amp;&amp; ch[x][<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        LL ans = Inf;</span><br><span class="line">        <span class="keyword">if</span>(r[ch[x][<span class="number">0</span>]] - l[ch[x][<span class="number">0</span>]] &lt;= r[ch[x][<span class="number">1</span>]] - l[ch[x][<span class="number">1</span>]])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = l[ch[x][<span class="number">0</span>]];i &lt;= r[ch[x][<span class="number">0</span>]];i ++)</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, <span class="built_in">query</span>(ch[x][<span class="number">1</span>], a[i], depth - <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; depth));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = l[ch[x][<span class="number">1</span>]];i &lt;= r[ch[x][<span class="number">1</span>]];i ++)</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, <span class="built_in">query</span>(ch[x][<span class="number">0</span>], a[i], depth - <span class="number">1</span>) + (<span class="number">1</span> &lt;&lt; depth));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(ch[x][<span class="number">0</span>], depth - <span class="number">1</span>) + <span class="built_in">dfs</span>(ch[x][<span class="number">1</span>], depth - <span class="number">1</span>) + ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch[x][<span class="number">0</span>]) <span class="keyword">return</span> <span class="built_in">dfs</span>(ch[x][<span class="number">0</span>], depth - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(ch[x][<span class="number">1</span>]) <span class="keyword">return</span> <span class="built_in">dfs</span>(ch[x][<span class="number">1</span>], depth - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">insert</span>(a[i], i);</span><br><span class="line">    <span class="built_in">write</span>(<span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">30</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Trie </tag>
            
            <tag> 生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强制在线莫队</title>
      <link href="/2022/08/02/%E5%BC%BA%E5%88%B6%E5%9C%A8%E7%BA%BF%E8%8E%AB%E9%98%9F/"/>
      <url>/2022/08/02/%E5%BC%BA%E5%88%B6%E5%9C%A8%E7%BA%BF%E8%8E%AB%E9%98%9F/</url>
      
        <content type="html"><![CDATA[<p>感觉好牛逼的样子。</p><span id="more"></span><p>在此之前先放一个莫队优化。</p><h1 id="奇偶性优化"><a href="#奇偶性优化" class="headerlink" title="奇偶性优化"></a>奇偶性优化</h1><p>对于奇数块的右端点递增排序，对于偶数块递减排序。</p><p>$10^5$的数据大概可以快$150ms$。</p><p>然后才是正文。</p><h1 id="强制在线莫队"><a href="#强制在线莫队" class="headerlink" title="强制在线莫队"></a>强制在线莫队</h1><p>跟分块没有什么区别，先将序列分成$\sqrt n$块，预处理出每两块之间的信息，然后每次询问找到离它最近的两个端点移动即可。</p><p>其实就是在序列上平衡的放$\sqrt n$条路径，这些路径都已经被预处理好了，每次查询时只需要找到曼哈顿距离最近的路径即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test/2022/8/2</title>
      <link href="/2022/08/02/test-2022-8-2/"/>
      <url>/2022/08/02/test-2022-8-2/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0e4512de84d6b43057d2fd915d276d0af927f7bf90f775e00af128070d179763">f7c84d52981e04730e0cb33ecf03c038910740211be4281c6f3eace9abc81e1ea11c0745fa7f4ddb00c85c6cd520f02ea0992689e0881866141a7ad9d087ab009df270a92f271960675ba1a2bde65b0aa85bd305c0bc42e0f9d51d1afc3db4852aeda9cd90038874dfef200d5ac945597309f5fc21320715729ef3adbcc0a261cf0d5817773ad349c41924faa46c115f939bf18ac30c19eb8df2c20a548e5ebc7b1eb06d11308bb741c54e6b5e9d03942d9c4b189f98ff2b0cf542ae72dc3aeda9f2e109bde3cfc680497a1e627f3b6ebb94dbe57e1c84a29da89477f03c55b8231eaa66201a8f693358fbe557df6039815ea805191e27f831144b55cbfe9c4bbf6f64add02736f9db2ada1d3fb273806e947941ca59457fecd0032768951b7eb103ba2667fb3121ec4907e13f20c1d1a9615af1ac71049b44a83a78012b4a5ebdd9f1dc6f6643ecd8020b8157f99e0922d54e7b0868087690b507f246b18b32788c71e3764fe998da063dc85f1939b4500e1747e079fa376aaa52cc1cd069f11dc7a70d4dfc85610a7a1ffb783f4e7b7ea8d483a46c7934526f03c34a41d60e5c0a621185fe9fc565a4c7348ec0c38d884be2d96798a7fa376052d4db7aa4129e4af81747d861c8b28c14b488690fcb7b24bd729442d461ae4d0b44937b6ba3823da64df8e6acc62e86090cdf5cfcacbe6f7bfcb6eb192008e0d3ce3b1bc6a2de5fa96c6f56644eafdbc734c9823a3fd6194ac14883dc3ffdba93a418fb4373ebc4c6326f7ac2a0b6ad83fd020094487109d8310b0c0f9c3b1f730f0a222111bc28c625b4a7c077439e142a076fac38ba5ec881860ae1cb56883fd33554eb5b68394f960923e4beea7f192ae64f01fcd255f270642ad12df616dbfc3ce9872224748f1e4ddc0ec3b2021c539695be454c793dc9999d00a7284cc512b3cee36d844dc8e871e2300dd999ce6ec5cf1f3c03ceb2b99408333e439939e43e554a934adbe47e3195459641ec7bbd127745fbb2d07b1a4b00f7509983f4c0c3222b70251b6b4137b18c20796ae1e59f5f088593212738ff4ccf34a1388719eee16c053eeb0dd03ec3afa17aee978394a6ade0c2968100be670001ae7d51deea15f08760d1b6c3d144de6fd7ffd5a4f0b29bf82cdcbcdf16a62d82a17ab9c509beab358f9ef7cc770850a336d5641fc8707d50afc0cbaff2913653eebbe97947d24270e466ee642444828bbd6c9bdee68b5b7fb2cd04171e31da156c3931c898ab98a6b6f152abb09cb4d5668b0923d7d698d162ed29250a5ad8bedf4fe8dcae64855e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2020 制作菜品</title>
      <link href="/2022/08/01/NOI2020-%E5%88%B6%E4%BD%9C%E8%8F%9C%E5%93%81/"/>
      <url>/2022/08/01/NOI2020-%E5%88%B6%E4%BD%9C%E8%8F%9C%E5%93%81/</url>
      
        <content type="html"><![CDATA[<p>构造+背包+<code>bitset</code>。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>牛逼题。</p><p>题目意外的保证了$m\ge n-2$所以肯定往这上面想。</p><p>首先观察样例猜结论，肯定是用大的数去补小的数，仔细想想，对于$m=n-1$这样操作在前$n-2$次就会消掉$n-2$个数，最后一对数一定会在最后一次操作时消掉。</p><p>再来想想$m&gt;n-1$的情况，这也比较好办，只要将多的菜用一种材料完成，即可将问题转化成$m=n-1$。</p><p>最阴间的$m=n-2$，我们依旧延续上文的想法，将其和$m=n-1$联系起来，可以发现将$n,m$拆两部分，每一部分都满足$\sum_{i\in S}d_i=(|S|-1)k$即可，这个东西是可以$dp$的，但是发现这么做显然不优，于是考虑再进行一步转化，对左右两边都减一个$|S|k$，原式就等于$\sum_{i\in S} d_i-k=-k$，这个东西就可以直接跑背包，这是可以用$bitset$优化的（<del>但我就是想不到</del>），首先将负数全部转正，然后左移右移即可。</p><p>复杂度：$O(\frac{n^2k}{w})$。本人跑的贼慢。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500</span> + <span class="number">5</span>, M = <span class="number">5000000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, T, m, k;</span><br><span class="line"><span class="keyword">int</span> d[N];</span><br><span class="line">priority_queue&lt;PII&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) q.<span class="built_in">push</span>(&#123;d[i], i&#125;);</span><br><span class="line">    <span class="keyword">while</span>(m != n - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        PII o = q.<span class="built_in">top</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        o.first -= k;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, o.second, k);</span><br><span class="line">        q.<span class="built_in">push</span>(o);</span><br><span class="line">        m --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) d[q.<span class="built_in">top</span>().second] = q.<span class="built_in">top</span>().first, q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> minn = <span class="number">1e9</span> + <span class="number">7</span>, id_minn, maxn = <span class="number">0</span>, id_maxn;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">            <span class="keyword">if</span>(d[i] != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(minn &gt;= d[i]) id_minn = i, minn = d[i];</span><br><span class="line">                <span class="keyword">if</span>(maxn &lt;= d[i]) id_maxn = i, maxn = d[i];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>, id_minn, minn, id_maxn, k - minn);</span><br><span class="line">        d[id_maxn] -= k - minn, d[id_minn] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bitset&lt;M&gt;s[<span class="number">505</span>];</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line">PII st[N];</span><br><span class="line"><span class="keyword">int</span> hh;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pout</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = hh - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cnt --)</span><br><span class="line">    &#123;</span><br><span class="line">        PII minn = &#123;<span class="number">1e9</span> + <span class="number">7</span>, <span class="number">0</span>&#125;, maxn = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> id_maxn, id_minn;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= hh;i ++)</span><br><span class="line">            <span class="keyword">if</span>(st[i].first != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(minn &gt;= st[i]) id_minn = i, minn = st[i];</span><br><span class="line">                <span class="keyword">if</span>(maxn &lt;= st[i]) id_maxn = i, maxn = st[i];</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d\n&quot;</span>, minn.second, minn.first, maxn.second, k - minn.first);</span><br><span class="line">        st[id_minn].first -= minn.first, st[id_maxn].first -= k - minn.first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = n * k;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">3</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>), <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i ++) s[i].<span class="built_in">reset</span>(), vis[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) d[i] -= k;</span><br><span class="line">    s[<span class="number">0</span>][sum] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(d[i] &gt; <span class="number">0</span>) s[i] = s[i - <span class="number">1</span>] | (s[i - <span class="number">1</span>] &lt;&lt; d[i]);</span><br><span class="line">        <span class="keyword">else</span> s[i] = s[i - <span class="number">1</span>] | (s[i - <span class="number">1</span>] &gt;&gt; (-d[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!s[n][sum - k]) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>), <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    <span class="keyword">int</span> last = sum - k;</span><br><span class="line">    hh = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">        <span class="keyword">if</span>(s[i - <span class="number">1</span>][last - d[i]]) last -= d[i], vis[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) </span><br><span class="line">        <span class="keyword">if</span>(vis[i]) st[++ hh] = &#123;d[i] + k, i&#125;;</span><br><span class="line">    <span class="built_in">pout</span>();</span><br><span class="line">    hh = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">if</span>(!vis[i]) st[++ hh] = &#123;d[i] + k, i&#125;;</span><br><span class="line">    <span class="built_in">pout</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m, k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(d[i]);</span><br><span class="line">    <span class="keyword">if</span>(m &gt;= n - <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">split</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 构造 </tag>
            
            <tag> 背包 </tag>
            
            <tag> bitset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZR2022/8/1讲课</title>
      <link href="/2022/08/01/ZR2022-8-1%E8%AE%B2%E8%AF%BE/"/>
      <url>/2022/08/01/ZR2022-8-1%E8%AE%B2%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<p><code>Rt</code>。</p><span id="more"></span><h1 id="Boruvka"><a href="#Boruvka" class="headerlink" title="Boruvka"></a>Boruvka</h1><p>每次选择一条联通不同的连通块的最小的边，然后将其加入生成树，合并两个联通块，共做$n$次，复杂度：$O(n\log m)$。</p><p>例题：<a href="https://codeforces.com/problemset/problem/888/G">CF888G</a></p><p>注意将$xor$改为相加之和取模也可做。</p><h1 id="树上背包"><a href="#树上背包" class="headerlink" title="树上背包"></a>树上背包</h1><h1 id="Best-Thm"><a href="#Best-Thm" class="headerlink" title="Best  Thm"></a>Best  Thm</h1><p>求$n$个点的有向图的欧拉回路的条数。</p><p>令答案为$ans$，$T(x)$表示以$x$为根的内向树的个数，$deg(x)$为$x$的出度（等于入读，否则不可能有欧拉回路），则：<br>$$<br>ans = T(root)\times \prod_{v\in V}(deg(v)-1)!<br>$$<br>$root$取哪个点都可以。</p><h1 id="拟阵交"><a href="#拟阵交" class="headerlink" title="拟阵交"></a>拟阵交</h1><p>不会</p><h1 id="斯坦纳树"><a href="#斯坦纳树" class="headerlink" title="斯坦纳树"></a>斯坦纳树</h1><p><a href="https://loj.ac/p/6433">最大前缀和</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 听课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test/2022/7/26</title>
      <link href="/2022/07/26/test-2022-7-26/"/>
      <url>/2022/07/26/test-2022-7-26/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b6fde309fa1f9806af6fa8b854dece0d0e8966622601060288ca78648b7ba811"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2020 美食家</title>
      <link href="/2022/07/25/NOI2020-%E7%BE%8E%E9%A3%9F%E5%AE%B6/"/>
      <url>/2022/07/25/NOI2020-%E7%BE%8E%E9%A3%9F%E5%AE%B6/</url>
      
        <content type="html"><![CDATA[<p>矩阵快速幂。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><a href="https://www.luogu.com.cn/problem/P6772">题目传送门</a></p><p>首先发现$n\le 50,T\le 10^9$，大概可以猜到是矩阵快速幂，但是转移的话有边长度的限制，需要拆一下，拆边有点爆炸，考虑拆点，拆完点之后对美食节时间排序，每次转移到下一个美食节开始的位置，然后添加贡献即可，复杂度：$O((5n)^3\cdot k)$，可以发现，这样做复杂度有点爆炸，预处理出<code>2</code>的整次幂的矩阵，每次用原矩阵和转移矩阵相乘，复杂度就可以将为$O((5n)^2 \cdot k)$。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, pair&lt;int, int&gt;</span> &gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">250</span> + <span class="number">5</span>, Inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, T, k, len;</span><br><span class="line">LL f[N], g[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    LL a[N][N];</span><br><span class="line">    Node <span class="keyword">operator</span>* (Node b)</span><br><span class="line">    &#123;</span><br><span class="line">        Node c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= len;j ++)</span><br><span class="line">            &#123;</span><br><span class="line">                c.a[i][j] = -Inf;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= len;k ++)</span><br><span class="line">                    c.a[i][j] = <span class="built_in">max</span>(c.a[i][j], a[i][k] + b.a[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[<span class="number">40</span>], b;</span><br><span class="line">PII t[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m, T, k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">5</span> * n;i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">5</span> * n;j ++)</span><br><span class="line">            a[<span class="number">0</span>].a[i][j] = -Inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(f[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u, v;i &lt;= m;i ++)</span><br><span class="line">        <span class="built_in">read</span>(o, u, v), a[<span class="number">0</span>].a[n * (v - <span class="number">1</span>) + o][u] = f[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">4</span>;j ++)</span><br><span class="line">            a[<span class="number">0</span>].a[n * (j - <span class="number">1</span>) + i][n * j + i] = <span class="number">0</span>;</span><br><span class="line">    len = n * <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; <span class="number">32</span>;i ++) a[i] = a[i - <span class="number">1</span>] * a[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, id, u;i &lt;= k;i ++) <span class="built_in">read</span>(o, id, u), t[i] = &#123;o, &#123;id, u&#125;&#125;;</span><br><span class="line">    t[<span class="number">0</span>] = &#123;<span class="number">0</span>, &#123;<span class="number">0</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    t[++ k] = &#123;T, &#123;<span class="number">0</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(t + <span class="number">1</span>, t + k + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= len;i ++) f[i] = -Inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> times = <span class="number">1</span>;times &lt;= k;times ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> o = t[times].first - t[times - <span class="number">1</span>].first;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> cnt = <span class="number">0</span>;cnt &lt;= <span class="number">31</span>;cnt ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(o &gt;&gt; cnt &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= len;j ++) g[j] = -Inf;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= len;j ++)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>;l &lt;= len;l ++)</span><br><span class="line">                        g[j] = <span class="built_in">max</span>(g[j], f[l] + a[cnt].a[l][j]);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= len;j ++) f[j] = g[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f[t[times].second.first] += t[times].second.second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f[<span class="number">1</span>] &lt; <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">write</span>(f[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 矩阵快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test2022/7/25</title>
      <link href="/2022/07/25/test2022-7-25/"/>
      <url>/2022/07/25/test2022-7-25/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e1d97e6103001bb7b03e9da6e655da5e67b413ce6dff5d7421ecb0c9d4da159a">f7c84d52981e04730e0cb33ecf03c0388f545a1418cf72ea712b21717b14e1a647627dbcb2493062ab3bcd6356332a799137c0e5d69fb216d4e0fe7f4f6168e7d1db69be9930cf54a67844955dd9bdad21197b47b3d8b31a8df5acec7cfe051130e2c155e996c65cf803113ed6c8480be80910693483578e93d3ef6efe93b20b2ca1ddd77557fdcc39b84110972105daa9e67bec8b31e02eb8b18b7b05b209199c5ced78ad55919e20d895d857d66273eb8e0b8e4332edeca803373fde1f177312d5f14bd815f9d380f49520911c0ac01ea8ae302a11f56f85ce340a0cb52a06f7ffcebb5fe9054f96cefdd8700f86c007de00cedccb0dabda05cc4943d641568c662fb1e5b8ad52808491519575d530d1af388345ba8431fe40b0abc8b35f49c3929d00a9c5b95dd838ca10c11496e09a51f4e67a55fe52b22b84b4c6467808cdac38e2341e93666b4cef9bfbd32c72a56f51d36e005b6d6fbf2eb7ce55a413b7151478304066773354eaeb72322f16c247fdc83ce2596372674fd757aa4230de610e0137b2ed49a5938b540b3ae1ca76aba456cd4c9760f667165d3f0ecd7874250d2e54266f1f9464bc98d689252c7203a77df398169ac67ae29c411bb2657f4779b1f802335559089a86fd63ed8092ed467970ad7226f18fa8e5ff9a2fbaeee6a82ed915dd643b9d030e9b10089d06db49df628950dd3cf3018f81a6efb05dd0bc02b4697aeb8fad5afa371d447c9b66c8892711c6cf470dc008cd6d7ed462486350a23ce7e5700840ff59aed2653b2fae18acabceda724f281a0b55133db57bce0c67283bbd5484023308835bae55bee6797dbd6cbbecaaeb0125712d7c975a0e71c3815a8a99a31f86af336c205b8b0987c26a275831bd0f84294306b268e1c02b0d0c7d5bc4ae0a4837e74cf65376c6e7e888d8a2bc97b01b507458a18993604ae061f4066809dc746fd3b4682ab1c2d920de5582e45b74d0f2b6e787bc492aedd06a934e09016b25e7a039586ea8a3fe9da9f7e16b4c3e068991455a89b15cc8ff48fd7937e184a87514d958187426b97f2693208ce7b6951140937a593a6462009442174308c4a36a5b13f4fb030c363937273672fea209c419a495311388141992b1fbab4c9327b85e158cbcbbfc34f64926afc2e8e74b8de52393060302b7df891f6049fbaff9c01f977b8b262967f0ccb7f3553203380dee6516306a533227662013065036b8221b65ea18d952fa90f62f6ea78d93d0b8dbe1bdd37c4bd66f2b7c0fb8c117d55d8a7f0a2fbad3a9c28dbfb61c40ce6e1f71e156952da6752e9cbd4980cc2b10563d6de81cff8519d4fc45a5f6c9b73acf1a7c5cfe2fc6ac971387eefeef3a65ec1be36553c3cf1c28cdc2ac8ec65c82ec952d62a9a1c937daf76f7728c50769e54ed06e97d15f2a0db722acb5e30371ca5edaae7b16258982e5dce49fc370425d772ed337032f5ae5980d8b80c0b66e4e30f3d4c780d86829779a3356d629fc7274ab0ce8b6e83aa875c72fe054d0630074339e3a77777c695b04e5258f7d45a58ccdc4ead62486ca37f94a5c7b96d757f32d754d6457f3462f67aa7325f88ecd537497bb609673bd944e0abaa022f41e266a88ed3fee7586edfe61008d60d7d1511aa7c9dd85858cfb63bc93167698d49ce542f525d96927ffa50ee327c65661b3c5ba5cd94337d1b9e2fe01025f0fc62b68a9dc346cd210767ca5e54bc6901f2a03421379e99f50d1e8ed4b569ce16af8c5d908843e82052e163e47b33f6cecca9fc665d8321bb60fc6932a38eea0a0ab30f2869d20e3352b58c9721d0b06f7c613964f1c551edc4ff39bc812e8c0bee0edb63e95d65d3a6a6a423477fad508412be7718c36dd0f6d6ff7ca72b1ba77dc42de6fc165d18607c3a212d56279c04cad1e1d82bd8d1132b95d0654e1b8b390e43030ea922f9379c488a2af42d8c76455bbda6b65fd08fd3f5f868c10c660036f40905608fcc08cf72f11edf5ae3e1e668c27f6091fa23b7137afb8c3048906a64fa376d5b24d8ce326fd4008eb0e5e2404018eb980b1310cb6a9b1552bd67c5634e10faa222006a5bacd4a5acf2dc34d3d2c1b74a1080d0b17a8a7c3bc91b63dfc4dd6217420cd7b4ebc7e5911a5a83cd365cd88841b0703cac14128638afe88b5979ca7a0432b6eede8b537be6d4597dd1cf2e2a7064d89a909d64a3bb7aedcdcca89c8b2c333906c373f31ef3a21653a56ee90d4b949f8dd32e406cf7f72d11b341cceb3fc2edff7828290756b7d1f76473073556d5831c37f4c2e0d4c540ccb147e9064499c67a39c5a06f047de5830a0f1e32b76577d653dab203dc0725aa6d4eb99395dcf8dea8965714931d25b3a7fb5ccc111fddbe4f40a251cbec87b8e3a0ad90a86121a5ce2ca8195cb182b47143e3b093ee8e8e278977a162fd5eef4af1ac61b38c8755bb8e54247873dc1ed8dda94b15e550428f9d84e58d4e581c89bf1f6252d2182aaacb193239e0e26743d1779a282fd0a05b8311cb03db1f6d5feff51ea4587485b45d1c525ca11067bcdd1117418a91325db1a2ce7f6bda078f8fd5852e334ac024e6aba640cb794b62adcae2bced66774919e1d258b560aefcc25187e5b851794f837b226b4e129592ad518f86eaba851b47939491c94dd9050e7302c00b82a3b591f7e88c62a5084883b20c7c6198dda12a1dd1cc0da74e01205492fb069774a53c523e884c89fa77a124c43fffef30d6627fa83e254b01915c9bbe8d79bfaafcc850bd688b94249a25c31f9e3b87a3cc6bba2a9f324f0f5a42b832b9aaa887451d1c28174fbfb2d2028653821fe42dc02d002809756e7b65296f9c933c00fe08582934354d8500435486933128e29666d7ccd6ec7cf42e80661ad3e8bdb2c95903c0d9c14868ea5efcf78c4da9e1670daa31d2ad10189b79bb89e6a485e2830ac32f9bfbd85a2ea27bdbaf623a6f1c0fb065165155568b536c7a445e41120300330d2cde381a155ebf2d61a45cd4b48f73d9d152da374e819d31af97f1b429564e70d6c302583b8669ca7cda848480852a2bb84ee1a04f805deb7f6fcbd0f6613e53922d952547ca4e933cb0978ae1d4078d327a9bb70557f4f6828957b48596024e5d70d24881e1b05e131635aac9951fc2a25c02c1d4d87e412c6c2c03bf70012639461cc3b7a4f09111b76dcd1a2bd7b955e02e5cb7a2c6f368d243d325faf3c2462200b9ed21f9139b50be1b53ba86b6592df14ef51807f685619b1debf63b6fa63f517fc22f5a18cc59b605194bc3efa998909ee0f0f5e7845b4d379d43147ec499d6b901ee64bdebf7f38e870a3217cc8df6026794b62e81d4e3a5066eb98fa4634a1b97717c0d6d057cd446f18b02355a3452d4a5a2c8fc02e486a4228ee55ce63825652bea4d03753c9cf7934d98d7a73c340048e8658f129b59d1becd0aaccc08a7e41432f19d7b64a9e936ccbf16646bdff7b187320c5746ef45fd49b91988e5b404794730cada5c31c4fb8d7ad8299c69ea9423313cc1dae2751ad87f72376267061979bd090f7eec6ffed2e9ca0dbd0c4088639dd13dd3167ba846d8543fab9af3cec074db224d91558101e0321b20210f4f5b44b0718a1b2e35e5084614873330fe79ed36fb2f10275c495f8bc651cbfb546f8759575b34700327b3ed88d679f780621e5db48f60eaac0bedfd57121784e2aa0bcc66e62166b091fdb9f3c492fb319c8ebb92d8c33104b1bfb8bb7c9daef49bd58384c5364ad2ac782a10768bd845eeaad5853f1c0d48ca8fa8bcd8a48d0c38d907d827910506fde9fd901babd03c5fdcf0426bc8daa6afbb58e5f9a0ee80186efe13b0d0960f856116c437ad855c3be5fd782f68e1a3d1c1b9750948d5bd1cfbbd911a336752f7b6428fd1faf1b1ac45d8e0285b2eed288c93503a3d82440380e639471a7a102b634021bd790c64504ffbb096ca0f80132066fb35ea69db4ea0f41613f677aedfc8f19bc3cb5799dcfc97bf4947e12f08613f06134843dece1ab35509e989e995da4ee1bf404058b82afe0927d89f1861ef1ab0e54c965771ca29f3eba328510985605949345ab85cde6c4243e36360d4c30f5f33340baa08e2f094f05e67e56fb9b0f008ac635f8075f0ab395abab96d7c8be6a374e453151899781b52b203b098f74b98a5b2114b634f8b229afdc0613080700bdca358e66655c5f27d05d867c78c36826d879f6267296f595981d1555723c218ebf161e724e81a489f297248a882ea791fa0891a499fc837d85d07c36762a9dcd503c5bf59bd20f156426f5747ac5dbe3dea47e13536513c016d6385a5b8aaee2c870720e8c85412c46d12e366a96a3d6b186</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暑假数学杂题选讲</title>
      <link href="/2022/07/23/%E6%9A%91%E5%81%87%E6%95%B0%E5%AD%A6%E6%9D%82%E9%A2%98%E9%80%89%E8%AE%B2/"/>
      <url>/2022/07/23/%E6%9A%91%E5%81%87%E6%95%B0%E5%AD%A6%E6%9D%82%E9%A2%98%E9%80%89%E8%AE%B2/</url>
      
        <content type="html"><![CDATA[<p><code>orz jklover</code></p><span id="more"></span><p><a href="https://pe-cn.github.io/">数学习题小网站</a></p><h1 id="problem1"><a href="#problem1" class="headerlink" title="problem1"></a>problem1</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给定n,m，要求选出2m个数，要求每个数都是n的约数，而且所有数的乘积&lt;=n^m，问方案数，答案对998244353取模。</span><br><span class="line">n &lt;= 1e9, m &lt;= 200</span><br></pre></td></tr></table></figure><p>考虑对称性，所有数的乘积$\le n^m$和乘积$\ge n^m$方案数显然相等，重的只有$=n^m$的情况，设此时的方案数为$g$，答案就为$\frac{\sigma(n)^{2m}+g}{2}$。</p><p>问题来到怎么求取等方案数的问题，我们将每一个质数拉出来分开看（$n=p_1^{k_1}\cdot p_2^{k_2}\cdots p_x^{k_x}$），可以发现，这$2m$个数对于$p_1$来说：<br>$$<br>\forall i,cnt_i \le k_1 \\<br>\sum cnt_i = k_1m<br>$$<br>这个东西完全可以$dp$，然后将贡献全部乘到一起，就做完了。</p><p>复杂度：$x \cdot m + \sqrt n$，（$x$是$n$的质因数个数）。</p><h1 id="problem2"><a href="#problem2" class="headerlink" title="problem2"></a>problem2</h1><p>欧拉计划638。</p><p>一个坐标轴，从原点出发走向$(a,b)$，每次只能向上或向右走，每条路径的权值定义为：$k^s$，$s$是路径下方与$x$围成的面积，答案对$10^9+7$取模。</p><p>首先考虑暴力$dp$，我们考虑如何转移到$f(i,j)$，如果我们考虑计算与$x$轴所平行的线所包含的面积，那么式子一定是：<br>$$<br>f(i,j) = f(i - 1,j)+f(i,j-1)\cdot k^i<br>$$<br>那么O(n^2)的暴力就有了。</p><p>我们重新审视这个式子，这个面积$s$也可以看作路径右边的面积，那么这个式子也可以写成：<br>$$<br>f(i,j) = f(i-1, j)\cdot k^j+f(i,j-1)<br>$$<br>这两个式子中的$f$函数所代表的意义是完全等价的我们可以联立这两个方程，就可以得到：<br>$$<br>f(i-1,j) = \frac{k^i-1}{k^j-1}\cdot f(i,j-1) \\<br>f(i,j) = \frac{k^{i+1}-1}{k^j-1}<br>$$<br>之后递归下去，直到得到答案。</p><h1 id="problem3"><a href="#problem3" class="headerlink" title="problem3"></a>problem3</h1><p><a href="https://atcoder.jp/contests/diverta2019-2/tasks/diverta2019_2_d">题目坐标</a></p><p>很基础的一个完全背包，很好想，但当时脑子短路了，死磕网络流无果，注意赋初值。</p><p>贴个代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2.5e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x[<span class="number">4</span>];</span><br><span class="line">&#125;a, b;</span><br><span class="line">LL f[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">read</span>(a.x[<span class="number">1</span>], a.x[<span class="number">2</span>], a.x[<span class="number">3</span>]);</span><br><span class="line">    <span class="built_in">read</span>(b.x[<span class="number">1</span>], b.x[<span class="number">2</span>], b.x[<span class="number">3</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">3</span>;j ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = a.x[j];i &lt;= n;i ++)</span><br><span class="line">            f[i] = <span class="built_in">max</span>(f[i], f[i - a.x[j]] + b.x[j] - a.x[j]);</span><br><span class="line">    n = n + f[n];</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">3</span>;j ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = b.x[j];i &lt;= n;i ++)</span><br><span class="line">            f[i] = <span class="built_in">max</span>(f[i], f[i - b.x[j]] + a.x[j] - b.x[j]);</span><br><span class="line">    <span class="built_in">write</span>(f[n] + n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="problem4"><a href="#problem4" class="headerlink" title="problem4"></a>problem4</h1><p><a href="https://www.luogu.com.cn/problem/P5339">【TJOI2019】唱、跳、rap和篮球</a></p><h1 id="problem5"><a href="#problem5" class="headerlink" title="problem5"></a>problem5</h1><p>令一个排列中的前缀$gcd$中不同种类的数的个数为$f$，求$n$的排列中最大的$f$，以及有多少种排列等于$f$，对$998244353$取模。</p><h1 id="problem6"><a href="#problem6" class="headerlink" title="problem6"></a>problem6</h1><p>有一个长为$n$的数列$a_n$，每次操作将序列第一个数加入新数列的队首或队尾，令新数列中最长上升子序列长度为$len$，求最大化的$len$，以及有多少种不同的构造方案的最长上升子序列长度为$len$。</p><p>$n \le 10^6$</p><p>大水题。</p><p>首先考虑解决第一个问，我们任意来看一组新序列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1, x, 2, x, 3, x, x, 4, x, 5, 6</span><br></pre></td></tr></table></figure><p>为了使结论更清晰，本人将序列中不贡献答案的数用$x$隐去了。</p><p>我们设$3$是这些有贡献的数中在原序列的编号最小的数，则$4,5,6,1,2$的编号一定大于$3$，而如果令一个数在原序列中的编号为$id(x)$的话，一定有$id(2)&lt;id(1)$，$id(4)&lt;id(5)&lt;id(6)$，那么等于是在原数列求出一个最长上升子序列和一个最长下降子序列，然后将他们拼在一起，令$f(x)$为原数列以$x$为开头的最长上升子序列的长度，$g(x)$则为最长下降子序列的长度，第一问答案就为$\max{f(x)+g(x)-1}$，复杂度用线段树可以做到$n\log n$（常数危险）。</p><p>考虑第二问，我们发现第二问其实是在第一问的基础上考虑其他数的去处，但是我们并不关心其他数的去处，所以每找到一个第一问的答案就会贡献一个$2^{n-len}$（第一个数没法算两次），</p><p>注意：每个起点所拥有的最长上升子序列的个数可能不唯一，所以最后的答案应该是：$\sum cnt(f(x))\cdot cnt(g(x)) \cdot 2^{n - f(x)-g(x)}$。</p><h1 id="problem7"><a href="#problem7" class="headerlink" title="problem7"></a>problem7</h1><h1 id="problem8"><a href="#problem8" class="headerlink" title="problem8"></a>problem8</h1><p>[<a href="https://www.luogu.com.cn/problem/P6772">NOI2020] 美食家</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4240 毒瘤之神的考验</title>
      <link href="/2022/07/22/P4240-%E6%AF%92%E7%98%A4%E4%B9%8B%E7%A5%9E%E7%9A%84%E8%80%83%E9%AA%8C/"/>
      <url>/2022/07/22/P4240-%E6%AF%92%E7%98%A4%E4%B9%8B%E7%A5%9E%E7%9A%84%E8%80%83%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>根号分治<code>+</code>莫比乌斯反演的神仙题（太<code>tm</code>毒瘤了）。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先式子很简单，$T$组询问：<br>$$<br>\sum _i^n\sum_j^m \phi(ij)<br>$$</p><p>首先$\phi$有个小性质：</p><p>$$<br>\phi(ij)=\frac{\phi(i)\phi(j)gcd(i,j)}{\phi(gcd(i,j))}<br>$$</p><p>证明：</p><p>$$<br>\begin{aligned}<br>\phi(i) * \phi(j)&amp;=i\prod_{p|i}\frac{p-1}{p}j\prod_{q|j}\frac{q-1}{q} \\<br>&amp;=ij\prod_{p|ij}\frac{p-1}{p}\prod_{q|gcd(i,j)}\frac{q-1}{q}<br>\end{aligned}<br>$$<br>下面那个化简就得到了。</p><p>我们现在来化原式子，强令$n&lt;m$：<br>$$<br>\begin{aligned}<br>\sum_i^n\sum_j^m\phi(ij)&amp;=\sum_d^n\frac{d}{\phi(d)}\sum_i^{\frac{n}{d}}\sum_j^{\frac{m}{d}}\phi(i)\phi(j)[gcd(i,j)==1] \\<br>&amp;=\sum_d^n\frac{d}{\phi(d)}\sum_i^{\frac{n}{d}}\sum_j^{\frac{m}{d}}\phi(id)\phi(jd)\sum_{p|gcd(i,j)}\mu(p)\\<br>&amp;=\sum_d^n\frac{d}{\phi(d)}\sum_{p}^{\frac{n}{d}}\mu(p)\sum_i^{\frac{n}{pd}}\sum_j^{\frac{m}{pd}}\phi(idp)\phi(jdp)\\<br>&amp;=\sum_T^n\sum_{d|T}\frac{d}{\phi(d)}\mu(\frac{T}{d})\sum_i^{\frac{n}{T}}\sum_j^{\frac{m}{T}}\phi(Ti)\phi(Tj)\\<br>\end{aligned}<br>$$<br>发现$\sum_{d|T}\frac{d}{\phi(d)}\mu(\frac{T}{d})$可以$n\ln n$预处理，我们设其处理出来的值为$f(T)$。</p><p>我们来考虑后面这坨怎么办，$\sum_i^{\frac{n}{T}}\sum_j^{\frac{m}{T}}\phi(Ti)\phi(Tj)$，我们发现这两坨互相独立，且其本质相同，都是：$\sum_i^{\frac{n}{T}}\phi(Ti)$，我们令$g(k,n)=\sum_i^n\phi(i,k)$，然后这个东西有递推式：$g(k,n)=g(k,n-1)+\phi(kn)$，所以也可以$n \ln n$预处理。</p><p>重新回过头来，可以发现：<br>$$<br>\begin{aligned}<br>\sum _i^n\sum_j^m \phi(ij)=\sum_i^nf(i)\cdot g(i,\left \lfloor \frac{n}{i} \right \rfloor) \cdot g(i,\left \lfloor \frac{m}{i} \right \rfloor)<br>\end{aligned}<br>$$<br>我们发现这分不了块，只能$O(n)$做，但我们并不气馁，再次考虑套路的换元：<br>$$<br>t(a,b,n)=\sum_i^nf(i)\cdot g(i,a) \cdot g(i,b)<br>$$<br>$t$这个东西我们发现就是一个前缀和的形式，就可以数论分块，形式是这样的：<br>$$<br>\sum t(\left \lfloor \frac{n}{l} \right \rfloor,\left \lfloor \frac{m}{l} \right \rfloor,r)-t(\left \lfloor \frac{n}{l} \right \rfloor,\left \lfloor \frac{m}{l} \right \rfloor,l-1)<br>$$<br>问题转移到求解$t$这个式子，发现第一，二项有$n$中取值，第三项肯定有$n$种取值，结合在一起$n^3$，$T$来瓜起。</p><p>考虑根号平衡一手，因为当$l$越大，整数分块所包含的区间越大，暴力做的复杂度越高，所以我们设定一个阈值，$\left \lfloor \frac{n}{l} \right \rfloor$小于这个阈值我们就预处理，反之就暴力。</p><p>阈值取$50$比较合适。</p><p>总的时间复杂度：$O(n \ln n + n \cdot B^2+T(\sqrt n+\frac{n}{B})))$。</p><p>挺妙的（如果会的话）</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, mod = <span class="number">998244353</span>, B = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, T;</span><br><span class="line"><span class="keyword">int</span> primes[N], cnt, phi[N], mu[N], f[N];</span><br><span class="line"><span class="keyword">int</span> inv[N];</span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = <span class="number">1ll</span> * res * x % mod;</span><br><span class="line">        x = <span class="number">1ll</span> * x * x % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;g[N], t[B + <span class="number">5</span>][B + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>] = phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) phi[i] = i - <span class="number">1</span>, primes[++ cnt] = i, mu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= cnt &amp;&amp; primes[j] * i &lt; N;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % primes[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                mu[i * primes[j]] = <span class="number">0</span>;</span><br><span class="line">                phi[i * primes[j]] = <span class="number">1ll</span> * phi[i] * primes[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mu[i * primes[j]] = -mu[i];</span><br><span class="line">            phi[primes[j] * i] = phi[i] * phi[primes[j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; N;i ++) inv[i] = <span class="built_in">qpow</span>(phi[i], mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; N;i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= (N - <span class="number">1</span>) / i;j ++)</span><br><span class="line">            f[i * j] = (f[i * j] + <span class="number">1ll</span> * mu[j] * i * inv[i] % mod + mod) % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; N;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i].<span class="built_in">resize</span>(N / i + <span class="number">5</span>);</span><br><span class="line">        g[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= (N - <span class="number">1</span>) / i;j ++)</span><br><span class="line">            g[i][j] = (LL)(g[i][j - <span class="number">1</span>] + phi[i * j]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= B;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = i;k &lt;= B;k ++)</span><br><span class="line">        &#123;</span><br><span class="line">            t[i][k].<span class="built_in">resize</span>(N / k + <span class="number">5</span>);</span><br><span class="line">            t[i][k][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= (N - <span class="number">1</span>) / k;j ++)</span><br><span class="line">                t[i][k][j] = (t[i][k][j - <span class="number">1</span>] + <span class="number">1ll</span> * f[j] * g[j][i] % mod * g[j][k] % mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n, m);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m / B;i ++) res = (res + <span class="number">1ll</span> * f[i] * g[i][n / i] % mod * g[i][m / i] % mod) % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l = m / B + <span class="number">1</span>, r;l &lt;= n;l = r + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        r = <span class="built_in">min</span>(n / (n / l), m / (m / l));</span><br><span class="line">        res = (res + (t[n / l][m / l][r] - t[n / l][m / l][l - <span class="number">1</span>] + mod) % mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 莫比乌斯反演 </tag>
            
            <tag> luogu </tag>
            
            <tag> 根号分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOI2018 屠龙勇士</title>
      <link href="/2022/07/20/NOI2018-%E5%B1%A0%E9%BE%99%E5%8B%87%E5%A3%AB/"/>
      <url>/2022/07/20/NOI2018-%E5%B1%A0%E9%BE%99%E5%8B%87%E5%A3%AB/</url>
      
        <content type="html"><![CDATA[<p>卡<code>long long</code>的伞兵出题人。</p><p><code>excrt</code>裸题。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先发现每只怪物被哪把剑干死是确定的，我们首先将其预处理出来，然后就会惊奇的发现式子长这样：<br>$$<br>\forall i,x\times atk_i \equiv a_i \ (mod \ p_i)\\<br>x \times atk_i \ge a_i<br>$$<br>首先第二个式子是废的，随便统计即可，对于第一个式子，我们发现这是$excrt$的裸题，由于之前没写博客，就在这写了。</p><p>首先我们想办法先把$atk$搞掉（下文自动省略下标），发现当$(atk,p)!=0$时不是很好搞，我们先将其最大公因数除掉，显然如果$a$无法整除其最大公因数，此题无解，然后我们进行一波推导之后可以发现$atk$在模$p$意义下的逆元为：<br>$$<br>\begin{aligned}<br>atk \times x \equiv 1 \pmod{p} \\<br>atk\times x+ k\times p=1<br>\end{aligned}<br>$$<br>直接丢进<code>exgcd</code>即可（注意最后要转化成正数然后还要取模），设$a$乘上$atk$的逆元为$v$。</p><p>之后我们再观察一下目前的式子：<br>$$<br>\begin{aligned}<br>\left{\begin{matrix}<br> x \equiv &amp;v_1  &amp; \pmod{p_1} \<br> \vdots &amp;\vdots  &amp;\vdots \<br> x \equiv &amp;v_n  &amp; \pmod{p_n}<br>\end{matrix}\right.<br>\end{aligned}<br>$$<br>考虑进行<code>excrt</code>，下面是其过程：</p><p>考虑每次合并两个方程：<br>$$<br>x \equiv v_1 \pmod{p_1} \\<br>x \equiv v_2 \pmod{p_2}<br>$$<br>可转化成：<br>$$<br>x = v_1 + k_1 \times p_1 \\<br>x = v_2 + k_2 \times p_2<br>$$<br>合并上式：<br>$$<br>v_2-v_1=k1\times p_1 - k_2 \times p_2<br>$$<br>再丢进<code>exgcd</code>中解一个$k_1$，之后就可以算出对于这两个式子合法的$x$，那么合并后的式子就是：<br>$$<br>x \equiv k_1\times p_1+v_1 \pmod{ lcm(p_1,p_2)}<br>$$<br>之后依次合并即可。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, T;</span><br><span class="line"><span class="keyword">int</span> a[N], p[N], gn[N], sword[N];</span><br><span class="line">multiset&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y ? <span class="built_in">gcd</span>(y, x % y) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k, <span class="keyword">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (__int128)res * x % mod;</span><br><span class="line">        x = (__int128)x * x % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, __int128 &amp;x, __int128 &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) <span class="keyword">return</span> x = <span class="number">1</span>, y = <span class="number">0</span>, <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Lcm</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (__int128) x * y / <span class="built_in">gcd</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int128 x, y;</span><br><span class="line">    <span class="keyword">if</span>((a[j] - a[<span class="number">1</span>]) % <span class="built_in">gcd</span>(p[<span class="number">1</span>], -p[j]) != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">exgcd</span>(p[<span class="number">1</span>], p[j], x, y);</span><br><span class="line">    <span class="keyword">int</span> mod = <span class="built_in">Lcm</span>(p[<span class="number">1</span>], p[j]);</span><br><span class="line">    x = (__int128) x * (a[j] - a[<span class="number">1</span>]) / <span class="built_in">gcd</span>(p[<span class="number">1</span>], p[j]);</span><br><span class="line">    a[<span class="number">1</span>] = ((__int128) p[<span class="number">1</span>] * x + a[<span class="number">1</span>] + mod) % mod;</span><br><span class="line">    p[<span class="number">1</span>] = mod;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> minn, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Inv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">gcd</span>(a, p) != <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    __int128 x, y;</span><br><span class="line">    <span class="built_in">exgcd</span>(a, p, x, y);</span><br><span class="line">    <span class="keyword">return</span> (x % p + p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s.<span class="built_in">clear</span>();</span><br><span class="line">    minn = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(p[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(gn[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o;i &lt;= m;i ++) <span class="built_in">read</span>(o), s.<span class="built_in">insert</span>(o);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = s.<span class="built_in">upper_bound</span>(a[i]);</span><br><span class="line">        <span class="keyword">if</span> (t != s.<span class="built_in">begin</span>()) -- t;</span><br><span class="line">        sword[i] = *t;</span><br><span class="line">        s.<span class="built_in">erase</span>(t);</span><br><span class="line">        s.<span class="built_in">insert</span>(gn[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        minn = <span class="built_in">max</span>(minn, (<span class="keyword">int</span>)<span class="built_in">ceil</span>((<span class="keyword">double</span>)a[i] / sword[i]));</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">gcd</span>(sword[i], p[i]) != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            o = <span class="built_in">gcd</span>(sword[i], p[i]);</span><br><span class="line">            <span class="keyword">if</span>(a[i] % o != <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>), <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">            a[i] /= o, p[i] /= o, sword[i] /= o;</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] = (__int128)a[i] * <span class="built_in">Inv</span>(sword[i], p[i]) % p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">merge</span>(i)) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>), <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    ans = (a[<span class="number">1</span>] + p[<span class="number">1</span>]) % p[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (minn &gt; a[<span class="number">1</span>]) ans = ans + ((minn - a[<span class="number">1</span>] + p[<span class="number">1</span>] - <span class="number">1</span>) / p[<span class="number">1</span>]) * p[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">write</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> excrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZJOI2012 小蓝的好友</title>
      <link href="/2022/07/19/ZJOI2012-%E5%B0%8F%E8%93%9D%E7%9A%84%E5%A5%BD%E5%8F%8B/"/>
      <url>/2022/07/19/ZJOI2012-%E5%B0%8F%E8%93%9D%E7%9A%84%E5%A5%BD%E5%8F%8B/</url>
      
        <content type="html"><![CDATA[<p>被教训了，以后要踏实一点，不懂的题都尽量写题解吧（希望明天<code>jklover</code>来的时候不要被虐爆）。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>经典矩阵无覆盖问题，但是$R\times C$都无法跑，一般的做法显然是不行的，于是我们需要开始观察题目的特殊地方<del>然后耍杂技</del>。</p><p>可以发现数据保证数据一定随机，于是我们考虑从这个地方下手，发现如果正着做这道题的话需要用容斥，复杂度我们显然是无法接受的，于是考虑这个问题的补问题：有多少个矩阵没有被覆盖（下文称其为空矩阵）。</p><p>对于这个问题，我们考虑扫描线（行），即有多少个空矩阵的下界在当前的线上，令$w[x]$为第$x$列所扫描到的最低的覆盖点，那么目前的图就应该是这样的：</p><p><img src="1.png" alt="image"></p><p>可以发现当前最低点的贡献就是其左边的列的数量+1$\times$右边列的数量+1（+1是因为当前列也行）。</p><p>而且当我们将空列补$0$（在$0$行插入一个覆盖点），那么这个贡献的列就会被转化成点，而且是可以递归处理的（断开已统计过的列即可），这就是一颗笛卡尔树。</p><p>又因为数据随机，所以用平衡树维护笛卡尔树的复杂度有保证。</p><p>时间复杂度：$O(l+(r+n)\log r)$。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, l, r, root;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;s[N];</span><br><span class="line"><span class="keyword">namespace</span> pol&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y, z, tot;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> s[<span class="number">2</span>], id, v, sz;</span><br><span class="line">        LL val;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> l(x) tr[x].s[0]</span></span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> r(x) tr[x].s[1]</span></span><br><span class="line">    &#125;tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tr[x].sz = tr[<span class="built_in">l</span>(x)].sz + tr[<span class="built_in">r</span>(x)].sz + <span class="number">1</span>;</span><br><span class="line">        tr[x].val = tr[<span class="built_in">l</span>(x)].val + tr[<span class="built_in">r</span>(x)].val + <span class="number">1ll</span> * (tr[<span class="built_in">l</span>(x)].sz + <span class="number">1</span>) * (tr[<span class="built_in">r</span>(x)].sz + <span class="number">1</span>) * tr[x].v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tr[++ tot].id = id, tr[tot].v = v, tr[tot].sz = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x | y;</span><br><span class="line">        <span class="keyword">if</span>(tr[x].v &gt; tr[y].v)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">r</span>(x) = <span class="built_in">merge</span>(<span class="built_in">r</span>(x), y);</span><br><span class="line">            <span class="built_in">pushup</span>(x);</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">l</span>(y) = <span class="built_in">merge</span>(x, <span class="built_in">l</span>(y));</span><br><span class="line">            <span class="built_in">pushup</span>(y);</span><br><span class="line">            <span class="keyword">return</span> y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> k, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!now) x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(tr[now].id &lt;= k) x = now, <span class="built_in">split</span>(<span class="built_in">r</span>(now), k, <span class="built_in">r</span>(now), y);</span><br><span class="line">            <span class="keyword">else</span> y = now, <span class="built_in">split</span>(<span class="built_in">l</span>(now), k, x, <span class="built_in">l</span>(now));</span><br><span class="line">            <span class="built_in">pushup</span>(now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">split</span>(root, id - <span class="number">1</span>, x, y), <span class="built_in">split</span>(y, id, y, z);</span><br><span class="line">        tr[y].v = v;</span><br><span class="line">        root = <span class="built_in">merge</span>(x, <span class="built_in">merge</span>(y, z)); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">split</span>(root, id - <span class="number">1</span>, x, y);</span><br><span class="line">        root = <span class="built_in">merge</span>(x, <span class="built_in">merge</span>(<span class="built_in">make</span>(id, v), y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(l, r, n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, st, ed;i &lt;= n;i ++) <span class="built_in">read</span>(st, ed), s[st].<span class="built_in">push_back</span>(ed);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= r;i ++) pol:: <span class="built_in">insert</span>(i, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= l;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j : s[i]) pol:: <span class="built_in">modify</span>(j, i);</span><br><span class="line">        ans += <span class="number">1ll</span> * r * (r + <span class="number">1</span>) / <span class="number">2</span> * i - pol:: tr[root].val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(<span class="number">1ll</span> * l * (l + <span class="number">1</span>) / <span class="number">2</span> * r * (r + <span class="number">1</span>) / <span class="number">2</span> - ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZJOI2016 大森林</title>
      <link href="/2022/07/19/ZJOI2016-%E5%A4%A7%E6%A3%AE%E6%9E%97/"/>
      <url>/2022/07/19/ZJOI2016-%E5%A4%A7%E6%A3%AE%E6%9E%97/</url>
      
        <content type="html"><![CDATA[<p><code>orz</code>优先级。</p><span id="more"></span><p>一道比较神秘的题目。</p><p>首先我们发现在线的做法只能做到暴力的$mn\log n$，这种报废的做法显然是不可取的，我们考虑离线。</p><p>首先考虑第一种操作怎么快速维护：为了避免建重复的节点，我们应该将所有的树压成一棵树（多的节点断掉即可）。</p><p>思考为什么复杂度如此的高，最后搞来搞去就发现第二种操作是最不可做的，我们应该怎样才能将子树信息进行移动，这其实考了虚点的概念，就是我们更换生长节点的时候，建立一个虚点，将后来子树的信息全部加在虚点上，之后到了撤销生长节点的时候，将虚点直接挪过去即可。</p><p>紧接着就不难得出询问的实现方法，设一个节点到根的路径上的的非虚节点个数为$sz[x]$，则答案为：$sz[x]+sz[y]-2*lca(x,y)$。</p><p>因为不能改变树的结构，所以不能$split$。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">2</span>], p, sum, v;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(x) tr[x].s[0]</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> r(x) tr[x].s[1]</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> fa(x) tr[x].p</span></span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">l</span>(<span class="built_in">fa</span>(x)) != x &amp;&amp; <span class="built_in">r</span>(<span class="built_in">fa</span>(x)) != x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].sum = tr[<span class="built_in">l</span>(x)].sum + tr[<span class="built_in">r</span>(x)].sum + tr[x].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line">    <span class="keyword">int</span> k = tr[y].s[<span class="number">1</span>] == x;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">isroot</span>(y)) tr[z].s[tr[z].s[<span class="number">1</span>] == y] = x;</span><br><span class="line">    <span class="built_in">fa</span>(x) = z;</span><br><span class="line">    tr[y].s[k] = tr[x].s[k ^ <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(tr[x].s[k ^ <span class="number">1</span>]) <span class="built_in">fa</span>(tr[x].s[k ^ <span class="number">1</span>]) = y;</span><br><span class="line">    tr[x].s[k ^ <span class="number">1</span>] = y, <span class="built_in">fa</span>(y) = x;</span><br><span class="line">    <span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> st[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isroot</span>(x))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">isroot</span>(y))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">r</span>(y) == x) ^ (<span class="built_in">r</span>(z) == y)) <span class="built_in">rotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; x; y = x, x = <span class="built_in">fa</span>(x)) <span class="built_in">splay</span>(x), <span class="built_in">r</span>(x) = y, <span class="built_in">pushup</span>(x);</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(x), <span class="built_in">fa</span>(x) = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">access</span>(x), <span class="built_in">splay</span>(x);</span><br><span class="line">    <span class="built_in">fa</span>(<span class="built_in">l</span>(x)) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">l</span>(x) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt, idx, last, tot, num;</span><br><span class="line"><span class="keyword">int</span> L[N], R[N], id[N]; <span class="comment">// 每个点的出现坐标，删除坐标，下标</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt ++, tr[cnt].sum = tr[cnt].v = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ask</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos, id, x, y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (Ask b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> pos == b.pos ? id &lt; b.id : pos &lt; b.pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, lca;</span><br><span class="line">    <span class="built_in">access</span>(x), <span class="built_in">splay</span>(x), ans += tr[x].sum;</span><br><span class="line">    lca = <span class="built_in">access</span>(y), <span class="built_in">splay</span>(y), ans += tr[y].sum;</span><br><span class="line">    <span class="built_in">access</span>(lca), <span class="built_in">splay</span>(lca), ans -= <span class="number">2</span> * tr[lca].sum;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="built_in">make</span>(<span class="number">1</span>);</span><br><span class="line">    L[<span class="number">1</span>] = <span class="number">1</span>, R[<span class="number">1</span>] = n;</span><br><span class="line">    id[++ idx] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">make</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">link</span>(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    last = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> op, l, r, x, u, v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(op);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(l, r);</span><br><span class="line">            <span class="built_in">make</span>(<span class="number">1</span>);</span><br><span class="line">            L[++ idx] = l, R[idx] = r, id[idx] = cnt;</span><br><span class="line">            q[++ tot] = &#123;<span class="number">1</span>, i - m, cnt, last&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(l, r, x);</span><br><span class="line">            l = <span class="built_in">max</span>(L[x], l), r = <span class="built_in">min</span>(r, R[x]);</span><br><span class="line">            <span class="keyword">if</span>(l &lt;= r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">make</span>(<span class="number">0</span>);</span><br><span class="line">                <span class="built_in">link</span>(cnt, last);</span><br><span class="line">                q[++ tot] = &#123;l, i - m, cnt, id[x]&#125;;</span><br><span class="line">                q[++ tot] = &#123;r + <span class="number">1</span>, i - m, cnt, last&#125;;</span><br><span class="line">                last = cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x, u, v);</span><br><span class="line">            q[++ tot] = &#123;x, ++ num, id[u], id[v]&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + tot + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">for</span>(;i == q[j].pos;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(q[j].id &lt;= <span class="number">0</span>) <span class="built_in">cut</span>(q[j].x), <span class="built_in">link</span>(q[j].x, q[j].y);</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            &#123;</span><br><span class="line">                ans[q[j].id] = <span class="built_in">query</span>(q[j].x, q[j].y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= num;i ++) <span class="built_in">write</span>(ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> LCT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UOJ207 共价大爷游长沙</title>
      <link href="/2022/07/19/UOJ207-%E5%85%B1%E4%BB%B7%E5%A4%A7%E7%88%B7%E6%B8%B8%E9%95%BF%E6%B2%99/"/>
      <url>/2022/07/19/UOJ207-%E5%85%B1%E4%BB%B7%E5%A4%A7%E7%88%B7%E6%B8%B8%E9%95%BF%E6%B2%99/</url>
      
        <content type="html"><![CDATA[<p>才知道$LCT$可以维护子树信息，爱了爱了。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>我们考虑将$x$定为原树的根节点，那么如果必须经过$x-y$这条边的话，大爷的每一对阅览节点当且仅当有且只有一个在$y$的子树内时才可能满足都经过这条边，于是我们随机给这些点对赋一个随机的权值（$10^9$左右），之后将$x$变成根，之后查询$y$子树内的异或值与所有点对异或值是否相等即可。</p><p>关于$LCT$维护子树信息问题，这里有一个不太妙的方案：将此点在$Splay$中的左右子树信息和自身虚儿子信息全部贡献到本点，这样的话当所求点转到$Splay$的根时，根据$Splay$的定义，根的左子树的信息显然是不必要的，又由于整棵树的信息目前都在根节点，去掉左子树信息就是根节点在原树中的子树信息。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(<span class="number">114515</span>)</span></span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> sz2[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> s[<span class="number">2</span>], rev, val, v, p;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(x) tr[x].s[0]</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> r(x) tr[x].s[1]</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> fa(x) tr[x].p</span></span><br><span class="line">&#125;tr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].val = tr[<span class="built_in">l</span>(x)].val ^ tr[x].v ^ tr[<span class="built_in">r</span>(x)].val ^ sz2[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rev</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(<span class="built_in">l</span>(x), <span class="built_in">r</span>(x));</span><br><span class="line">    tr[x].rev ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tr[x].rev) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">rev</span>(<span class="built_in">l</span>(x)), <span class="built_in">rev</span>(<span class="built_in">r</span>(x));</span><br><span class="line">    tr[x].rev = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">l</span>(<span class="built_in">fa</span>(x)) != x &amp;&amp; <span class="built_in">r</span>(<span class="built_in">fa</span>(x)) != x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line">    <span class="keyword">int</span> k = <span class="built_in">r</span>(y) == x;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">isroot</span>(y)) tr[z].s[<span class="built_in">r</span>(z) == y] = x;</span><br><span class="line">    <span class="built_in">fa</span>(x) = z;</span><br><span class="line">    tr[y].s[k] = tr[x].s[k ^ <span class="number">1</span>], <span class="built_in">fa</span>(tr[x].s[k ^ <span class="number">1</span>]) = y;</span><br><span class="line">    tr[x].s[k ^ <span class="number">1</span>] = y, <span class="built_in">fa</span>(y) = x;</span><br><span class="line">    <span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> st[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>, id = x;</span><br><span class="line">    st[++ top] = x;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isroot</span>(id)) st[++ top] = id = <span class="built_in">fa</span>(id);</span><br><span class="line">    <span class="keyword">while</span>(top) <span class="built_in">pushdown</span>(st[top --]);</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isroot</span>(x))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="built_in">fa</span>(x), z = <span class="built_in">fa</span>(y);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">isroot</span>(y))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((<span class="built_in">r</span>(y) == x) ^ (<span class="built_in">r</span>(z) == y)) <span class="built_in">rotate</span>(x);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> z = x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; x; y = x, x = <span class="built_in">fa</span>(x))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">splay</span>(x); </span><br><span class="line">        sz2[x] ^= tr[<span class="built_in">r</span>(x)].val ^ tr[y].val;</span><br><span class="line">        <span class="built_in">r</span>(x) = y, <span class="built_in">pushup</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">make_root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">access</span>(x);</span><br><span class="line">    <span class="built_in">rev</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">access</span>(x);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">l</span>(x)) <span class="built_in">pushdown</span>(x), x = <span class="built_in">l</span>(x);</span><br><span class="line">    <span class="comment">// splay(x); // 不能更改根节点，因为后面调用的是y</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">make_root</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">find_root</span>(y) == x) <span class="keyword">return</span> ;</span><br><span class="line">    sz2[y] ^= tr[x].val, tr[x].p = y;</span><br><span class="line">    <span class="built_in">pushup</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">make_root</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">find_root</span>(y) != x) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">fa</span>(x) = <span class="built_in">l</span>(y) = <span class="number">0</span>, <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">make_root</span>(x);</span><br><span class="line">    <span class="built_in">access</span>(y);</span><br><span class="line">&#125;</span><br><span class="line">PII stk[N * <span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> tot, ans;</span><br><span class="line"><span class="keyword">int</span> shit[N * <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">split</span>(x, y);</span><br><span class="line">    <span class="built_in">splay</span>(x);</span><br><span class="line">    <span class="comment">// 下列写法均可</span></span><br><span class="line">    <span class="keyword">return</span> tr[y].val == ans;</span><br><span class="line">    <span class="comment">// return (tr[y].val ^ tr[l(y)].val) == ans;</span></span><br><span class="line">    <span class="comment">// return tr[x].val == ans;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u;i &lt; n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(o, u);</span><br><span class="line">        <span class="built_in">link</span>(o, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> type, x, y, u, v;</span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(type);</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x, y, u, v);</span><br><span class="line">            <span class="built_in">cut</span>(x, y), <span class="built_in">link</span>(u, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x, y);</span><br><span class="line">            stk[++ tot] = &#123;x, y&#125;;</span><br><span class="line">            shit[tot] = <span class="built_in">rnd</span>();</span><br><span class="line">            ans ^= shit[tot];</span><br><span class="line">            <span class="built_in">make_root</span>(x), tr[x].v ^= shit[tot], <span class="built_in">pushup</span>(x);</span><br><span class="line">            <span class="built_in">make_root</span>(y), tr[y].v ^= shit[tot], <span class="built_in">pushup</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            ans ^= shit[x];</span><br><span class="line">            <span class="built_in">make_root</span>(stk[x].first), tr[stk[x].first].v ^= shit[x], <span class="built_in">pushup</span>(stk[x].first);</span><br><span class="line">            <span class="built_in">make_root</span>(stk[x].second), tr[stk[x].second].v ^= shit[x], <span class="built_in">pushup</span>(stk[x].second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x, y);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(x, y)) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> UOJ </tag>
            
            <tag> LCT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1312G Autocompletion</title>
      <link href="/2022/07/16/CF1312G-Autocompletion/"/>
      <url>/2022/07/16/CF1312G-Autocompletion/</url>
      
        <content type="html"><![CDATA[<p>有点妙。</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/CF1312G">CF1312G Autocompletion</a></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>设最后答案为$f[x]$，每一个关键点（只算关键点）的$dfs$序为$dfn[x]$。</p><p>那么显然：<br>$$<br>f[x] = min(f[fa[x]] + 1, f[i] + dfn[x] - dfn[i] + p[i])<br>$$<br>$i$是$x$的祖宗节点，$p[i]$代表这个点是否为关键节点。</p><p>看到题的时候感觉会比较板，将$Trie$树上的查询链拉出来建两颗线段树，第一颗只维护第一种操作，即$f[i] + len(x, i)$，第二颗线段树维护第二种操作，即$f[i]-dfn[i]+p[i]$即可，时间复杂度为：$n \log n$。</p><p>后来发现这完全是吃饱了撑的。</p><p>我们重新定义一个辅助数组$g$，其含义为$x$祖宗节点中最优的$f[i]-dfn[i]+p[i]$。</p><p>然后就结束了。</p><p>转移方程：<br>$$<br>\begin{aligned}<br>f[x] &amp;= f[y] + 1; \\<br>if(p[x]) \ f[x] &amp;= min(f[x], g[y] + dfn[x]); \\<br>g[x] &amp;= min(f[x] - dfn[x] + p[x], g[y]); \\<br>\end{aligned}<br>$$</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> ch[N][<span class="number">26</span>], tot, id[N];</span><br><span class="line"><span class="keyword">bool</span> p[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ch[x][c] = ++ tot;</span><br><span class="line">    id[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt, dfn[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x]) cnt ++;</span><br><span class="line">    dfn[x] = cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">26</span>;i ++)</span><br><span class="line">        <span class="keyword">if</span>(ch[x][i])</span><br><span class="line">            <span class="built_in">dfs</span>(ch[x][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> f[N], g[N], a[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f[x] = f[y] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(p[x]) f[x] = <span class="built_in">min</span>(f[x], g[y] + dfn[x]);</span><br><span class="line">        g[x] = <span class="built_in">min</span>(f[x] - dfn[x] + p[x], g[y]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">26</span>;i ++)</span><br><span class="line">        <span class="keyword">if</span>(ch[x][i])</span><br><span class="line">            <span class="built_in">dfs1</span>(ch[x][i], x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o;i &lt;= n;i ++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">read</span>(o);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, c);</span><br><span class="line">        <span class="built_in">insert</span>(o, c[<span class="number">0</span>] - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o;i &lt;= m;i ++) <span class="built_in">read</span>(a[i]), p[a[i]] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs1</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++) <span class="built_in">write</span>(f[a[i]]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> CF </tag>
            
            <tag> Trie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csp-2019 树的重心</title>
      <link href="/2022/07/15/csp-2019-%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83/"/>
      <url>/2022/07/15/csp-2019-%E6%A0%91%E7%9A%84%E9%87%8D%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<p>不知道性质的话这题就只有暴力分了。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>树的重心的性质：</p><ol><li>一棵树如果有两个重心，这两个重心一定是相邻的</li><li>一棵树的重心一定在根节点所在的重链上</li><li>一棵树的重心一定是以该树根节点重儿子为根的子树的重心的祖先</li></ol><p>知道了性质之后回过头来再次审视题目：首先预处理出这棵树每个节点的重儿子，次重儿子，然后使用换根$dp$开始从$1$根节点开始逐渐向每一颗子树转移，对于每一颗子树我们使用倍增的方式找重心，然后对于每一个找到的点，判断其父亲节点，重儿子节点和本身节点是否为重心，然后统计进入答案。</p><p>具体怎么样换根：对于任意节点$x$，现在要计算断开它的子树$j$时两颗树的贡献，不难发现$j$的子树没有动，直接倍增找即可，现在来观察新子树$x$，此时新子树的大小显然应该为$sz[1] - sz[j]$，而$x$新增的子树显然就是$father[x]$只需判断$father[x]$是否会成为$x$的新的重儿子然后倍增跳即可。</p><p>注：对于$x$被断开的子树$j$，如果其不是$x$的重儿子，那么$x$的新重儿子就是在$father[x]$和$heavy-son[x]$中选择，否则就应该在$second-heavy-son[x]$和$father[x]$中选择。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[N &lt;&lt; <span class="number">1</span>], ne[N &lt;&lt; <span class="number">1</span>], h[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    idx ++;</span><br><span class="line">    e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> son[N], son2[N], f[N], fa[N], sz[N], tr[N][<span class="number">19</span>];</span><br><span class="line"><span class="keyword">int</span> sz2[N], son3[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[x] = <span class="number">1</span>, fa[x] = y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[x], j; ~i;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(j, x);</span><br><span class="line">        sz[x] += sz[j];</span><br><span class="line">        <span class="keyword">if</span>(sz[j] &gt; sz[son[x]]) son2[x] = son[x], son[x] = j;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sz[j] &gt; sz[son2[x]]) son2[x] = j;</span><br><span class="line">    &#125;   </span><br><span class="line">    tr[x][<span class="number">0</span>] = son[x];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">17</span>;i ++)</span><br><span class="line">        tr[x][i] = tr[tr[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * (<span class="built_in">max</span>(sz2[son3[x]], sum - sz2[x]) &lt;= sum / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[x], j; ~i;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == y) <span class="keyword">continue</span>;</span><br><span class="line">        sz2[x] = sz[<span class="number">1</span>] - sz[j];</span><br><span class="line">        f[j] = f[x] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(son[x] == j) son3[x] = son2[x];</span><br><span class="line">        <span class="keyword">else</span> son3[x] = son[x];</span><br><span class="line">        <span class="keyword">if</span>(sz2[y] &gt; sz2[son3[x]]) son3[x] = y;</span><br><span class="line">        tr[x][<span class="number">0</span>] = son3[x];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= <span class="number">17</span>;k ++) tr[x][k] = tr[tr[x][k - <span class="number">1</span>]][k - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> now = x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">17</span>;k &gt;= <span class="number">0</span>;k --)</span><br><span class="line">            <span class="keyword">if</span>(sz2[x] - sz2[tr[now][k]] &lt;= sz2[x] / <span class="number">2</span>)</span><br><span class="line">                now = tr[now][k];</span><br><span class="line">        ans += <span class="built_in">check</span>(son3[now], sz2[x]) + <span class="built_in">check</span>(now, sz2[x]) + <span class="built_in">check</span>(f[now], sz2[x]);</span><br><span class="line">        now = j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">17</span>;k &gt;= <span class="number">0</span>;k --)</span><br><span class="line">            <span class="keyword">if</span>(sz2[j] - sz2[tr[now][k]] &lt;= sz2[j] / <span class="number">2</span>)</span><br><span class="line">                now = tr[now][k];</span><br><span class="line">        ans += <span class="built_in">check</span>(son3[now], sz2[j]) + <span class="built_in">check</span>(now, sz2[j]) + <span class="built_in">check</span>(f[now], sz2[j]);</span><br><span class="line">        f[x] = j;</span><br><span class="line">        <span class="built_in">dfs2</span>(j, x);</span><br><span class="line">    &#125;</span><br><span class="line">    son3[x] = tr[x][<span class="number">0</span>] = son[x];</span><br><span class="line">    f[x] = fa[x];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">17</span>;j ++) tr[x][j] = tr[tr[x][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">    sz2[x] = sz[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line">    <span class="built_in">memset</span>(son, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(fa));</span><br><span class="line">    idx = ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u;i &lt; n;i ++) <span class="built_in">read</span>(o, u), <span class="built_in">add</span>(o, u), <span class="built_in">add</span>(u, o);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(sz2, sz, <span class="built_in"><span class="keyword">sizeof</span></span>(sz2));</span><br><span class="line">    <span class="built_in">memcpy</span>(son3, son, <span class="built_in"><span class="keyword">sizeof</span></span>(son3));</span><br><span class="line">    <span class="built_in">memcpy</span>(f, fa, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">write</span>(ans);</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">1 6</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">5 3</span></span><br><span class="line"><span class="comment">3 7</span></span><br><span class="line"><span class="comment">6 4</span></span><br><span class="line"><span class="comment">4 7</span></span><br><span class="line"><span class="comment">output</span></span><br><span class="line"><span class="comment">73</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 倍增 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022/6/20模拟赛</title>
      <link href="/2022/06/20/2022-6-20%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
      <url>/2022/06/20/2022-6-20%E6%A8%A1%E6%8B%9F%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>被虐爆了QWQ。</p><span id="more"></span><p>某校模拟赛。</p><h1 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h1><p>不会，看到积分就知道这道题完了，毒瘤出题人不给$NTT$模数，本人不会三模数$NTT$，$FFT$乱搞，炸了精度（值域不够），果断使用拆系数，之前没写过，出了一堆锅，写的快吐的时候调出来了，一测极限。只有暴力分，卡了半天卡不动，大常数选手实锤。</p><p>实际被诈骗了，非常简单。</p><h1 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h1><p>没看（这次最大的失误）</p><h1 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h1><p>感觉挺神秘的一道题，简述一下题意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个n*n矩阵，每个点上有颜色，求所有子矩阵的颜色种类之和。</span><br><span class="line">n &lt;= 1300</span><br></pre></td></tr></table></figure><p>考场上写了个自认为的$n^4$假了，没改出来，交了个$n^5$移动块的暴力（还不如把写假了的拆贡献交上去），泪目了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长链剖分</title>
      <link href="/2022/06/16/%E9%95%BF%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/2022/06/16/%E9%95%BF%E9%93%BE%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>重装系统时没保存，掉了。</p><p>先鸽了。</p><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 长链剖分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归程</title>
      <link href="/2022/06/16/%E5%BD%92%E7%A8%8B/"/>
      <url>/2022/06/16/%E5%BD%92%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>…</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>前置知识：$kruskal$重构树，这是个什么东西呢，我们都知道并查集为了保证时间复杂度需要按秩合并，这会导致一个什么样的结果呢？路径压缩了，那么如果我们使用$kruskal$算法跑最小生成树的话，我们所加入的边的信息就丢失了，一般来说我们是不需要这些信息的，但是某些时候这些信息就显得无比重要，更具体的$kruskal$重构树可以在某些情况下弥补这个问题，以下是它的建立：</p><ul><li>按照$kruskal$的顺序将所有点连起来，但不是直接像按秩合并那样连起来，我们需要建立一个新节点，将这两个节点<strong>目前</strong>（除了这个节点未合并，不是它本身）的根连起来，然后这个点的点权就是加入边的边权。</li></ul><p>这样有什么好处呢，我们思考一个问题$kruskal$每次加入的边都是当前最优的，而先加入的边所连的点又先合并，故<strong>在$kruskal$重构树里父亲节点一定不如儿子节点优秀</strong>。</p><p>那么我们现在再来思考这个道题，我们首先跑一遍最短路，算出每个点到$1$号节点的最小距离（不能用$SPFA$）然后建一课边权和（以海拔为边权）最大的$kruskal$最大重构树，由于父节点一定比儿子节点更劣的原则，我们找到当前节点的最高的祖宗节点满足：其海拔高度高于题目所给高度，于是这个祖宗节点的子树当前节点都可到，只需查找其中的最小距离即可。</p><p>找祖宗节点可以倍增，最小距离可以预处理，于是这道题$O(n\log n)$就做完了。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;long long, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">7e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, T;</span><br><span class="line">LL dist[N];</span><br><span class="line"><span class="keyword">namespace</span> DFS</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> idx;</span><br><span class="line">    <span class="keyword">int</span> e[N &lt;&lt; <span class="number">1</span>], ne[N &lt;&lt; <span class="number">1</span>], h[N], w[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        idx ++;</span><br><span class="line">        e[idx] = y, ne[idx] = h[x], h[x] = idx, w[idx] = z;</span><br><span class="line">    &#125;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt;q;</span><br><span class="line">    <span class="keyword">int</span> p[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(p));</span><br><span class="line">        <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dist));</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            PII o = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(p[o.second]) <span class="keyword">continue</span>;</span><br><span class="line">            p[o.second] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = h[o.second], j; ~i;i = ne[i])</span><br><span class="line">            &#123;</span><br><span class="line">                j = e[i];</span><br><span class="line">                <span class="keyword">if</span>(dist[j] &gt; dist[o.second] + w[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    dist[j] = dist[o.second] + w[i];</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;dist[j], j&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        idx = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> o, u, w;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (Edge b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; b.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edge[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> fa[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[N &lt;&lt; <span class="number">2</span>], ne[N &lt;&lt; <span class="number">2</span>], h[N], w[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    idx ++;</span><br><span class="line">    e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fa[x] == x ? x : fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line">LL val[N];</span><br><span class="line"><span class="keyword">int</span> father[N][<span class="number">28</span>], depth[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[x] = depth[y] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x != y)</span><br><span class="line">    &#123;</span><br><span class="line">        father[x][<span class="number">0</span>] = y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">27</span>;i ++)</span><br><span class="line">            father[x][i] = father[father[x][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[x], j; ~i;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(j, x);</span><br><span class="line">        dist[x] = <span class="built_in">min</span>(dist[x], dist[j]);</span><br><span class="line">        val[x] = <span class="built_in">min</span>(val[j], val[x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q, k, s, last;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">27</span>;i &gt;= <span class="number">0</span>;i --) </span><br><span class="line">        <span class="keyword">if</span>(father[x][i] &amp;&amp; val[father[x][i]] &gt; limit) x = father[x][i];</span><br><span class="line">    <span class="keyword">return</span> dist[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(q, k, s);</span><br><span class="line">    <span class="keyword">int</span> v, p;</span><br><span class="line">    <span class="keyword">while</span>(q --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(v, p);</span><br><span class="line">        v = (LL)(v + k * last - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        p = (LL)(p + k * last) % (s + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">write</span>(last = <span class="built_in">lca</span>(v, p));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    last = <span class="number">0</span>;</span><br><span class="line">    DFS:: <span class="built_in">init</span>();</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line">    <span class="built_in">memset</span>(depth, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(depth));</span><br><span class="line">    <span class="built_in">memset</span>(val, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(val));</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; N;i ++) fa[i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) val[i] = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    cnt = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u, v, w;i &lt;= m;i ++)</span><br><span class="line">        <span class="built_in">read</span>(o, u, v, w), DFS:: <span class="built_in">add</span>(o, u, v), DFS:: <span class="built_in">add</span>(u, o, v), edge[i] = &#123;o, u, w&#125;;</span><br><span class="line">    DFS:: <span class="built_in">dfs</span>();</span><br><span class="line">    <span class="built_in">sort</span>(edge + <span class="number">1</span>, edge + m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m, o, u;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">    &#123;</span><br><span class="line">        o = <span class="built_in">find</span>(edge[i].o), u = <span class="built_in">find</span>(edge[i].u);</span><br><span class="line">        <span class="keyword">if</span>(o == u) <span class="keyword">continue</span>;</span><br><span class="line">        cnt ++;</span><br><span class="line">        val[cnt] = edge[i].w;</span><br><span class="line">        fa[o] = cnt, fa[u] = cnt;</span><br><span class="line">        <span class="built_in">add</span>(o, cnt), <span class="built_in">add</span>(cnt, o), <span class="built_in">add</span>(u, cnt), <span class="built_in">add</span>(cnt, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n + <span class="number">1</span>;i &lt;= cnt;i ++) dist[i] = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(cnt, cnt);</span><br><span class="line">    <span class="built_in">query</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 生成树 </tag>
            
            <tag> kruskal重构树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二轮讲课</title>
      <link href="/2022/06/15/%E7%AC%AC%E4%BA%8C%E8%BD%AE%E8%AE%B2%E8%AF%BE/"/>
      <url>/2022/06/15/%E7%AC%AC%E4%BA%8C%E8%BD%AE%E8%AE%B2%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<p>自己作死把博客搞掉了（又掉了），只有重写了$QWQ$。</p><span id="more"></span><h1 id="块状链表"><a href="#块状链表" class="headerlink" title="块状链表"></a>块状链表</h1><p>众所周知，数组查询方便，但插入和删除困难（复杂度极高 $O(n)$ ）；而<a href="https://so.csdn.net/so/search?q=%E9%93%BE%E8%A1%A8&spm=1001.2101.3001.7020">链表</a>恰恰相反，索引困难，而插入和删除简单。</p><p>那么当我们遇到既要动态插入删除，又要快速索引元素的问题时，有没有一种<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&spm=1001.2101.3001.7020">数据结构</a>能够同时快速支持这两个操作呢？</p><p>以我们老祖宗的强大的智慧，答案当然是有，它就是——<del>序列之王<code>Splay</code></del>块状链表。</p><p>听到这个名字，大概都能猜到它的主要思想：分块。</p><p>它将整个数列分成$\sqrt n$块，每一块$\sqrt n$个数用链表串起来，然后再用一个主链表将他们都传起来，具体的它长这样：</p><p><img src="1.png" alt="image"></p><p>仔细想想，无论怎么操作都是$\sqrt n$（维护前缀和的分裂不是）的。</p><h2 id="vector实现："><a href="#vector实现：" class="headerlink" title="vector实现："></a>vector实现：</h2><ul><li><p><strong>建立块状链表。</strong> 依次提取数组的前$B$元素当一个 $vector$ 添加。</p></li><li><p><strong>找到第 k 元素。</strong>记录每vector维护的范围，确定$k$所在区间，用$k-l$即可找到（$l$是这个$vector$的首项）。</p></li><li><p><strong>插入。</strong>首先，我们需要知道插入的位置。为了方便默认是在给定插入位置的前面插入；直接用$vector::insert$。为了保证时间复杂度，如果插入完导致这个$vector$大于$2B$，则在$B$处分裂这个$vector$。具体怎么分裂：</p><ul><li><p>在块状链表里找到这个 $vector$ 接下来的 $vector$ 在接下来的 $vector$ 之前插入一个新建的 $vector$。</p></li><li><p>这个新建 $vector$ 应该保存刚才插入的 $vector$ 的 $B$ 元素后缀，也就是$vector::end()-B$ 这个 $iterator$ 区间。我们用 $B$ 分裂来平均分裂后的 $vector$ 长度，并同时保证没有 $vector$ 长度超过 $B$。</p></li><li><p>建完新的 $vector$，再删除这个区间。</p></li></ul></li><li><p><strong>删除。</strong> 同样找到位置，利用 $vector::erase$如果这个 $vector$ 的大小变为零，把这个 $vector$ 从块状链表删除。</p></li></ul><p>$B$取$\sqrt n$</p><p><del>(写死我了)</del></p><h2 id="关于主链"><a href="#关于主链" class="headerlink" title="关于主链"></a>关于主链</h2><p>其实主链没有必要用$vector$强行插入，在每一块中间记录本块左右块的编号，然后直接在队尾加即可（常数小的一批，在下面的题中表现非常优秀）</p><h2 id="例题：带插入区间K小值"><a href="#例题：带插入区间K小值" class="headerlink" title="例题：带插入区间K小值"></a><a href="https://www.luogu.com.cn/problem/P4278">例题：带插入区间K小值</a></h2><p>这道题全凭各位常数。</p><p>过不了就删掉$split$函数。</p><p><img src="2.png" alt="image"></p><p>本人并没有被卡常，所以被卡常应该不关我事？</p><h1 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h1><p>分块之神$Dyd$曾经说过：分块就是一种套路，你把代码每一部分换成暴力，调出一部分就全部调出来了，所以分块特别好调。</p><p>蒟蒻不懂，可能这就是蒟蒻比巨佬菜的原因。</p><h2 id="树分块"><a href="#树分块" class="headerlink" title="树分块"></a>树分块</h2><p>一般可以用其他做法碾压树分块，所以题目较少。</p><h3 id="例题：P6177-Count-on-a-tree-II-【模板】树分块"><a href="#例题：P6177-Count-on-a-tree-II-【模板】树分块" class="headerlink" title="例题：P6177 Count on a tree II/【模板】树分块"></a>例题：<a href="https://www.luogu.com.cn/problem/P6177">P6177 Count on a tree II/【模板】树分块</a></h3><p>树上数数的不带修的强制在线的经典问题（<del>菊花图，蒲公英可以轻松卡掉，但本人也不是很懂怎么卡</del>）。</p><p>首先有一种更为简单（神秘）的做法：对于每个点拉一个$bitset$，比较显然是用轻重链剖分来维护，但是这样复杂度过大（感觉应该能过了），考虑怎么优化：对于每一条重链进行分块，预处理出每一块内$bitset$的并，复杂度：$O(m\log n \sqrt n \frac{n}{w})$甚至跑不过上面的东西，瓶颈在多块的合并，之后的操作，据题解所说可以用<code>ST</code>加速，但因它的理论复杂度应该是跑不过这道题的，只不过这东西跑不满，常数小，拿了最优解而已，我们不再深究，有兴趣的童鞋可以去看看巨佬<a href="https://www.luogu.com.cn/user/128141"><strong>Aestas16</strong></a>的题解。</p><p>这里只是举个例，证明树分块的时间不怎么滴。</p><p>下面才是正题。</p><p>什么是树分块</p><p>树分块就是像序列分块一样设置一个阈值$B$，然后在树上随机撒$\frac{n}{B}$个点，使其成为关键节点，然后使每一个点到距离其最近的关键节点的距离不超过$B$，这样我们就可以首先预处理出每两个关键节点之间的信息（所以树分块支持不了大量的修改操作），每次将需要计算的两点的距离最近的关键节点的信息拿出来，其他信息暴力统计即可，复杂度：$O(B^2+qB+\frac{n^2}{B})$，弱爆了。</p><p>然后重点讲一下撒点：</p><p>首先我们将所有的非关键节点入队，每次取出其中深度最大的节点，若他的节点的$1\sim B$级祖先都没有关键节点，就将它的$S$级祖先标记为关键节点，由上述方法可知每一次标记至少能控制$B$个节点，这些节点都不会被标记，且从这个节点出发最大移动距离最多为$B$，满足了我们的需要。</p><p>接下来，考虑对一条到根的路径上的所有关键点用$bitset$维护出他们两两之间的颜色，处理的时候我们可以使用递推的方式即：$b_{i,j}=b_{i,j-1}orb_{i+1,j-1}$，所以我们可以用<strong>最多</strong>$O(n)$的时间统计出每相邻关键节点的答案，其他的答案再两两统计，由于点对最多有$\frac{n^2}{B^2}$，所以预处理的复杂度为$O(\frac{n^2}{B}+\frac{n^3}{wB^2})\approx O(n\sqrt n+\frac{n^2}{w})$（感觉没前途啊）。</p><p>之后就简单了，将答案拆成四部分即可：</p><p><img src="3.png" alt="image"></p><p>其中红色的节点表示关键节点，绿色节点表示查询节点，查询节点到最深的关键节点暴力做，最高的关键节点之间也暴力做，那么最终复杂度为：$O((n+m)\sqrt n + \frac{n^2+nm}{w})$。<del>（不知到为什么被SPOJ卡掉了）</del></p><p>温馨提示，除非想不到其他解法，还是别写这个了。</p><h2 id="带修改莫队"><a href="#带修改莫队" class="headerlink" title="带修改莫队"></a>带修改莫队</h2><p>总所周知，普通的莫队是不能支持修改操作的，但是有些题目它就是让你支持修改，而且除了莫队你还不会其他的算法，这个时候我们就需要对莫队进行改进，让其支持修改。</p><p>首先思考一个问题，如果所有的修改操作都在查询操作之前，这个问题该怎么解决呢。</p><p>这其实是一个$sb$问题，将所有的修改操作维护完了，直接上普通莫队就行了。</p><p>问题的关键来了，如何使我们的修改操作重复执行的操作尽可能少。</p><p>有的人可能就会说了，将任意两段连续的修改操作之间的询问操作统计起来跑莫队不久行了么。</p><p>这样虽然可以使修改操作执行的次数很少，但是当询问操作很少的时候（比如两次），可以轻松将复杂度卡到线性（不带根号的原因是因为询问很少），这样就能使复杂度接近$O(nm)$很挫。</p><p>我们考虑定义三维：$[l, r, time]$，意味着查询的起始，终点，需要完成前$time$次修改操作。</p><p>根据分块的时间复杂度平衡思想，首先考虑将序列分成$len$块，考虑将$l$，$r$都放入块中，首先按$l$的块的编号排序，然后$l$的块的序号相同的询问再按$r$的块的编号排序，$l$和$r$的块的编号都相等的再按需要修改的次数升序排序。</p><p>首先为什么要这么做呢，一共有$len$块，令每块长度为$limit$（则$n$可以粗略的认为是$len\times limit$），那么移动$l$和$r$的时间复杂度为$len^2\times limit=n\times len$，之后考虑修改操作的进行次数，令总修改次数为$cnt$次，那么最坏情况下移动次数为$len^2*cnt$，双方取平衡，得到理论最优复杂度$\sqrt[3]{n^4cnt}$。</p><p>例题：<a href="https://www.luogu.com.cn/problem/P1903">P1903 国家集训队 数颜色 / 维护队列</a></p><h2 id="树上莫队"><a href="#树上莫队" class="headerlink" title="树上莫队"></a>树上莫队</h2><p>我们回顾一下树分块的那道题，我们发现这样的做法及其丑陋（<del>但支持强制在线这一点就很香</del>），我们想一想如果不是强制在线的话我们应该怎么搞，首先在树上进行莫队操作的主要难点，一般来说能将树转化成序列的我们优先考虑，思考这题如何转成序列，我们使用一个叫欧拉序的东西，具体构造方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对这棵树进行dfs，将任何第一次访问的节点加入序列，当节点回溯时再将这个节点加入序列。</span><br></pre></td></tr></table></figure><p>我们回过头来重新观察这道题，设$i$节点在序列中第一次出现是$st[i]$，第二次出现是$ed[i]$，那么对于对于任意询问节点$x$，$y$，设$st[x]&lt;st[y]$，分类讨论可以得到。</p><p>1.$lca(x,y)=x$，画图可以得到答案就是序列中$ed[x]\sim st[y]$之间所有只出现过一次的数所包含的不同种类（所以第一次出现就增加第二次出现就减少）。</p><p>2.$lca(x,y) \ne x$，不难发现此时$y$不可能是$x$的父亲<del>（不然的话为什么st[y]不在st[x]前面）</del>，所以画个图分析，此时的$ed[x] \sim st[y]$没有包含$lca(x,y)$，特判即可。</p><p>还有一道和这个题一摸一样的拓展版（<del>多了修改，但无伤大雅</del>）：<a href="https://www.luogu.com.cn/problem/P4074">[WC2013] 糖果公园</a>，快去切掉吧。</p><h2 id="倍增分块-底层线段树-底层分块"><a href="#倍增分块-底层线段树-底层分块" class="headerlink" title="倍增分块+底层线段树+底层分块"></a>倍增分块+底层线段树+底层分块</h2><p><del>自己都在怀疑赛事怎么可能有人写出来</del></p><p>$5e5$的神仙分块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一个数列，实现如下两种操作。</span><br><span class="line">1.将[l,r]区间中所有&gt;x的数减去x。</span><br><span class="line">2.询问区间[l,r]的和，最小值，最大值。</span><br><span class="line">值域1e9，序列长度5e5</span><br></pre></td></tr></table></figure><p>一看这题的第二问，哈，我会，线段树。</p><p>冷静下来看第一问，*?~&amp;%$#&amp;^。</p><p>毕竟是$lxl$的题，我们首先得往分块上想。</p><p>仔细思考之后就会发现这题必须要用数据结构维护值域和序列。</p><p>听说这题可以用分块套Splay（不愧是序列之王）<del>只要你没有常数</del>。</p><p>因为值域$10^9$，考虑一种神奇的分块：<strong>倍增分块</strong>，这是一种什么样的分块呢，就是将值在$[B^i,B^{i+1})$的数分在一起。</p><p>思考为什么考虑这种分块：</p><p>我们使用线段树暴力的时候，一定会先建一课序列线段树。</p><ul><li>如果区间的最大值$\le x$直接跳过。</li><li>如果区间的最小值$&gt; x$打上懒标记之后返回。</li><li>递归进入子区间。</li></ul><p>仔细想一想，如果序列是一大一小交替排布，每一次更改就是大常数的$O(n)$，跑不过暴力。</p><p>我们假设已经将值域分成了$cnt$个块，每个块里都有一个序列线段树。</p><p>这样整体上看最坏复杂度为$n\times cnt \times \log n$</p><p>但是思考分块的作用。</p><ul><li>如果一个块上界$\le x$直接跳过。</li><li>如果一个块的下届$&gt; x$，这一部分将被重构，那么这一部分复杂度是：$m\times cnt \times \log n$的</li><li>不然就递归。</li></ul><p>我们发现这样做了之后前两种情况的复杂度之和块的数量有关，但是，第三种情况的最差复杂度是线性的。</p><p>我们假设情况三的块长为$len$，由上我们发现每次修改最多会有一块成为情况三，所以最多就会操作$cnt \times \frac{len}{x}$次，我们将这式子拆开分析，首先如果每个块都已经因为上面的操作变成同一个值域了的话，显然最多会有$cnt$块需要递归，然后每一块内我们最多递归$\frac{len}{x}$次（之后就减为1了）。</p><p>考虑最叼钻的情况，即$\forall x=l$的情况，$l$就是当前块的左边界，我们就要让$n \times \log n \times cnt \times \frac{len}{l}$最小，考虑固定$\frac{len}{l}$，$cnt=\log_B^{10^9}$，最终的复杂度：<br>$$<br>O((n+m) \times \log_B{10 ^ 9} \times \log n+n \times B \times \log n \times \log_B^{10^9} )<br>$$<br><del>打开几何画板，但是并没有画出来</del>，$B$的理论最优为$16$，实测的话：应该取$2 \sim 4$。</p><p>之后就会发现卡空间了，线段树的空间主要消耗在叶子，我们可以设置一个常数$K$，让线段树$\le K$的区间的处理直接变成下传标记在序列上暴力，之后再上传。我们可以这样很可观地以大常数的时间代价换取空间（<del>这就是传说中底层分块</del>）。</p><p>这样的话大家就可以完成<a href="https://www.luogu.com.cn/problem/P7447">rgxsxrs</a>啦。</p><p>分块就先这样告一段落了，我们进入下一个专题。</p><h1 id="二维线段树"><a href="#二维线段树" class="headerlink" title="二维线段树"></a>二维线段树</h1><p>这个东西考的不多（不如线段树套平衡树），时间复杂度：大常数的$n \log^2 n$，空间复杂度：$n\log n$。</p><p>具体是干啥用的呢，是维护矩阵信息用的<del>（为啥不套平衡树）</del>，具体一般是对题目所给的二维的其中一维建线段树，再在这个线段树上的叶子节点建立另一颗线段树，维护另一维的信息，然后查询即可。</p><p>例题：[Mosaic](<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4819">Problem - 4819 (hdu.edu.cn)</a>)。</p><p>这里简述一下题意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多组数据（T &lt;= 10），每组数据需要维护一个正方形矩阵（less than: 800*800），然后多次询问，每次询问一个子矩阵中的最大值+最小值/2向下取整。</span><br><span class="line">time limit: 5000ms</span><br></pre></td></tr></table></figure><p>是不是感觉很无脑。</p><p>网络上还流传着另一种二位线段树的写法：四叉树写法，这里不过多介绍（感觉并不优秀），只引用一下定义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">二维线段树是一棵 四叉树，树上每个结点保存 一个矩形和一个域，非叶子结点一定有 二或四 个儿子结点，儿子结点表示的 四个矩形交集为空，并集为父结点表示的 矩形；叶子结点表示的矩形长宽均为1，域则表示了需要求的数据，每个父结点的域可以通过 四个儿子结点得出。</span><br></pre></td></tr></table></figure><h1 id="矩阵求逆"><a href="#矩阵求逆" class="headerlink" title="矩阵求逆"></a>矩阵求逆</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>令$A$是一个矩阵，如果存在一个矩阵$B$满足：<br>$$<br>BA=I<br>$$<br>则称$A$矩阵可逆，且$B$称为$A$的逆矩阵。</p><h2 id="如何求逆：高斯-约旦消元"><a href="#如何求逆：高斯-约旦消元" class="headerlink" title="如何求逆：高斯-约旦消元"></a>如何求逆：高斯-约旦消元</h2><h3 id="一堆证明"><a href="#一堆证明" class="headerlink" title="一堆证明"></a>一堆证明</h3><h4 id="矩阵的逆要么没有要么唯一"><a href="#矩阵的逆要么没有要么唯一" class="headerlink" title="矩阵的逆要么没有要么唯一"></a>矩阵的逆要么没有要么唯一</h4><p>首先要知道若$A$可逆，则逆唯一。</p><p>证明：若$B$和$C$都是$A$的逆，由定义：$AB=BA=I,AC=CA=I$</p><p>则：$B=IB=(AC)B=(AB)C=C$，即$B=C$，证毕。</p><h4 id="判断矩阵是否可逆"><a href="#判断矩阵是否可逆" class="headerlink" title="判断矩阵是否可逆"></a>判断矩阵是否可逆</h4><h5 id="行列式判断法"><a href="#行列式判断法" class="headerlink" title="行列式判断法"></a>行列式判断法</h5><p>设$n$阶矩阵：<br>$$<br>A=\begin{bmatrix}<br>a_{1,1} &amp; a_{1,2} &amp;a_{1,3} &amp; \dots &amp; a_{1, n}\\<br>a_{2,1} &amp; a_{2,2} &amp;a_{2,3} &amp; \dots &amp; a_{2, n}\\<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots\\<br>a_{n,1} &amp; a_{n,2} &amp;a_{n,3} &amp; \dots &amp; a_{n, n}\\<br>\end{bmatrix}<br>$$<br>构造其代数余子式：<br>$$<br>A^*=\begin{bmatrix}<br>A_{1,1} &amp; A_{1,2} &amp;A_{1,3} &amp; \dots &amp; A_{1, n}\\<br>A_{2,1} &amp; A_{2,2} &amp;A_{2,3} &amp; \dots &amp; A_{2, n}\\<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots\\<br>A_{n,1} &amp; A_{n,2} &amp;A_{n,3} &amp; \dots &amp; A_{n, n}\\<br>\end{bmatrix}<br>$$<br>代数余子式和余子式：</p><p>定义： 在<a href="https://baike.baidu.com/item/n%E9%98%B6%E8%A1%8C%E5%88%97%E5%BC%8F/3705756">n阶行列式</a>中，划去元aij所在的第i行与第j列的元，剩下的元不改变原来的顺序所构成的n-1阶行列式称为元aij的余子式。</p><p>数学表示上计作$M_{i,j}$。</p><p><strong>余子式定义</strong></p><p> $a_{i,j}$的代数余子式 [3] ：$A_{i,j}=(-1)^{i+j}M_{i,j}$。</p><h1 id="行列式及其运算"><a href="#行列式及其运算" class="headerlink" title="行列式及其运算"></a>行列式及其运算</h1><h1 id="线性相关与矩阵的逆"><a href="#线性相关与矩阵的逆" class="headerlink" title="线性相关与矩阵的逆"></a>线性相关与矩阵的逆</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 其他 </tag>
            
            <tag> 块状链表 </tag>
            
            <tag> 分块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚树</title>
      <link href="/2022/06/05/%E8%99%9A%E6%A0%91/"/>
      <url>/2022/06/05/%E8%99%9A%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>小清新优化思想。</p><span id="more"></span><p>是否有过这样的经历，一棵庞大的树，想到一个单次询问很牛的复杂度算法，但是树的大小太大，题目又毒瘤又多次询问，这时候你发现每次询问又只和一些点有关系，这时虚树就应需而生了。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>虚树就是在满足题目要求的情况下，将某一部分的节点抽出来，重新建立成一棵树，然后在上面进行原来的操作，从而以更小的复杂度，实现我们需要实现的操作。</p><h1 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h1><p>有两种建发，一种是用单调栈建，另一种使用排序建，这里使用从 p_b_p_b 那里学到的做法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先先将所有重要点按照dfn序排序，然后将每一个数和自己前缀的lca加入队列，再次按照dfn排序，这个时候每个点和自己前缀的lca就是自己在虚树中的父亲。</span><br></pre></td></tr></table></figure><p>感觉起来挺对的，这一定能使所有点连成一棵树。</p><h1 id="例题：CF613D-Kingdom-and-its-Cities"><a href="#例题：CF613D-Kingdom-and-its-Cities" class="headerlink" title="例题：CF613D Kingdom and its Cities"></a>例题：<a href="https://www.luogu.com.cn/problem/CF613D">CF613D Kingdom and its Cities</a></h1><p>一句话题意：给你一颗树，每次选中一些点，让你删除最少的非选择点，使所有重要点不连通，问最少删除的点的数量。</p><p>$n \le 1e5,\sum k \le 1e5$。</p><p>看到这个数据范围，这个$\sum k$，果断在询问上下手脚。</p><p>观察这幅图：</p><p><img src="1.png" alt="image"></p><p>我们发现左子树是完全没有必要遍历的，哪里啥都没有，所以我们考虑构造虚树，我们发现建立虚树之后每个重要节点删去所需代价没有变，所以正确性也是有保证的。</p><p>时间复杂度： $O(\sum k\log\sum k)$。</p><p>常数有点小大。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>, Inf = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, T;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[N &lt;&lt; <span class="number">1</span>], ne[N &lt;&lt; <span class="number">1</span>], h[N], depth[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    idx ++;</span><br><span class="line">    e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dfn[N], cnt, lg[N &lt;&lt; <span class="number">1</span>], f[N &lt;&lt; <span class="number">1</span>][<span class="number">22</span>], father[N], id[N];</span><br><span class="line"><span class="keyword">int</span> hh;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = id[x], r = id[y], len;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="built_in">swap</span>(l, r);</span><br><span class="line">    len = lg[r - l + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(depth[f[l][len]] &lt; depth[f[r - (<span class="number">1</span> &lt;&lt; len) + <span class="number">1</span>][len]]) <span class="keyword">return</span> f[l][len];</span><br><span class="line">    <span class="keyword">return</span> f[r - (<span class="number">1</span> &lt;&lt; len) + <span class="number">1</span>][len];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mark[N], type;</span><br><span class="line"><span class="keyword">namespace</span> dp&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; edge[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = hh, o;i &gt;= <span class="number">2</span>;i --) </span><br><span class="line">        &#123;</span><br><span class="line">            o = <span class="built_in">lca</span>(a[i], a[i - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(a[i] == o) <span class="keyword">continue</span>;</span><br><span class="line">            edge[o].<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>, ans = <span class="number">0</span>, op;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : edge[x])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(depth[i] &lt; depth[x]) <span class="keyword">continue</span>;</span><br><span class="line">            op = <span class="built_in">dp</span>(i);</span><br><span class="line">            ans += op;</span><br><span class="line">            <span class="keyword">if</span>(mark[x] &amp;&amp; mark[i]) ans ++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mark[i]) res ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res &gt; <span class="number">1</span>) ans ++;</span><br><span class="line">        <span class="keyword">if</span>(res == <span class="number">1</span>) mark[x] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dfn[x] &lt; dfn[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    hh = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o;i &lt;= m;i ++) <span class="built_in">read</span>(o), a[++ hh] = o, mark[o] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= hh;i ++) </span><br><span class="line">        <span class="keyword">if</span>(mark[father[a[i]]] &amp;&amp; father[a[i]] != a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= hh;j ++) mark[a[j]] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>), <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + hh + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = hh, o;i &gt;= <span class="number">2</span>;i --) </span><br><span class="line">    &#123;</span><br><span class="line">        o = <span class="built_in">lca</span>(a[i], a[i - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(o == a[i] || o == a[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        a[++ hh] = o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + hh + <span class="number">1</span>);</span><br><span class="line">    hh = <span class="built_in">unique</span>(a + <span class="number">1</span>, a + hh + <span class="number">1</span>) - (a + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + hh + <span class="number">1</span>, cmp);</span><br><span class="line">    dp:: <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">write</span>(dp:: <span class="built_in">dp</span>(a[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= hh;i ++) dp:: edge[a[i]].<span class="built_in">clear</span>(), mark[a[i]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> now[N &lt;&lt; <span class="number">1</span>], tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    depth[x] = depth[y] + <span class="number">1</span>;</span><br><span class="line">    dfn[x] = ++ cnt, now[++ tot] = x, id[x] = tot, father[x] = y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[x], j; ~i;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == y) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(j, x);</span><br><span class="line">        now[++ tot] = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lg[<span class="number">1</span>] = <span class="number">0</span>, lg[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i &lt;= tot;i ++) lg[i] = lg[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= tot;i ++) f[i][<span class="number">0</span>] = now[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; <span class="number">22</span>;j ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= tot;i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(depth[f[i][j - <span class="number">1</span>]] &lt; depth[f[i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)][j - <span class="number">1</span>]]) f[i][j] = f[i][j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> f[i][j] = f[i + (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u;i &lt; n;i ++) <span class="built_in">read</span>(o, u), <span class="built_in">add</span>(o, u), <span class="built_in">add</span>(u, o);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --) <span class="built_in">work</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 虚树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3502 [POI2010]CHO-Hamsters</title>
      <link href="/2022/06/04/P3502-POI2010-CHO-Hamsters/"/>
      <url>/2022/06/04/P3502-POI2010-CHO-Hamsters/</url>
      
        <content type="html"><![CDATA[<p>…</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>又是一道经典的矩阵快速幂在图论计数上的经典应用（<del>自己鸽了这么多道，终于记得写了</del>）。</p><p>首先指明一个显然的结论：$S$一定由这$n$个字符串中的一部分字符串首尾拼接组成。</p><p>得到这个结论后，我们将这$n$个字符串两两组合，找出他们首尾相接时最少的代价。</p><p>例如，字符串$A=abcabc$和字符串$B=bcda$相组合，$B$接在A后面所需的最小代价就是2。</p><p>然后我们需要在这个无向图任取一个起点上走$m-1$条边，使起点的长度+图中跑出来的代价最小。</p><p>观察我们$dp$的转移方程：$\ \forall i,j,k \rarr f[i][j]=\min (f[i][k]+f[k][j])$。</p><p>这个东西显然就是一个矩阵乘，写个矩阵加速幂就结束了。</p><p>复杂度为$O(n^2\sum len + n^3 \log m)$的，可以使用$hash$做到$O(n^2\log \sum len + n^3 \log m)$。</p><p>坑点：</p><ul><li>需要$long \ long$。</li><li>从$i$和$i$的代价为$len[i]-ne[i][len[i]]$。</li></ul><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200</span> + <span class="number">5</span>, M = <span class="number">1e5</span> + <span class="number">5</span>, mod = <span class="number">2017</span>;</span><br><span class="line"><span class="keyword">const</span> LL Inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, t;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    LL a[N][N];</span><br><span class="line">    Node <span class="keyword">operator</span>* (Node b)</span><br><span class="line">    &#123;</span><br><span class="line">        Node c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j ++) c.a[i][j] = Inf;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= n;k ++) </span><br><span class="line">                    c.a[i][j] = <span class="built_in">min</span>(c.a[i][j], a[i][k] + b.a[k][j]);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;b;</span><br><span class="line"><span class="keyword">char</span> s[N][M];</span><br><span class="line"><span class="keyword">int</span> ne[N][M], len[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">get_ne</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>;i &lt;= len[x];i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; s[x][j + <span class="number">1</span>] != s[x][i]) j = ne[x][j];</span><br><span class="line">        <span class="keyword">if</span>(s[x][j + <span class="number">1</span>] == s[x][i]) j ++;</span><br><span class="line">        ne[x][i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len[x];i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; s[y][j + <span class="number">1</span>] != s[x][i]) j = ne[y][j];</span><br><span class="line">        <span class="keyword">if</span>(s[y][j + <span class="number">1</span>] == s[x][i]) j ++;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Node <span class="title">qpow</span><span class="params">(Node x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node res;</span><br><span class="line">    <span class="built_in">memset</span>(res.a, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(res.a));</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">    res = x, k --;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * x;</span><br><span class="line">        x = x * x;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">char</span> c[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i] + <span class="number">1</span>), len[i] = <span class="built_in">strlen</span>(s[i] + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">get_ne</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)</span><br><span class="line">            <span class="keyword">if</span>(i != j) b.a[i][j] = len[j] - <span class="built_in">kmp</span>(i, j);</span><br><span class="line">            <span class="keyword">else</span> b.a[i][j] = len[j] - ne[i][len[j]];</span><br><span class="line">    b = <span class="built_in">qpow</span>(b, m - <span class="number">1</span>);</span><br><span class="line">    ans = Inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, b.a[i][j] + len[i]);</span><br><span class="line">    <span class="built_in">write</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 矩阵快速幂 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1659D</title>
      <link href="/2022/06/04/CF1659D/"/>
      <url>/2022/06/04/CF1659D/</url>
      
        <content type="html"><![CDATA[<p><del>先鸽了</del>，补完了。</p><p>有$O(n)$的做法，不会，就写$n \log n$的。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先我们考虑从最后一位开始，逐步确定整个序列。</p><p>为什么这么做呢，主要是因为发现将前面所有数字加起来除以$n$就是这个序列中一的个数，同时，我们看一下最后一位的大小是否大于$n-1$就可以判断最后一位是否存在$1$，然后就可以将最后一次排序的贡献从最后一次排序中删除，依次向前计算即可。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, T, k;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(x) (x &lt;&lt; 1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> r(x) (x &lt;&lt; 1 | 1)</span></span><br><span class="line">    <span class="keyword">int</span> l, r, v, flag;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].v = tr[<span class="built_in">l</span>(x)].v + tr[<span class="built_in">r</span>(x)].v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x].v += (tr[x].r - tr[x].l + <span class="number">1</span>) * flag;</span><br><span class="line">    tr[x].flag += flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tr[x].flag) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">change</span>(<span class="built_in">l</span>(x), tr[x].flag);</span><br><span class="line">    <span class="built_in">change</span>(<span class="built_in">r</span>(x), tr[x].flag);</span><br><span class="line">    tr[x].flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tr[x] = &#123;l, r, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[x].v = a[l], <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= tr[x].l &amp;&amp; tr[x].r &lt;= r) <span class="keyword">return</span> <span class="built_in">change</span>(x, v);</span><br><span class="line">    <span class="built_in">pushdown</span>(x);</span><br><span class="line">    <span class="keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid) <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span>, l, r, v);</span><br><span class="line">    <span class="keyword">if</span>(mid &lt; r) <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, v);</span><br><span class="line">    <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= tr[x].l &amp;&amp; tr[x].r &lt;= r) <span class="keyword">return</span> tr[x].v;</span><br><span class="line">    <span class="built_in">pushdown</span>(x);</span><br><span class="line">    <span class="keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid) res += <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">if</span>(r &gt; mid) res += <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n, res = <span class="number">0</span>;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">        &#123;</span><br><span class="line">            res = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, i) / i;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans[i] = res;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(res) <span class="built_in">modify</span>(<span class="number">1</span>, i - res + <span class="number">1</span>, i, <span class="number">-1</span>);</span><br><span class="line">ans[i] = <span class="built_in">query</span>(<span class="number">1</span>, i, i) / (i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">write</span>(ans[i]), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CF </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4655 [CEOI2017]Building Bridges</title>
      <link href="/2022/05/30/P4655-CEOI2017-Building-Bridges/"/>
      <url>/2022/05/30/P4655-CEOI2017-Building-Bridges/</url>
      
        <content type="html"><![CDATA[<p>精度永远是这么的难调。</p><span id="more"></span><p>$O(n^2)$的暴力<code>dp</code>几乎是送的，不讲。</p><p>设<code>sum[i]</code>表示前<code>i</code>个<code>w</code>的和，<code>f[j]</code>表示以当前点为终点的最优答案。</p><p>所以答案就是：$f(i)= \min (f(j)+sum(i)-sum(j)-w(i)+(h(i)-h(j))^2)$。</p><p>推导一波：<br>$$<br>\begin{aligned}<br>    f(i) - sum + w(i) - h(i)^2 = \min(f(j)-sum(j)-2h(i)h(j)+h(j)^2)<br>\end{aligned}<br>$$<br>令右边这堆东西为 <code>p(j)</code>。</p><p>那么当<code>p(j)&lt;p(k)</code>时：<br>$$<br>\begin{aligned}<br>    p(j)&amp;&lt;p(k) \\<br>    f(j)-sum(j)-2h(i) h(j)+h(j)^2 &amp;&lt; f(k)-sum(k)-2h(i)h(k)+h(k)^2\\<br>    f(j)-sum(j)+h(j)^2-(f(k)-sum(k)+h(k)^2)&amp;&lt;(2h(j)-2h(k))h(i) \\<br>    \frac{f(j)-sum(j)+h(j)^2-(f(k)-sum(k)+h(k)^2)}{2h(j)-2h(k)}&amp;&lt;h(i)<br>\end{aligned}<br>$$<br>这就是很经典的斜率优化$\frac{ \Delta y}{\Delta x}=k$的形式，注意<code>h(i)</code>并不单增，使用<code>cdq</code>分治解决。</p><p>注意精度，凸包形式，斜率不存在的情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL Inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> esp = <span class="number">1e-8</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">com</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> <span class="comment">// here</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x - y) &lt;= esp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    LL h, sum, f, w, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (Node b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> h &lt; b.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="keyword">int</span> hh, tt, q[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">get_k</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL x1 = <span class="number">2</span> * a[x].h, x2 = <span class="number">2</span> * a[y].h;</span><br><span class="line">    LL y1 = a[x].f - a[x].sum + a[x].h * a[x].h, y2 = a[y].f - a[y].sum + a[y].h * a[y].h;</span><br><span class="line">    <span class="keyword">if</span>(x1 == x2) <span class="keyword">return</span> y1 &lt; y2 ? Inf : -Inf; <span class="comment">// here</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)(y2 - y1) / (<span class="keyword">double</span>)(x2 - x1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(hh &lt; tt &amp;&amp; <span class="built_in">com</span>(<span class="built_in">get_k</span>(q[tt], x), <span class="built_in">get_k</span>(q[tt - <span class="number">1</span>], q[tt])) &lt;= <span class="number">0</span>) tt --; <span class="comment">// here</span></span><br><span class="line">    q[++ tt] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">answer</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a[x].h - a[y].h) * (a[x].h - a[y].h) + a[x].sum - a[y].sum - a[x].w + a[y].f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp_id</span><span class="params">(Node x, Node y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.id &lt; y.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cdq</span>(l, mid);</span><br><span class="line">    <span class="built_in">sort</span>(a + l, a + mid + <span class="number">1</span>), <span class="built_in">sort</span>(a + mid + <span class="number">1</span>, a + r + <span class="number">1</span>);</span><br><span class="line">    hh = <span class="number">1</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l;i &lt;= mid;i ++) <span class="built_in">add</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = mid + <span class="number">1</span>;i &lt;= r;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(hh &lt; tt &amp;&amp; <span class="built_in">com</span>(a[i].h, <span class="built_in">get_k</span>(q[hh], q[hh + <span class="number">1</span>])) &gt;= <span class="number">0</span>) hh ++;</span><br><span class="line">        a[i].f = <span class="built_in">min</span>(a[i].f, <span class="built_in">answer</span>(i, q[hh]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + mid + <span class="number">1</span>, a + r + <span class="number">1</span>, cmp_id);</span><br><span class="line">    <span class="built_in">cdq</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i].h), a[i].f = Inf, a[i].id = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i].w), a[i].sum = a[i - <span class="number">1</span>].sum + a[i].w;</span><br><span class="line">    a[<span class="number">1</span>].f = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cdq</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">write</span>(a[n].f);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 斜率优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF662C Binary Table</title>
      <link href="/2022/05/29/CF662C-Binary-Table/"/>
      <url>/2022/05/29/CF662C-Binary-Table/</url>
      
        <content type="html"><![CDATA[<p><code>FMT</code>不会，贺的。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先我们观察数据范围，发现<code>n</code>和<code>m</code>的范围严重不平衡，得出结论需要枚举每一行是否翻转,提前将每一列状压后我们可以再对每一列贪心，这样就得到了暴力的$O(m2^n)$。</p><p>这个东西发现我们是动不了的，考虑转化这个式子，首先将每一列转化成<code>1</code>的个数最少的状态，枚举每一列显然是不可做的，为了将这个<code>m</code>替换掉，我们将每一行的是否翻转状压成一个二进制数,定义有<code>g(x)</code>个列的状态为<code>F(x)</code>，最后答案就是：$\min(\sum S\sum x [Y=x \ xor \ S]F(Y)*g(x))$，<code>F</code>可以预处理 ，这样枚举的就变成<code>S</code>和<code>x</code>了，复杂度就变为$O(2^{2n})$，但依然无法通过此题。</p><p>再次考虑转化，大佬们都已经看出其中的蹊跷了，这就是<code>FMT</code>模板，套上去就完事了。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">21</span>, M = <span class="number">1e5</span> + <span class="number">5</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N][M], b[N];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1</span> &lt;&lt; N], h[<span class="number">1</span> &lt;&lt; N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">popcount</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = x; i;i -= i &amp; (-i)) cnt ++;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FWT_XOR</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">-1</span>) op = <span class="number">499122177</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>, a, b;j &lt; (<span class="number">1</span> &lt;&lt; n);j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(j &gt;&gt; i &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">a = x[j], b = x[j | (<span class="number">1</span> &lt;&lt; i)];</span><br><span class="line">x[j] = <span class="number">1ll</span> * (a + b) % mod * op % mod;</span><br><span class="line">x[j | (<span class="number">1</span> &lt;&lt; i)] = <span class="number">1ll</span> * (a - b + mod) % mod * op % mod;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n, m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c != <span class="string">&#x27;0&#x27;</span> &amp;&amp; c != <span class="string">&#x27;1&#x27;</span>) c = <span class="built_in">getchar</span>();</span><br><span class="line">a[i][j] = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)</span><br><span class="line">b[i] = (b[i] &lt;&lt; <span class="number">1</span>) + a[j][i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++) f[b[i]] ++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">1</span> &lt;&lt; n;i ++) h[i] = <span class="built_in">popcount</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">1</span> &lt;&lt; n;i ++) h[i] = <span class="built_in">min</span>(h[i], n - h[i]);</span><br><span class="line"><span class="built_in">FWT_XOR</span>(f, <span class="number">1</span>), <span class="built_in">FWT_XOR</span>(h, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; (<span class="number">1</span> &lt;&lt; n);i ++) f[i] = <span class="number">1ll</span> * f[i] * h[i] % mod;</span><br><span class="line"><span class="built_in">FWT_XOR</span>(f, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; (<span class="number">1</span> &lt;&lt; n);i ++) ans = <span class="built_in">min</span>(ans, f[i]);</span><br><span class="line"><span class="built_in">write</span>(ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> FWT/FMT </tag>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF451E Devu and Flowers</title>
      <link href="/2022/05/27/CF451E-Devu-and-Flowers/"/>
      <url>/2022/05/27/CF451E-Devu-and-Flowers/</url>
      
        <content type="html"><![CDATA[<p><code>MlKE</code>永远的神。</p>  <span id="more"></span><p><a href="https://codeforces.com/problemset/problem/451/E">题目链接</a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Devu 有 $n$ 个花瓶，第 $i$ 个花瓶里有 $f_i$ 朵花。他现在要选择 $s$ 朵花。</p><p>你需要求出有多少种方案。两种方案不同当且仅当两种方案中至少有一个花瓶选择花的数量不同。</p><p>答案对 $10^9+7$ 取模。</p><p>$1\le n\le 20,0\le f_i\le 10^{12},0\le s\le 10^{14}$</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先考虑$ \forall s \le f_i $的情况，很显然这就是多重集的组合数，答案就是$C_{n+s-1}^{s}$，那么现在思考如何消去$s &gt; f_i$ 的影响，我们设：有$x$个花瓶满足这些花瓶取的花至少为$f_i+1$ 的方案数为$num_x$，其中剩下的花在<strong>所有</strong>花瓶中任意取，很明显，这就可能使有$&gt;x$个花瓶超出自身限制，观察范围，发现$n$小的离谱，那么我们考虑容斥解决误差，枚举每个花瓶是否溢出，然后答案就是：$num_0-num_1+num_2…+(-1)^nnum_n$。</p><p>最后在观察式子，发现没有必要将每个$num$都算出来，枚举时减去$x$为奇数的答案，加上$x$为偶数的答案即可。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20</span>, M = (<span class="number">1</span> &lt;&lt; N) + <span class="number">5</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">LL a[N + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = <span class="number">1ll</span> * x * res % mod;</span><br><span class="line">        x = <span class="number">1ll</span> * x * x % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(LL x, LL y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    x = <span class="built_in">min</span>(y - x, x);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= x;i ++) a = <span class="number">1ll</span> * a * (y - i + <span class="number">1</span>) % mod, b = <span class="number">1ll</span> * b * i % mod; </span><br><span class="line">    res = <span class="number">1ll</span> * res * a % mod * <span class="built_in">qpow</span>(b, mod - <span class="number">2</span>) % mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lucas</span><span class="params">(LL x, LL y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; mod &amp;&amp; y &lt; mod) <span class="keyword">return</span> <span class="built_in">C</span>(x, y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1ll</span> * <span class="built_in">lucas</span>(x / mod, y / mod) * <span class="built_in">C</span>(x % mod, y % mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, cnt, sum;i &lt; (<span class="number">1</span> &lt;&lt; n);i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)</span><br><span class="line">            <span class="keyword">if</span>((i &gt;&gt; j - <span class="number">1</span>) &amp; <span class="number">1</span>) cnt ++, sum += a[j] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; n + m - <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(cnt &amp; <span class="number">1</span>) ans = (ans - <span class="built_in">lucas</span>(n - <span class="number">1</span>, m + n - sum - <span class="number">1</span>)) % mod;</span><br><span class="line">        <span class="keyword">else</span> ans = (ans + <span class="built_in">lucas</span>(n - <span class="number">1</span>, n + m - sum - <span class="number">1</span>)) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>((ans + mod) % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CF </tag>
            
            <tag> 数学 </tag>
            
            <tag> 容斥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学杂谈</title>
      <link href="/2022/05/23/%E6%95%B0%E5%AD%A6%E6%9D%82%E8%B0%88/"/>
      <url>/2022/05/23/%E6%95%B0%E5%AD%A6%E6%9D%82%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<p><code>MlKE</code>带飞了。</p><span id="more"></span><p>该死的<code>windows</code>更新，把笔记带走了</p><h1 id="可重集的排列"><a href="#可重集的排列" class="headerlink" title="可重集的排列"></a>可重集的排列</h1><h1 id="错排"><a href="#错排" class="headerlink" title="错排"></a>错排</h1><p>对于长度为$n$的排列，问满足$\forall a_i \neq i$的排列个数。</p><h2 id="前置知识：容斥"><a href="#前置知识：容斥" class="headerlink" title="前置知识：容斥"></a>前置知识：容斥</h2><p>简单介绍一下，容斥满足：</p><ul><li>并集形式：$|A_1 \cup A_2 \cup …A_n| = \sum_{1 \le i \le n}|A_i|-\sum_{1 \le i \le j \le n}|A_i\cap A_j| +….(-1)^{n+1}|A_1 \cap A_2 \cap … A_n$</li><li>交集形式：$| C_S^{\cap_{i=1}^n A_i}| = |C_S^{\cup_{i=1}^n A_i}| = |S| - |\cup_{i= 1}^n A_i| = |S| - \sum|A_i| + \sum |A_i \cap A_j| - …+(-1) ^ n| \cap_{i = 1}^n A_i|$</li></ul><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>首先我们定义$n$个集合，每个集合$A_i$代表满足$a_i=i$的合法方案那么我们的最终方案就是：$C_S^{\cap_{i=1}^n A_i}$。</p><p>对此我们直接用第二个式子暴力展开然后我们惊讶的发现：$ans = |n!| - |C_n^1 (n-1)!| + |C_n^2 (n-2)!| …+(-1)^n|C_n^n1!|$。</p><p>这个东西我们完全可以搞。</p><h1 id="多重集的组合数"><a href="#多重集的组合数" class="headerlink" title="多重集的组合数"></a>多重集的组合数</h1><p>$n$种数，从中选$m$个数，问不同的方案数。</p><p>先记结论：$C_{n+m-1}^m$。</p><p>这个东西比上面那个东西好证。</p><p>首先我们设选出来的数的种类满足：$1 \le a_1 \le a2 … \le a_m \le n$。</p><p>凭着信息学竞赛的直觉（考场上孤注一掷的暴力来看），这东西根本没法搞。</p><p>为什么没法搞呢？因为这些数可以取等，组合数搞不了，再考虑构造。</p><p>对于所有的数，我们加上自身的下标$-1$，令其为$b_i$。</p><p>然后就满足：$1 \le b_1 \le b_2…\le b_m \le n + m - 1$。</p><p>这就是组合数板子了，套公式就解决了。</p><h1 id="卡特兰数"><a href="#卡特兰数" class="headerlink" title="卡特兰数"></a>卡特兰数</h1><h1 id="斐波拉契数列的循环节"><a href="#斐波拉契数列的循环节" class="headerlink" title="斐波拉契数列的循环节"></a>斐波拉契数列的循环节</h1><p>性质：在模$p$意义下斐波拉契的循环节不超过$6p$。</p><h2 id="如何求出循环节"><a href="#如何求出循环节" class="headerlink" title="如何求出循环节"></a>如何求出循环节</h2><p>下面给出两种做法：</p><h3 id="随机法"><a href="#随机法" class="headerlink" title="随机法"></a>随机法</h3><p>考虑在$10^{10}$左右的级别随机出一个数，将其的值和下一个值与第一个值和第二个值进行比对，如果相同，这说明我们找到一个可行的循环节，将其分解质因数，每次检验其因数是否可行即可。</p><p>考虑这样最多会随机多少次，根据生日悖论，期望随机的个数在$\sqrt {6p}$左右。</p><p>贴下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">out</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), res = -res;</span><br><span class="line">    <span class="built_in">out</span>(res), <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> mod;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    LL a[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">    Node <span class="keyword">operator</span>* (Node b)</span><br><span class="line">    &#123;</span><br><span class="line">        Node c;</span><br><span class="line">        <span class="built_in">memset</span>(c.a, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(c.a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">2</span>;i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">2</span>;j ++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= <span class="number">2</span>;k ++)</span><br><span class="line">                    c.a[i][j] = (c.a[i][j] + <span class="number">1ll</span> * a[i][k] * b.a[k][j] % mod) % mod;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;o;</span><br><span class="line">LL n, len, p = <span class="number">1e11</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function">mt19937_64 <span class="title">rnd</span><span class="params">(<span class="number">114514</span>)</span></span>;</span><br><span class="line">std::map&lt;std::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, LL&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Node <span class="title">qpow</span><span class="params">(Node x, LL k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node res = x;</span><br><span class="line">    k --;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * x;</span><br><span class="line">        x = x * x;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL ed = <span class="built_in">rnd</span>() % p + <span class="number">10</span>;</span><br><span class="line">    o.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>, o.a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    o.a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>, o.a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    o = <span class="built_in">qpow</span>(o, ed - <span class="number">2</span>);</span><br><span class="line">    LL x = (o.a[<span class="number">1</span>][<span class="number">1</span>] + o.a[<span class="number">2</span>][<span class="number">1</span>]) % mod, y = o.a[<span class="number">1</span>][<span class="number">1</span>] % mod;</span><br><span class="line">    <span class="keyword">if</span> (mp[&#123;x, y&#125;] &amp;&amp; mp[&#123;x, y&#125;] != ed) <span class="keyword">return</span> len = std::<span class="built_in">abs</span>(mp[&#123;x, y&#125;] - ed), <span class="literal">true</span>;</span><br><span class="line">    mp[&#123;x, y&#125;] = ed;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">LL minn;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">query</span><span class="params">(LL limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (limit &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    o.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>, o.a[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    o.a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>, o.a[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">    o = <span class="built_in">qpow</span>(o, limit - <span class="number">2</span>);</span><br><span class="line">    LL x = (o.a[<span class="number">1</span>][<span class="number">1</span>] + o.a[<span class="number">2</span>][<span class="number">1</span>]) % mod, y = o.a[<span class="number">1</span>][<span class="number">1</span>] % mod;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> c[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, c + <span class="number">1</span>), <span class="built_in">read</span>(mod);</span><br><span class="line">    <span class="keyword">if</span>(mod == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">check</span>());</span><br><span class="line">    n = <span class="built_in">strlen</span>(c + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        minn = (minn * <span class="number">10</span> + c[i] - <span class="string">&#x27;0&#x27;</span>) % len;</span><br><span class="line">    <span class="keyword">if</span>(minn == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(minn &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;1&quot;</span>), <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">write</span>(<span class="built_in">query</span>(minn));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BSGS"><a href="#BSGS" class="headerlink" title="BSGS"></a>BSGS</h3><p>考虑怎么用$BSGS$计算，一般来说题目中的模数都是质数，我们联想到上一个算法中矩阵快速幂，决定在这上面下文章，设转移矩阵为$A$，则我们的式子为：<br>$$<br>A^x \equiv I \pmod{p}<br>$$<br> $I$是单位矩阵，当$A$在模$p$意义下有逆矩阵时，我们就可以用$BSGS$愉快的求解了。</p><h2 id="其他的一些相关性质"><a href="#其他的一些相关性质" class="headerlink" title="其他的一些相关性质"></a>其他的一些相关性质</h2><p>根据网上一些巨佬的博客：</p><p>设其循环节长度为$len$</p><p>若$5$是模$p$意义下的二次剩余：$len  | p-1$</p><p>若$5$不是模$p$意义下的二次剩余：$len|2p+2$</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/05/04/test/"/>
      <url>/2022/05/04/test/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6b4b07d1e0535fb969038cb75a2498aaaf87e141cd3e7542392fd3f7e5e2a795"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APIO2007-动物园</title>
      <link href="/2022/05/02/APIO2007-%E5%8A%A8%E7%89%A9%E5%9B%AD/"/>
      <url>/2022/05/02/APIO2007-%E5%8A%A8%E7%89%A9%E5%9B%AD/</url>
      
        <content type="html"><![CDATA[<p>下个月就是<code>APIO</code>了，<code>07</code>年的题都不会，准备打铁了，在此<code>ORZ Qiuly</code>。</p><span id="more"></span><p>首先我们发现这题并不好搞，无论什么方法总有一点问题，它过不去（复杂度裂了，后效性处理不了····），然而这就是<code>APIO</code>的毒瘤之处了，读题你就得读个<code>7~8 mins</code>，然后瓜起。</p><p>好了，不说废话。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>通读题面多次，此题一个特别牛逼的地方在于一个人他是否高兴相关的点特别少（<code>5</code>个），且连续，题目还好心的告诉你每个人可视点单增，这足以说明一些问题（然而蒻如我并没有看出来），这道题可能可以动规。</p><p>考虑如何动规，我们尝试将状态每<code>5</code>个一组存下来，记起点为<code>st</code>，设数组<code>num[st][S]</code>强制定义为起点为<code>st</code>，<code>st,st+1,st+2,st+3,st+4</code>状态为<code>S</code>的贡献。</p><p>然后转移方程就显然了： <code>f[i][S]=max(f[i-1][(S&amp;15)&lt;&lt;1],f[i-1][(S &amp; 15) &lt;&lt; 1 | 1]) + num[i][S]</code>。</p><p>就结束了。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c= <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">write</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>, M = <span class="number">5e4</span> + <span class="number">5</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n, c;</span><br><span class="line"><span class="keyword">int</span> num[M][<span class="number">32</span>]; <span class="comment">// 从i位开始往后数4位的状态此时小朋友开心的个数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, fear, like, st, lk, dk;i &lt;= c;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        fear = like = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">read</span>(st, dk, lk);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>, a;j &lt;= dk;j ++)</span><br><span class="line">            <span class="built_in">read</span>(a), a = (a - st + n) % n, fear |= <span class="number">1</span> &lt;&lt; a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>, a;j &lt;= lk;j ++)</span><br><span class="line">            <span class="built_in">read</span>(a), a = (a - st + n) % n, like |= <span class="number">1</span> &lt;&lt; a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt;= <span class="number">31</span>;j ++)</span><br><span class="line">            <span class="keyword">if</span>(((fear &amp; j) &lt; fear) || ((like &amp; j) != <span class="number">0</span>)) num[st][j] ++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> f[M][<span class="number">32</span>], ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, c);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">32</span>;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(f[<span class="number">0</span>], <span class="number">128</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f[<span class="number">0</span>]));</span><br><span class="line">        f[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;j ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; <span class="number">32</span>;k ++)</span><br><span class="line">                f[j][k] = <span class="built_in">max</span>(f[j - <span class="number">1</span>][(k &amp; <span class="number">15</span>) &lt;&lt; <span class="number">1</span>], f[j - <span class="number">1</span>][(k &amp; <span class="number">15</span>) &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]) + num[j][k];</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[n][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">write</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> APIO </tag>
            
            <tag> dp </tag>
            
            <tag> 状态压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考点自检</title>
      <link href="/2022/04/27/%E8%80%83%E7%82%B9%E8%87%AA%E6%A3%80/"/>
      <url>/2022/04/27/%E8%80%83%E7%82%B9%E8%87%AA%E6%A3%80/</url>
      
        <content type="html"><![CDATA[<p>….</p><span id="more"></span><h1 id="线段树-and-树状数组"><a href="#线段树-and-树状数组" class="headerlink" title="线段树 and 树状数组"></a>线段树 and 树状数组</h1><p>作为全机房线段树最菜的，主要介绍一下经典题型（大家搞忘了还可以回去复习）：</p><h2 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h2><p>值域线段树，区间 <code>k</code> 大值上运用广泛。</p><p>具体拓展，在此引用省队巨佬和机房巨佬的话</p><ul><li>省队：能干他能干的事。</li><li>机房巨佬：它能干主席树能做的所有题。</li></ul><p>事实证明大家都会，就鸽了<code>QWQ</code></p><h2 id="李超线段树"><a href="#李超线段树" class="headerlink" title="李超线段树"></a>李超线段树</h2><p>$\log n$查询单点处，所有覆盖此点的线段在此的最大值或最小值。</p><h3 id="ex-李超上树（树链剖分）山东-OI-2016-游戏"><a href="#ex-李超上树（树链剖分）山东-OI-2016-游戏" class="headerlink" title="ex 李超上树（树链剖分）山东 OI 2016 游戏"></a>ex 李超上树（树链剖分）山东 OI 2016 游戏</h3><h2 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h2><h2 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h2><h2 id="树套树"><a href="#树套树" class="headerlink" title="树套树"></a>树套树</h2><p>关于平衡树的空间是个谜，最好开<code>2~3</code>倍$n\log n$。</p><h2 id="区间最大字段和"><a href="#区间最大字段和" class="headerlink" title="区间最大字段和"></a>区间最大字段和</h2><h2 id="区间取min-max"><a href="#区间取min-max" class="headerlink" title="区间取min/max"></a>区间取min/max</h2><h2 id="区间最大字段和-取min-max"><a href="#区间最大字段和-取min-max" class="headerlink" title="区间最大字段和+取min/max"></a>区间最大字段和+取min/max</h2><p>优化<code>dp</code>的部分留给张巨了。</p><p>至于树状数组，大家好像都会（本人也不知道还有什么拓展）。</p><p>拖一下时间，看道例题：</p><p><img src="3.png" alt="image"></p><p><code>n&lt;=1e5,1&lt;=a[i]&lt;=1e9</code></p><p>其实这类经典题目还挺多，没时间做了（想要的私聊）。</p><h1 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h1><p>优秀的空间，实质是将相同前缀的被匹配串的前缀合并。</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>关于字符串的都太老套了，大家先看一道题（<del>好像都没做过</del>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">给定一棵 n 个点的带权树，结点下标从 1 开始到 n。寻找树中找两个结点，求最长的异或路径。</span><br><span class="line"></span><br><span class="line">第一行一个整数 n，表示点数。</span><br><span class="line">接下来 n-1 行，给出 u,v,w ，分别表示树上的 u 点和 v 点有连边，边的权值是 w。</span><br><span class="line">1 ≤ n ≤ 100000，0≤w&lt;2^31</span><br></pre></td></tr></table></figure><p>详见<code>Solution</code></p><p>关于$Trie$套$hash$先鸽了，反正$hash$也是我讲。</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p><img src="1.png" alt="image"></p><p>没有<code>Solution</code></p><p>讲实在的，国赛都考不了这么毒瘤，如果有兴趣想继续冲一冲<code>luogu</code>月赛<code>AK</code>的可以去看一下。</p><p>这里只介绍链的情况，也就是<code>sub3</code></p><h3 id="梅开三度（Dyd最喜欢的）"><a href="#梅开三度（Dyd最喜欢的）" class="headerlink" title="梅开三度（Dyd最喜欢的）"></a>梅开三度（Dyd最喜欢的）</h3><p><img src="2.png" alt="image"></p><p><code>n &lt;= 3000</code></p><h1 id="笛卡尔树"><a href="#笛卡尔树" class="headerlink" title="笛卡尔树"></a>笛卡尔树</h1><p>一种非常特殊的搜索树，每个节点都有两个信息 $(x_i,y_i)$，如果只考虑<code>x</code> ，这就是一颗搜索树，只考虑<code>y</code>，它就是一个小根堆。</p><p>它有什么好处呢？</p><ul><li>$O(n)$建树（<del>题目时间复杂度允许$n \log n$的情况下，除了好写，就没得儿用（限制还多），用<code>Treap</code>硬刚得了</del>）</li></ul><p>对于忘了性质的同学，这里将笛卡尔树的性质放一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一个结点的左子树中的所有结点的第一个权值都小于其第一个权值（空子树也满足）；</span><br><span class="line"></span><br><span class="line">一个结点的右子树中的所有结点的第一个权值都大于其第一个权值（空子树也满足）；</span><br><span class="line"></span><br><span class="line">一个结点的两棵子树中的所有结点的第二个权值都大于其第二个权值（空子树也满足）。</span><br></pre></td></tr></table></figure><p>丑陋不堪的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, pos;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line">pos = top;</span><br><span class="line"><span class="keyword">while</span>(pos &amp;&amp; a[stk[pos]] &gt; a[i]) pos --;</span><br><span class="line"><span class="keyword">if</span>(pos) rs[stk[pos]] = i;</span><br><span class="line"><span class="keyword">if</span>(pos &lt; top) ls[i] = stk[pos + <span class="number">1</span>];</span><br><span class="line">stk[top = pos + <span class="number">1</span>] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于考点，请原谅本人学识短浅，实在没找到。</p><h1 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h1><p><code>AVL</code>不讲，因为不会（<del>本人只会<code>fhq-treap</code>和<code>Splay</code></del>），<del>想听<code>LCT</code>的也别想了</del>。</p><p>关于这个，<code>oi-wiki</code>上都没有独立的文章，鉴于大家至少会一种平衡树，直接讲应用。</p><h2 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h2><p>之前因学术不精，闹了些乌龙。</p><p>使用对象：加入<code>dp</code>方程的<code>x</code> 坐标不是单增时。</p><p>使用方法：按照 <code>x</code> 为第一关键字插入平衡树即可。</p><p>希望张巨多讲点。</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="https://www.luogu.com.cn/problem/P4027">[NOI2007] 货币兑换</a></p><ul><li>这题好像还可以用<code>cdq</code>。</li></ul><p><a href="https://www.luogu.com.cn/problem/P5468">[NOI2019] 回家路线</a></p><p><a href="https://www.luogu.com.cn/problem/P1721">[NOI2016] 国王饮水记</a></p><p><a href="https://www.luogu.com.cn/problem/P2305">[NOI2014] 购票</a></p><p>按难度排序（考的还蛮多的）。</p><h2 id="fhq-treap"><a href="#fhq-treap" class="headerlink" title="fhq-treap"></a>fhq-treap</h2><p><a href="https://luckyleaves.github.io/2022/01/01/%E5%B9%B3%E8%A1%A1%E6%A0%91/">安利一波个人博客</a></p><h2 id="后缀平衡树"><a href="#后缀平衡树" class="headerlink" title="后缀平衡树"></a>后缀平衡树</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给你一个字符串 init，要求你支持三个操作：</span><br><span class="line"></span><br><span class="line">    在当前字符串的后面插入若干个字符。</span><br><span class="line"></span><br><span class="line">    在当前字符串的后面删除若干个字符。</span><br><span class="line"></span><br><span class="line">    询问字符串 s 在当前字符串中出现了几次（作为连续子串）？</span><br><span class="line"></span><br><span class="line">你必须在线支持这些操作。</span><br></pre></td></tr></table></figure><p><del>这是神马？？</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;后缀平衡树&quot;这个名字正确性存疑，由于 clj 给的&quot;重量平衡树&quot;定义有歧义。</span><br><span class="line"></span><br><span class="line">字符串我也不会，所以也没去查证。                                 - by lxl</span><br></pre></td></tr></table></figure><p>并不在提高组考纲内，放在这儿仅供冲刺更毒瘤比赛的童鞋（请自主学习 <a href="https://www.luogu.com.cn/problem/P6164">luogu P6164</a>）。</p><h1 id="基环树"><a href="#基环树" class="headerlink" title="基环树"></a>基环树</h1><p>先来道例题：</p><p><a href="https://www.luogu.com.cn/problem/P4381">P4381 [IOI2008] Island</a></p><p><img src="4.png" alt="image"></p><p>总结一下，基环树主要考断环，以下三种方法比较经典。</p><ul><li>断环法（只断不粘）：[<a href="https://www.luogu.org/problemnew/show/P5022">2018 TG day2 T1</a>]</li><li>二次dp法：其实对于环，我们可以像环形dp一样将一条边强行断开处理一遍，然后强行连上再处理一遍，适用于：这样子跑满足正确性的（为什么不破环成链）：<a href="https://www.luogu.org/problemnew/show/P2607">ZJOI2008骑士</a></li><li>破环成链（二倍复制）：需要维护多个信息时比较好用：<a href="https://www.luogu.com.cn/problem/P4381">P4381 [IOI2008] Island</a></li></ul><h1 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h1><p>该来的，还是得来的。</p><p>事先声明，本人字符串学的并不好，有错误请不要大声喧哗，但还是要当面指出。</p><p>先说说如何卡hash。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li><a href="https://baike.baidu.com/item/%E7%94%9F%E6%97%A5%E6%94%BB%E5%87%BB/1005939?fr=aladdin">生日攻击</a><code>&amp;</code><a href="https://baike.baidu.com/item/%E9%B8%BD%E5%B7%A2%E5%8E%9F%E7%90%86">鸽巢原理</a>。</li></ul><h2 id="卡大质数hash-1000000009"><a href="#卡大质数hash-1000000009" class="headerlink" title="卡大质数hash (1000000009) :"></a>卡大质数hash (1000000009) :</h2><p>考虑生日攻击，随机一个$10^5$大小的字符串，询问长度为<code>L</code>的本质不同子串的数目，用大质数<code>hash</code>和后缀数组(也可以用自然溢出<code>hash</code>对拍，输出不同子串的终止位置，拿<code>fc</code>命令对比一下，找出<code>hash</code>值相等的不同子串，正确性如生日悖论，有超过<code>50%</code>的几率成功。</p><h2 id="卡自然溢出hash"><a href="#卡自然溢出hash" class="headerlink" title="卡自然溢出hash:"></a>卡自然溢出hash:</h2><p>自然溢出<code>hash</code>在数据随机的情况下正确性极高，因为它的值域很大, 很难生日攻击</p><p>考虑特殊构造：</p><h3 id="对于底数为偶数"><a href="#对于底数为偶数" class="headerlink" title="对于底数为偶数:"></a>对于底数为偶数:</h3><p>构造$aaaa\cdots aaaa$和 $baaa\cdots aaaa$两个长度相等且长度大于64的串。</p><p>底数的六十四次方以上溢出就会为零, <code>b</code>和<code>a</code>也会被判为相等。</p><h3 id="对于底数为奇数的"><a href="#对于底数为奇数的" class="headerlink" title="对于底数为奇数的"></a>对于底数为奇数的</h3><p>不会，不神仙构造根本卡不了。</p><p>综上所述，双<code>hash</code>永远的神（根本卡不了）。</p><p>废话讲完了，进入正题。</p><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><h3 id="T1-1"><a href="#T1-1" class="headerlink" title="T1"></a>T1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一行一个正整数n(n≤500 000)，表示S的长度。</span><br><span class="line"></span><br><span class="line">第二行n个小写英文字母，表示字符串S。</span><br><span class="line"></span><br><span class="line">第三行一个正整数q(q≤2 000 000)，表示询问次数。</span><br><span class="line"></span><br><span class="line">下面q行每行两个正整数a,b(1≤a≤b≤n),表示询问字符串S[a…b]的最短循环节长度。</span><br></pre></td></tr></table></figure><h3 id="T2-1"><a href="#T2-1" class="headerlink" title="T2:"></a>T2:</h3><p>记不到题号了，简单描述一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n 行，每行一个多元组。</span><br><span class="line">要求选出尽可能远的两个多元组，使得两个多元组满足：</span><br><span class="line">a1-b1=a2-b2=......=am-bm</span><br><span class="line">n*m&lt;=1e7</span><br></pre></td></tr></table></figure><h3 id="Trie-hash"><a href="#Trie-hash" class="headerlink" title="Trie+hash"></a>Trie+hash</h3><p><code>Trie</code>最常规的用法是压缩储存空间和优化查询速率，既然它可以体现路径，自然就可以被<code>hash</code>。</p><p><a href="https://www.luogu.com.cn/problem/P3879">P3879 [TJOI2010] 阅读理解</a></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>个人比较挫，讲的不好请见谅</p><h2 id="主席树-1"><a href="#主席树-1" class="headerlink" title="主席树"></a>主席树</h2><p>形式类似于逆序对数，考虑分治。</p><p>对于区间：<code>[l,r]</code>，找到其中的最大值<code>k</code>，对于问题<code>[l,k-1]</code>，<code>[k+1,r]</code>递归处理，对于本层，枚举<code>[l,k]</code>，主席树查询<code>[k,r]</code>中值$\le \frac{val[k]}{a[i]}$的数的个数。</p><p>有点卡常，这么写有点小问题，如果<code>k=l+1</code>，复杂度将为$O(n^2 \log n)$，加一个启发式合并即可做到稳定的$O(n \log^2 n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">write</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], root[N];</span><br><span class="line"><span class="keyword">namespace</span> pol&#123;</span><br><span class="line">    <span class="keyword">int</span> lg[N], f[N][<span class="number">22</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[x] &gt;= a[y] ? x : y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lg[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        lg[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) f[i][<span class="number">0</span>] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>;i &lt;= n;i ++) lg[i] = lg[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; <span class="number">22</span>;j ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n;i++)</span><br><span class="line">                f[i][j] = <span class="built_in">check</span>(f[i][j - <span class="number">1</span>], f[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">check</span>(f[l][lg[r - l + <span class="number">1</span>]], f[r - (<span class="number">1</span> &lt;&lt; lg[r - l + <span class="number">1</span>]) + <span class="number">1</span>][lg[r - l + <span class="number">1</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> seg&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> val, s[<span class="number">2</span>], sz;</span><br><span class="line">    &#125;tr[N * <span class="number">30</span>];</span><br><span class="line">    <span class="keyword">int</span> idx;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rt = ++ idx;</span><br><span class="line">        tr[rt] = tr[q];</span><br><span class="line">        tr[rt].sz ++;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[rt].val = val, rt;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(val &lt;= mid) tr[rt].s[<span class="number">0</span>] = <span class="built_in">insert</span>(tr[q].s[<span class="number">0</span>], l, mid, val);</span><br><span class="line">        <span class="keyword">else</span> tr[rt].s[<span class="number">1</span>] = <span class="built_in">insert</span>(tr[q].s[<span class="number">1</span>], mid + <span class="number">1</span>, r, val);</span><br><span class="line">        <span class="keyword">return</span> rt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> st, <span class="keyword">int</span> ed)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(st &gt; r || ed &lt; l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(st &lt;= l &amp;&amp; r &lt;= ed) <span class="keyword">return</span> tr[q].sz - tr[p].sz;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(st &lt;= mid) res += <span class="built_in">query</span>(tr[q].s[<span class="number">0</span>], tr[p].s[<span class="number">0</span>], l, mid, st, ed);</span><br><span class="line">        <span class="keyword">if</span>(ed &gt; mid) res += <span class="built_in">query</span>(tr[q].s[<span class="number">1</span>], tr[p].s[<span class="number">1</span>], mid + <span class="number">1</span>, r, st, ed);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r - l + <span class="number">1</span> &lt; <span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(r - l + <span class="number">1</span> == <span class="number">1</span>) <span class="keyword">return</span> ans += (b[a[l]] == <span class="number">1</span>), <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    <span class="keyword">int</span> mid = pol:: <span class="built_in">query</span>(l, r), st = l, ed = r;</span><br><span class="line">    <span class="built_in">calc</span>(l, mid - <span class="number">1</span>), <span class="built_in">calc</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">if</span>(mid - l &lt;= r - mid)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l, k;i &lt;= mid;i ++)</span><br><span class="line">            k = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + m + <span class="number">1</span>, b[a[mid]] / b[a[i]] + <span class="number">1</span>) - b - <span class="number">1</span>, </span><br><span class="line">            ans += seg:: <span class="built_in">query</span>(root[r], root[mid - <span class="number">1</span>], <span class="number">1</span>, m, <span class="number">1</span>, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = mid, k;i &lt;= r;i ++)</span><br><span class="line">            k = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + m + <span class="number">1</span>, b[a[mid]] / b[a[i]] + <span class="number">1</span>) - b - <span class="number">1</span>, </span><br><span class="line">            ans += seg:: <span class="built_in">query</span>(root[mid], root[l - <span class="number">1</span>], <span class="number">1</span>, m, <span class="number">1</span>, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]), b[i] = a[i];</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    m = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>) - b - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) a[i] = <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + m + <span class="number">1</span>, a[i]) - b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) root[i] = seg:: <span class="built_in">insert</span>(root[i - <span class="number">1</span>], <span class="number">1</span>, m, a[i]);</span><br><span class="line">    pol:: <span class="built_in">Init</span>();</span><br><span class="line">    <span class="built_in">calc</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">write</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Trie-1"><a href="#Trie-1" class="headerlink" title="Trie"></a>Trie</h2><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><p>首先$n^3$肯定不难，想办法进一步优化，发现异或的值在边上，我们将每一条边权向下压成点权，此时我们可以发现：<br>$$<br>val(x,y)=val(x,root) \ xor \ val(root, y)<br>$$<br>正确性显然（找到公共祖先展开即可），预处理点到根节点的异或值，$n^2$枚举即可。</p><p>但是发现出题人神似<code>lxl</code>，$n^2$依旧爆蛋，根据二进制题常见套路，按位贪心，于是我们枚举$x$之后就要快速找到和$x$取反差距最小（不同位之和最小）的值，此时我们将所有的$val(x,root)$建成一颗$Trie$树，从高位向低位贪心，尽可能取$!(x &gt;&gt;i \ and \ 1)$即可。</p><p>复杂度：$O(30n)$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">write</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[N &lt;&lt; <span class="number">1</span>], ne[N &lt;&lt; <span class="number">1</span>], h[N], w[N &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> a[N], s[N * <span class="number">30</span>][<span class="number">2</span>], cnt, ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    idx ++;</span><br><span class="line">    e[idx] = y, ne[idx] = h[x], h[x] = idx, w[idx] = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = h[x], j; ~i;i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(j == y) <span class="keyword">continue</span>;</span><br><span class="line">        a[j] = a[x] ^ w[i];</span><br><span class="line">        <span class="built_in">dfs</span>(j, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">30</span>; ~i;i --)</span><br><span class="line">        <span class="keyword">if</span>(!s[root][x &gt;&gt; i &amp; <span class="number">1</span>]) s[root][x &gt;&gt; i &amp; <span class="number">1</span>] = ++ cnt, root = cnt;</span><br><span class="line">        <span class="keyword">else</span> root = s[root][x &gt;&gt; i &amp; <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">30</span>; ~i;i --)</span><br><span class="line">        <span class="keyword">if</span>(s[root][!(x &gt;&gt; i &amp; <span class="number">1</span>)]) res += <span class="number">1</span> &lt;&lt; i, root = s[root][!(x &gt;&gt; i &amp; <span class="number">1</span>)];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[root][x &gt;&gt; i &amp; <span class="number">1</span>]) root = s[root][x &gt;&gt; i &amp; <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u, p;i &lt; n;i ++) <span class="built_in">read</span>(o, u, p), <span class="built_in">add</span>(o, u, p), <span class="built_in">add</span>(u, o, p);</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">insert</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) ans = <span class="built_in">max</span>(ans, <span class="built_in">query</span>(a[i]));</span><br><span class="line">    <span class="built_in">write</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回滚莫队-分治"><a href="#回滚莫队-分治" class="headerlink" title="回滚莫队+分治"></a>回滚莫队+分治</h3><p>严格意义上来讲，这题的链和上题没有区别。</p><p>首先将前缀异或和，后缀异或和给拉出来，建两颗<code>Trie</code>树，一颗查<code>1~i</code>，一颗查<code>i+1~n</code>即可。</p><p>反正都过不了，不打了。</p><p>令人不惊讶的是标题所指的表算被<code>lxl</code>踩爆了，在此放一个单$log$做法（<del>这玩也儿就可能考了</del>）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将两点间路径的亦或和转化为两点赋值的亦或后，不要急着求出每个子树的最大路径，而是先把全局最大路径先拉出来，这样再分类讨论就可以让每个节点的访问次数达到O(1)，于是就只剩下01trie的log</span><br><span class="line">这主要是因为，想知道树上某个联通块的最大路径，只需把联通块中所有点的赋值全部加入01trie，再对联通块中每个点的赋值分别在这个01trie中查询亦或最大，并取max即可</span><br></pre></td></tr></table></figure><p><del>考到就摆烂</del></p><h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h3><p>$n ^ 3$区间<code>dp</code>做法挺显然的，不丢人现眼了。</p><p>正解是伞兵随机化（<del>就因为数据随机？</del>），考虑原方程（<del>这不是一般人的区间<code>dp</code></del>）：<br>$$<br>f[i][j]=max_{k=1}^{i-1}(f[k][j-1]+sum[k+1][i])<br>$$<br>先拉一遍前缀异或和，<code>sum[i][k]</code>指从<code>i~k</code>中挑两个数，使其及其之间异或和最大。</p><p>当<code>sum</code>数组不变时，柿子变得极其简单，打标发现，sum，几乎不变，压缩<code>sum</code>，就做完了。</p><p>期望复杂度：$n^2 \log w+nk \log n$</p><p>证明：</p><p>由于数据随机生成，当我们插入一个数时，设此时已经插入 <code>m</code> 个数，这时候一共有 $\dfrac {(m+1)m} 2$ 个异或和，这个数可以贡献 $m$ 个异或和。即有 $\dfrac 2 {m+1}$ 的几率成为 $\max$，这个数贡献了 $\dfrac 2 {m+1}$ 的期望。</p><p>所以 $f_{i,k}$ 中的数的个数的期望为 $\sum_{i=1}^{n}\dfrac 2 {i}≈2\times\log n$，所以期望时间复杂度为 $O(n^2\log w+nk\log n)$。</p><p><code>QWQ</code></p><h2 id="基环树-1"><a href="#基环树-1" class="headerlink" title="基环树"></a>基环树</h2><ul><li>将森林中互相连通的部分缩起来。</li><li>每个连通块内一定有且仅有一个环，分环和链两类讨论（考虑经过根和不经过根，看起来貌似有些麻烦，可以破环成链，这样环上的距离就好处理了），求出联通块的直径。</li><li>将直径加起来。</li></ul><p>代码很久以前写的了，码风比较丑，就不展示了。</p><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><h3 id="T1-2"><a href="#T1-2" class="headerlink" title="T1"></a>T1</h3><p>首先明白一点，<code>500000</code>以内因数最多的数的因数有<code>288</code>个，我个人一定会专门拿一个点来全部询问这个区间，要解决这个问题也很简单，拿个<code>map</code>对记录询问答案即可，但事实是出题人良心没有这种数据，本人这个开<code>map</code>去重的二货给送进去了。</p><p>解法也十分简单：</p><p>预处理<code>hash</code>值，暴力从大到小枚举区间长度的因数，$O(1)$判断即可。</p><p>个人感觉这样写很妙：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">least[primes[j] * i] = <span class="built_in">min</span>(least[primes[j] * i], primes[j]);</span><br></pre></td></tr></table></figure><p>预处理质数时存下每个数的最大因数，后期就比较省力。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 特殊树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4841</title>
      <link href="/2022/04/20/P4841/"/>
      <url>/2022/04/20/P4841/</url>
      
        <content type="html"><![CDATA[<p>每日一题。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>观察模数可以发现原根为<code>３</code>，猜想做法为<code>NTT</code>，首先<code>n</code>个点的无向图的个数为$2^{\frac{n \times(n-1)}{2}}$（好像并无卵用），但是这样并不保证联通，那就设法使其联通，设<code>n</code>个点的无向连通图的个数为$f_n$，无向图的个数为$g_n$，则：<br>$$<br>g_n=\sum_{i=1}^{n}C_{n - 1}^{i-1}f_i*g_{n-i}<br>$$<br>若不好理解的话可以看作枚举<code>1</code>号节点连通块的大小，统计方案数。</p><p>然后我们将<code>g</code>展开。<br>$$<br>2^{C_{n}^{2}}=\sum_{i=1}^nC_{n - 1}^{i-1}f_i2^{C_{n - i}^{2}}\\<br>\frac{2^{C_{n}^{2}}}{(n-1)!}=\sum_{i=1}^n\frac{f_i}{(i-1)!}\frac{2^{C_{n-i}^2}}{(n-i)!}<br>$$<br>形式像卷积，那么定义：<br>$$<br>\begin{aligned}<br>F_x &amp;= \sum_{n = 1}\frac{f_n}{(n-1)!}x^n\\<br>G_x &amp;= \sum_{n=1}\frac{2^{C_n^2}}{n!}x^n\\<br>H_x &amp;= \sum_{n=1}\frac{2^{C_n^2}}{(n-1)!}x^n<br>\end{aligned}<br>$$<br>则 $H<em>F=G(mod x ^{n+1})$，<code>H，G</code>已知，再对<code>G</code>求个逆，$H</em>G^{-1}$就得到了$F$</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">write</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">5</span>, mod = <span class="number">1004535809</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> fac[N], inv[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * x % mod;</span><br><span class="line">        x = x * x % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = inv[<span class="number">0</span>] = fac[<span class="number">1</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++) </span><br><span class="line">        fac[i] = i * fac[i - <span class="number">1</span>] % mod, inv[i] = (mod - mod / i) * inv[mod % i] % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++) inv[i] = inv[i] * inv[i - <span class="number">1</span>] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> f[N], g[N], H[N], le[N];</span><br><span class="line"><span class="keyword">int</span> tot, bit;</span><br><span class="line"><span class="keyword">int</span> r[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> bit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; (<span class="number">1</span> &lt;&lt; bit);i ++)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> bit, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">calc</span>(bit);</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++) </span><br><span class="line">        <span class="keyword">if</span>(i &lt; r[i]) <span class="built_in">swap</span>(x[i], x[r[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> mid = <span class="number">1</span>, len, gn; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (mod - <span class="number">1</span>) / len);</span><br><span class="line">        <span class="keyword">if</span>(~op) gn = <span class="built_in">qpow</span>(gn, mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i += len)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>, a, b, g = <span class="number">1</span>;j &lt; mid;j ++, g = g * gn % mod)</span><br><span class="line">            &#123;</span><br><span class="line">                a = x[i + j], b = g * x[i + j + mid] % mod;</span><br><span class="line">                x[i + j] = (a + b) % mod;</span><br><span class="line">                x[i + j + mid] = (a - b + mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(~op) <span class="keyword">return</span> ;</span><br><span class="line">    op = <span class="built_in">qpow</span>(tot, mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++) x[i] = x[i] * op % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x %= mod) &lt; <span class="number">0</span> ? x + mod : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">get_inv</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">int</span> a[], <span class="keyword">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> c[N];</span><br><span class="line"><span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span> b[<span class="number">0</span>] = <span class="built_in">qpow</span>(a[<span class="number">0</span>], mod - <span class="number">2</span>), <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line"><span class="built_in">get_inv</span>(len &gt;&gt; <span class="number">1</span>, a, b);</span><br><span class="line"><span class="keyword">int</span> bit = <span class="number">0</span>, tot;</span><br><span class="line"><span class="keyword">while</span>((<span class="number">1</span> &lt;&lt; bit) &lt; (len &lt;&lt; <span class="number">1</span>)) bit ++;</span><br><span class="line">tot = (<span class="number">1</span> &lt;&lt; bit);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line"><span class="keyword">if</span>(i &lt; len) c[i] = a[i];</span><br><span class="line"><span class="keyword">else</span> c[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">NTT</span>(c, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(b, bit, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line">b[i] = <span class="built_in">Mod</span>(<span class="built_in">Mod</span>(<span class="number">2ll</span> - c[i] * b[i] % mod) * b[i]);</span><br><span class="line"><span class="built_in">NTT</span>(b, bit, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len;i &lt; tot;i ++) b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tot &lt;= n) tot &lt;&lt;= <span class="number">1</span>, bit ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        H[i] = <span class="built_in">qpow</span>(<span class="number">2</span>, i * (i - <span class="number">1</span>) / <span class="number">2</span>) * inv[i - <span class="number">1</span>] % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i ++)</span><br><span class="line">        g[i] = inv[i] * <span class="built_in">qpow</span>(<span class="number">2</span>, i * (i - <span class="number">1</span>) / <span class="number">2</span>) % mod;</span><br><span class="line">    <span class="built_in">get_inv</span>(tot, g, le);</span><br><span class="line">    <span class="built_in">NTT</span>(H, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(le, bit, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++) f[i] = H[i] * le[i] % mod;</span><br><span class="line">    <span class="built_in">NTT</span>(f, bit, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">write</span>(f[n] * fac[n - <span class="number">1</span>] % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
            <tag> luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4491 [HAOI2018]染色</title>
      <link href="/2022/04/15/P4491-HAOI2018-%E6%9F%93%E8%89%B2/"/>
      <url>/2022/04/15/P4491-HAOI2018-%E6%9F%93%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<p>多项式太弱了，每日一题。</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4491">题目传送门</a></p><p>考虑只有<code>k</code>个颜色满足条件，令其方案数为$G[k]$，则答案为：$\sum_{k=0}^{\min{m}{\frac{n}{S}}}G[k]<em>W[0]$，经过简单的数学分析我们可以推出一个假的$G[k]$，$G[k] = \dbinom{m}{k}<em>\dfrac{n!}{(S!)^k(n-S</em>k)!}</em>(n-S*k)^{m-k}$</p><p>可以发现这玩意儿绝对不可能是答案（不然这就是送分题了），不过为了下文打的简单，我们令其为 $F[k]$。</p><p>再次经过分类讨论可得（主要是不会）：$F[k]=\sum\limits_{i=k}^{n}\dbinom{i}{k}*G[i]$</p><p>又进行一次二项式反演：$G[k]=\sum\limits_{i=k}^n(-1)^{i-k}\dbinom{i}{k}F[i]$</p><p>暴力展开组合数可得：</p><p>$G[k]=\sum\limits_{i=k}^n(-1)^{i-k}\dfrac{i!}{k!(i-k)!}F[i]$</p><p>$G[k]*k!=\sum\limits_{i=k}^n\dfrac{(-1)^{i-k}}{(i-k)!}i!F[i]$</p><p>这可以明显地看到差卷积形式了。</p><p>设 $A[i]=i!*F[i],\ B[i]=\dfrac{(-1)^i}{i!}$</p><p>则有$G[k]=\frac{1}{k!}\sum\limits_{i=k}^nA[i]B[i-k]$</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">write</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">5</span>, mod = <span class="number">1004535809</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, s;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = x * res % mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        x = x * x % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> inv[N], p[N], a[N], b[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p[x] * inv[y] % mod * inv[x - y] % mod; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>, p[<span class="number">0</span>] = p[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="built_in">max</span>(n, m);i ++)</span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] * i % mod, inv[i] = (mod - mod / i) * inv[mod % i] % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="built_in">max</span>(n, m);i ++) inv[i] = inv[i] * inv[i - <span class="number">1</span>] % mod;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="built_in">min</span>(m, n / s);i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="built_in">C</span>(m, i) * p[n] % mod * <span class="built_in">qpow</span>(inv[s], i) % mod * inv[n - s * i] % mod * <span class="built_in">qpow</span>(m - i, n - s * i) % mod * p[i] % mod;</span><br><span class="line">        b[i] = (mod + (i &amp; <span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span>) * inv[i]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len, tot, bit, r[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line">        <span class="keyword">if</span>(i &lt; r[i]) <span class="built_in">swap</span>(x[i], x[r[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> mid = <span class="number">1</span>, gn, len;mid &lt; tot;mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (mod - <span class="number">1</span>) / len);</span><br><span class="line">        <span class="keyword">if</span>(~op) gn = <span class="built_in">qpow</span>(gn, mod - <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i += len)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>, g = <span class="number">1</span>, a, b;j &lt; mid;j ++, g = g * gn % mod)</span><br><span class="line">            &#123;</span><br><span class="line">                a = x[i + j], b = g * x[i + j + mid] % mod;</span><br><span class="line">                x[i + j] = (a + b) % mod;</span><br><span class="line">                x[i + j + mid] = (a - b + mod) % mod;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(~op) <span class="keyword">return</span> ;</span><br><span class="line">    op = <span class="built_in">qpow</span>(tot, mod - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++) x[i] = x[i] * op % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m, s);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    len = <span class="built_in">min</span>(m, n / s);</span><br><span class="line">    tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tot &lt;= len * <span class="number">2</span> + <span class="number">2</span>) tot &lt;&lt;= <span class="number">1</span>, bit ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line">        r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">reverse</span>(a, a + len + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">NTT</span>(a, <span class="number">1</span>), <span class="built_in">NTT</span>(b, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++) a[i] = a[i] * b[i] % mod;</span><br><span class="line">    <span class="built_in">NTT</span>(a, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(a, a + len + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, o;i &lt;= len;i ++)</span><br><span class="line">        <span class="built_in">read</span>(o), ans = (ans + a[i] * o % mod * inv[i]) % mod;</span><br><span class="line">    <span class="built_in">write</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 多项式 </tag>
            
            <tag> luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3538</title>
      <link href="/2022/04/13/P3538/"/>
      <url>/2022/04/13/P3538/</url>
      
        <content type="html"><![CDATA[<p>自己伞兵了。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>看见字符串循环节，果断<code>hash</code>，不会看图。</p><p><img src="1.png" alt="image"></p><p>之后记录每个数的最小质因子剪枝，别用<code>map</code>，然后就<code>A</code>了。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">Arg</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, Arg &amp;...com)</span></span>&#123; <span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt; <span class="number">9</span>) <span class="built_in">write</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, l, r;</span><br><span class="line"><span class="keyword">char</span> c[N];</span><br><span class="line"><span class="keyword">int</span> ne[N];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a[N], pw[N];</span><br><span class="line"><span class="keyword">int</span> primes[N], p[N], least[N], cnt, ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!p[i]) primes[++ cnt] = i, least[i] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; primes[j] * i &lt; N &amp;&amp; j &lt;= cnt;j ++)</span><br><span class="line">            p[primes[j] * i] = <span class="number">1</span>, least[primes[j] * i] = <span class="built_in">min</span>(least[primes[j] * i], primes[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a[r] - a[l - <span class="number">1</span>] * pw[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(least, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(least));</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, c + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(j &amp;&amp; c[j + <span class="number">1</span>] != c[i]) j = ne[j];</span><br><span class="line">        <span class="keyword">if</span>(c[j + <span class="number">1</span>] == c[i]) j ++;</span><br><span class="line">        ne[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] * <span class="number">31</span> + c[i];</span><br><span class="line">    pw[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        pw[i] = pw[i - <span class="number">1</span>] * <span class="number">31</span>;</span><br><span class="line">    <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(l, r);</span><br><span class="line">        ans = cnt = r - l + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(cnt &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">calc</span>(l, r - ans / least[cnt]) == <span class="built_in">calc</span>(l + ans / least[cnt], r)) ans /= least[cnt];</span><br><span class="line">            cnt /= least[cnt];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">write</span>(ans), <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 字符串 </tag>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.10 讲课</title>
      <link href="/2022/04/10/4-10-%E8%AE%B2%E8%AF%BE/"/>
      <url>/2022/04/10/4-10-%E8%AE%B2%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<p>rt.</p><span id="more"></span><h1 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h1><p>定义<code>n</code>维向量，将其写成矩阵的形式，就可以得到一堆线性方程，得到增广矩阵，然后<code>gauss</code>，消元。</p><p>但是当某一行可以被其他几行表示出来的时候，那么这一行就没有意义（向量意义上），那么消元后其中的非零行就为行秩。（列秩同理）</p><p>行秩数<code>=</code>列秩数，基底是极大线性无关组。</p><p>数域：含<code>0</code>，<code>1</code>，且有<code>+</code>，<code>*</code>，无论怎么操作都只剩下原域里的数。</p><p>如果只考虑<code>gauss</code>，时间复杂度太劣，且拓展性不强。</p><p>考虑一个一个的插入，那么当定义了$a_k$的第<code>k</code>位<code>1</code>时，后面插入的数的第<code>k</code>位都不能是<code>1</code>，所以就直接异或$a_k$，同理就每插入一个数，就让它异或上线性基的每一个元素，如果还剩下有值，就插入。</p><p>如果让求一个数列中的某一些数异或后的最大值，就从最大值开始一个一个加入（），</p><p>最小瓶颈生成树。</p><p>（然后啥都听不懂了）</p><h1 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h1><p>矩阵树定理（听不懂了，开摆）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 听课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1641C</title>
      <link href="/2022/04/08/CF1641C/"/>
      <url>/2022/04/08/CF1641C/</url>
      
        <content type="html"><![CDATA[<p><code>CF</code>的题就是牛逼。</p><span id="more"></span><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p><a href="https://codeforces.com/problemset/problem/1641/C">题目传送门</a></p><p>题目大意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">病人数：n，操作数：m</span><br><span class="line">对于一排病人， 医生可以做三种操作：</span><br><span class="line"></span><br><span class="line">    1.l, r, 0 表示第 l 到 r 个人中没有病人</span><br><span class="line">    2.l, r, 1 表示第 l 到 r 个人中至少有一个病人生病</span><br><span class="line">    3.询问第 j 个病人有没有生病</span><br><span class="line"></span><br><span class="line">对于每一个操作 3 ， 可以确定生病输出 YES , 可以确定不生病输出 NO , 否则输出 N/A</span><br><span class="line">每一次首先输入一个数t，t=0则为第1、2种操作，t=1则为第3种操作</span><br></pre></td></tr></table></figure><p>首先将序列：<code>1-n</code>定义为<code>unknow</code>，可以发现一个人<code>x</code>可以被确定为病人当且仅当有一个操作<code>2</code>的区间中除了<code>x</code>以外的所有数都不是病人（<del>废话</del>），那么我们用一个<code>set</code>维护那些人可能是病人，于是我们可以快速查找到<code>x</code> 前第一个<code>unknow</code>：<code>st</code>和下一个<code>unknow</code>：<code>ed</code>，可以发现操作<code>2</code>中如果有区间满足：<br>$$<br>st \textless l \le x ,x\le r \textless ed<br>$$<br>那么<code>x</code>就是病人，此时问题已经转化到序列上，我们造一颗线段树维护以<code>x</code>为起点的操作<code>2</code>的最小<code>r</code>，那么我们就可以直接查询$[st+1,x]$这段区间，判断之中的最小值是否小于<code>ed</code>就可以了。</p><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, T;</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="keyword">namespace</span> Seg&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> l(x) (x &lt;&lt; 1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> r(x) (x &lt;&lt; 1 | 1)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> l, r, v;</span><br><span class="line">    &#125;tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tr[x].v = <span class="built_in">min</span>(tr[<span class="built_in">l</span>(x)].v, tr[<span class="built_in">r</span>(x)].v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tr[x].v = <span class="built_in">min</span>(tr[x].v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tr[x] = &#123;l, r, n + <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        <span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">pushup</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tr[x].l == tr[x].r) <span class="keyword">return</span> <span class="built_in">change</span>(x, w);</span><br><span class="line">        <span class="keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid) <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span>, l, r, w);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, w);</span><br><span class="line">        <span class="built_in">pushup</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= tr[x].l &amp;&amp; tr[x].r &lt;= r) <span class="keyword">return</span> tr[x].v;</span><br><span class="line">        <span class="keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="number">1</span>, res = n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= mid) res = <span class="built_in">min</span>(res, <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span>, l, r));</span><br><span class="line">        <span class="keyword">if</span>(r &gt; mid) res = <span class="built_in">min</span>(res, <span class="built_in">query</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    Seg:: <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n + <span class="number">1</span>;i ++) s.<span class="built_in">insert</span>(i);</span><br><span class="line">    <span class="keyword">int</span> op, l, r, x;</span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;x);</span><br><span class="line">            <span class="keyword">if</span>(x == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    x = *s.<span class="built_in">lower_bound</span>(l);</span><br><span class="line">                    <span class="keyword">if</span>(x &gt; r) <span class="keyword">break</span>;</span><br><span class="line">                    s.<span class="built_in">erase</span>(x);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> Seg:: <span class="built_in">modify</span>(<span class="number">1</span>, l, r, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            <span class="keyword">if</span>(!s.<span class="built_in">count</span>(x)) <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">auto</span> st = s.<span class="built_in">lower_bound</span>(x), ed = s.<span class="built_in">upper_bound</span>(x);</span><br><span class="line">                st --;</span><br><span class="line">                <span class="keyword">if</span>(Seg:: <span class="built_in">query</span>(<span class="number">1</span>, (*st) + <span class="number">1</span>, x) &lt; *ed) <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;N/A&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结</title>
      <link href="/2022/03/28/%E6%80%BB%E7%BB%93/"/>
      <url>/2022/03/28/%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><code>online</code>裂开了，开始写总结了。</p><span id="more"></span><h2 id="3月"><a href="#3月" class="headerlink" title="3月"></a>3月</h2><h3 id="27"><a href="#27" class="headerlink" title="27"></a>27</h3><p>乱搞[NOI2019] 弹跳建图，结果不清楚<code>bitset</code>的时间复杂度，拿了个暴力分（QWQ），正解做法还行：迪杰斯特拉最短路，在最短路的队列中加入自身拓展费用时，被拓展到的点就是最优点，对于每一个点，树套树暴力将拓展点找出来，应为每个点都只入队一遍，查找一遍，所以时间复杂度为：$O(n \log^2n + n\log n)$。</p><h2 id="28"><a href="#28" class="headerlink" title="28"></a>28</h2><p>比赛被吊锤，T1找规律$40$，心灰意冷去刚T2，猜中一个性质，没有可以直接得到的部分分，还是觉得自己行了（非洲人从来没猜中过），疯狂利用性质乱搞（再次吐槽<code>dev-c++</code>调试和记录垃圾删除只有那么好用了，我谢谢你！），没冲出来，交上去后才发现<code>freopen</code>打错了，T2爆弹，当时应该去拿$O(n^2)$部分分的，在此<code>orz</code>PigAunt，记录一下$O(n)$求逆元（还是太菜了）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inv[i] = 1ll * (mod - mod / i) * inv[mod % i] % mod</span><br></pre></td></tr></table></figure><p>莫名跳到一道[SCOI2010]连续攻击游戏，看着熟悉的题面和不熟悉的数据范围，敢情没算法可做啊，疑惑的点开难度，蓝的，胡了个匈牙利$O(nm),n=10000,m=100000$，一交，它过了（震惊我一整年）!</p><h2 id="4月"><a href="#4月" class="headerlink" title="4月"></a>4月</h2><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>前面的总结鸽了，实在想不起来到底干了啥，今天又考试（我谢谢你），第一看到那个离谱的数据范围，觉得有那么一点点规律，上去胡了一个$O(n^2)$<code>dp</code>，发现<code>f</code>数组满足斐波拉契数列，于是问题转化为$\sum_{i=0}^n(f[i])^k \mod p$，总所周知斐波拉契数列在$mod \ p$意义下有循环节，但那个<code>k</code>次是真的有点瘆人，想搓手多项式暴力拆项，搞不动，看出了<code>k=1或2</code>的规律，没有可以直接得到的部分分（出题人，我谢谢你），后面两题是真的不想写了，每道题冲了个带部分分的暴力就润了，考后还发现$T_2$暴力写挂了（QWQ），<code>85-&gt;65</code>，寄了。</p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p>中午没睡午觉（该死的疫情），下午想睡的不行，昨天的阴间考试一道题不想改，去做了套<code>CF</code>，只能说<code>B</code>比较没水平，放道大暴力在那儿，难码的一批，考试又拼手速，差评，不过<code>C</code>的质量挺高的，转化的确没想出来。</p><h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><p>最近有些颓废，随机开了道题：</p><p><a href="https://www.luogu.com.cn/problem/P3538">P3538 [POI2012]OKR-A Horrible Poem</a></p><p>看见字符串循环节，果断<code>hash</code>。</p><p>然后查询次数（$2 \times10^6$）把我整不会了，果断查了查$2 \times 10^6$以内因数最多的数的因数个数：<code>288</code>个，果断放弃，死磕结论无果，点开标签发现<code>hash</code>，马上想到出题人绝对会卡，于是怼了个<code>map</code>，保证不可能有重复查询区间，记录每个数的最小质因子剪枝，打完自信一交，<code>TLE</code>，疯狂优化无果，觉得随机数据，删了<code>map</code> 再交，<code>AC</code>，出题人，谁给你的自信最坏情况<code>400000000</code>开<code>1s</code>的？</p><h3 id="15"><a href="#15" class="headerlink" title="15"></a>15</h3><p>继续颓废，用极低的效率开始学习多项式。</p><p>总结一下知识点：</p><ul><li>$A[i] \times B[j]$的答案卷积后会被贡献到$C[i+j]$中</li><li>$G[k]=\sum\limits_{i=k}^n(-1)^{i-k}\dbinom{i}{k}F[i]$等价于$F[k]=\sum\limits_{i=k}^{n}\dbinom{i}{k}*G[i]$</li></ul><h3 id="20"><a href="#20" class="headerlink" title="20"></a>20</h3><p>调过了<a href="https://www.luogu.com.cn/problem/P4841">城市规划</a>，实在不想写博客了，就在这里<del>口胡一下做法</del>（算了，太长了）。</p><h3 id="21"><a href="#21" class="headerlink" title="21"></a>21</h3><p>有种不祥的预感<code>APIO</code>要打铁，开始训练，卡在<code>07</code>的状压<code>dp</code>上，心态崩了<code>QWQ</code>。</p><p>以后写树套树的时候空间开<code>4*nlogn</code>，垃圾桶记得清儿子的信息。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bitset</title>
      <link href="/2022/03/27/bitset/"/>
      <url>/2022/03/27/bitset/</url>
      
        <content type="html"><![CDATA[<p>卡常，卡怪神器，支持一大堆牛逼操作。</p><span id="more"></span><p>时间：$O(\frac {x}{w})$，<code>x</code>是原时间，<code>w</code>是计算机位数。</p><p>空间：$O(\frac{x}{w})$，<code>x</code>是原空间，<code>w</code>是计算机位数。</p><p>这在卡常方面有一大堆有用的效果，尤其在高维偏序有一大堆的应用。</p><p>讲点实际的：</p><h2 id="P5471-NOI2019-弹跳"><a href="#P5471-NOI2019-弹跳" class="headerlink" title="P5471 [NOI2019] 弹跳"></a><a href="https://www.luogu.com.cn/problem/P5471">P5471 [NOI2019] 弹跳</a></h2><p>当然，这题<code>bitset</code>，肯定是过不了的，但是理论上只要数据范围再良心一点，就没有问题（假掉了，以为$bitset$的单次操作或是$O(1)$ 的）。</p><p>思路：首先可以发现，如果我们知道每个点可以跳到哪些点的时候（即边数$n \log n$ 可跑时）最短路就可以解决一切问题，那么我们按照最短路的思路，考虑怎么找到那些点在范围内，我们可以将<code>x</code>轴和<code>y</code>轴都建成一颗<code>fhq-treap</code>，中间用<code>bitset</code>，存储有哪些点在范围内，两颗<code>bitset</code>合并出来的结果就是我们所求的，而且<code>bitset</code>还有一个函数：<code>_Find_first()</code>，找到从低位到高位的第一个1，之后将找到的数删去即可。</p><p>复杂度：$O(n log^2(n) \frac{n}{w} + \frac{n^2}{w})$(好像还不如暴力)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间dp</title>
      <link href="/2022/03/24/%E5%8C%BA%E9%97%B4dp/"/>
      <url>/2022/03/24/%E5%8C%BA%E9%97%B4dp/</url>
      
        <content type="html"><![CDATA[<p>讲课，ps</p><span id="more"></span><h1 id="什么是区间dp"><a href="#什么是区间dp" class="headerlink" title="什么是区间dp"></a>什么是区间dp</h1><p>区间 $dp$ 就是在区间上进行动态规划，求解一段区间上的最优解。主要是通过合并小区间的最优解进而得出整个大区间上最优解的 $dp$ 算法（实际上不需要是最优解）。</p><h2 id="石子合并问题"><a href="#石子合并问题" class="headerlink" title="石子合并问题"></a>石子合并问题</h2><p>有若干个石子排成一行，每个石子有一定的质量，现在要将它们合并成一堆，每一次合并产生的价值是两堆石子的质量和（只能合并相邻的石子），求最大/最小价值。</p><p>以最小值为例，对于这个问题，如果我们用$f_{i, j}$表示从$i$到$j$的代价最小值，那么这一块区域可以被分割成两个小的区域，通过不断调整分割点，我们就可以找到$f_{i, j}$，转移方程如下：<br>$$<br>f_{i, j} = \min(f_{i, j}, f_{i, k} + f_{k + 1, j} + s[j] - s[i - 1]) (i \le k &lt; j)<br>$$<br>初始值：<br>$$<br>f_{i, i} = 0<br>$$<br>时间复杂度$O(n ^ 3)$。</p><p>如果石子排成了一个环呢？</p><h2 id="环形石子合并问题"><a href="#环形石子合并问题" class="headerlink" title="环形石子合并问题"></a>环形石子合并问题</h2><p>一般来说，有下面几种转换方法：</p><ol><li>把环变成链，枚举那个缺口，时间复杂度$O(n ^ 4)$；</li><li>考虑到变成环之后，问题转换为求$n$条链上的石子合并问题，那么可以把长度为$n$的链拆开，复制一次，变成长度为$2n$的链，用石子合并的方法求出$f_{i, j}$后，求出$\min(f_{i, i + n - 1})$，时间复杂度$O(8n ^ 3)$；</li></ol><p>显然第二种更好。</p><h2 id="洛谷-P1880-NOI1995-石子合并"><a href="#洛谷-P1880-NOI1995-石子合并" class="headerlink" title="洛谷-P1880-[NOI1995] 石子合并"></a><a href="https://www.luogu.com.cn/problem/P1880">洛谷-P1880-[NOI1995] 石子合并</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">205</span>, PosInf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N], s[N], f[N][N], g[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j)</span><br><span class="line">                f[i][i] = g[i][i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                f[i][j] = PosInf;</span><br><span class="line">                g[i][j] = -PosInf;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">        a[i + n] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n * <span class="number">2</span>; i++)</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= n; len++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l + len - <span class="number">1</span> &lt;= n * <span class="number">2</span>; l++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r = l + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt; r; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                f[l][r] = std::<span class="built_in">min</span>(f[l][r], f[l][k] + f[k + <span class="number">1</span>][r] + s[r] - s[l - <span class="number">1</span>]);</span><br><span class="line">                g[l][r] = std::<span class="built_in">max</span>(g[l][r], g[l][k] + g[k + <span class="number">1</span>][r] + s[r] - s[l - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wMin = PosInf, wMax = -PosInf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; l++)</span><br><span class="line">    &#123;</span><br><span class="line">        wMin = std::<span class="built_in">min</span>(wMin, f[l][l + n - <span class="number">1</span>]);</span><br><span class="line">        wMax = std::<span class="built_in">max</span>(wMax, g[l][l + n - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; wMin &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; wMax &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题拓展"><a href="#问题拓展" class="headerlink" title="问题拓展"></a>问题拓展</h3><h2 id="AcWing-320-能量项链"><a href="#AcWing-320-能量项链" class="headerlink" title="AcWing-320-能量项链"></a><a href="https://www.acwing.com/problem/content/322/">AcWing-320-能量项链</a></h2><p>本题和前面的合并略有不同，待合并的两个区间不是由点构成，而是由点与点之间的空隙构成。因此区间长度至少是3，至多是$n + 1$，且断点$k$不能和左端点相等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">205</span>, PosInf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N], f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">        a[i + n] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">3</span>; len &lt;= n + <span class="number">1</span>; len++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l + len - <span class="number">1</span> &lt;= n * <span class="number">2</span>; l++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r = l + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = l + <span class="number">1</span>; k &lt; r; k++)</span><br><span class="line">                f[l][r] = std::<span class="built_in">max</span>(f[l][r], f[l][k] + f[k][r] + a[l] * a[k] * a[r]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> wMax = -PosInf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; l++)</span><br><span class="line">        wMax = std::<span class="built_in">max</span>(wMax, f[l][l + n]);</span><br><span class="line">    std::cout &lt;&lt; wMax &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LibreOJ-10149-凸多边形的划分"><a href="#LibreOJ-10149-凸多边形的划分" class="headerlink" title="LibreOJ-10149-凸多边形的划分"></a><a href="https://loj.ac/p/10149">LibreOJ-10149-凸多边形的划分</a></h2><p>可以将一个多边形的划分拆为三部分：左，中（三角形），右。最小价值即为这三者的价值和，于是可以发现转移方程和能量项链类似：<br>$$<br>f_{i, j} = \min(f_{i, j}, f_{i, k} + f{k, j} + w_i w_k w_j)<br>$$<br>注意，本题数据较大，需要做高精度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>, M = <span class="number">35</span>, PosInf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, w[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[N][N][M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a[], <span class="keyword">long</span> <span class="keyword">long</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> c[M];</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(c));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t += a[i] + b[i];</span><br><span class="line">        c[i] = t % <span class="number">10</span>;</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(a, c, <span class="built_in"><span class="keyword">sizeof</span></span>(c));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mul</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a[], <span class="keyword">long</span> <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> c[M];</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(c));</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t += a[i] * b;</span><br><span class="line">        c[i] = t % <span class="number">10</span>;</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(a, c, <span class="built_in"><span class="keyword">sizeof</span></span>(c));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Comp</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a[], <span class="keyword">long</span> <span class="keyword">long</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = M - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; b[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &lt; b[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        std::cin &gt;&gt; w[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> temp[M];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">3</span>; len &lt;= n + <span class="number">1</span>; len++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l + len - <span class="number">1</span> &lt;= n; l++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r = l + len - <span class="number">1</span>;</span><br><span class="line">            f[l][r][M - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = l + <span class="number">1</span>; k &lt; r; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">memset</span>(temp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(temp));</span><br><span class="line">                temp[<span class="number">0</span>] = w[l];</span><br><span class="line">                <span class="built_in">Mul</span>(temp, w[k]);</span><br><span class="line">                <span class="built_in">Mul</span>(temp, w[r]);</span><br><span class="line">                <span class="built_in">Add</span>(temp, f[l][k]);</span><br><span class="line">                <span class="built_in">Add</span>(temp, f[k][r]);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Comp</span>(f[l][r], temp) &gt; <span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">memcpy</span>(f[l][r], temp, <span class="built_in"><span class="keyword">sizeof</span></span>(temp));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k = M - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; f[<span class="number">1</span>][n][k] == <span class="number">0</span>)</span><br><span class="line">        k--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        std::cout &lt;&lt; f[<span class="number">1</span>][n][i];</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-479-加分二叉树"><a href="#AcWing-479-加分二叉树" class="headerlink" title="AcWing-479-加分二叉树"></a><a href="https://www.acwing.com/problem/content/481/">AcWing-479-加分二叉树</a></h2><p>这个题乍一看似乎和动态规划没有关系，但我们仔细分析“中序”，可以发现，正如区间中用点分割，中序遍历中，左右子树和根正好可以通过区间型动态规划的经典处理方式划分。因此用$f_{i, j}$表示中序遍历为输入数组的$i$到$j$位的二叉树中加分的最大值，但由于要输出具体方案，还要用$g_{i, j}$表示中序遍历为输入数组的$i$到$j$位的二叉树的根的序号。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, w[N];</span><br><span class="line"><span class="keyword">int</span> f[N][N], g[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> root = g[l][r];</span><br><span class="line">    std::cout &lt;&lt; root &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">Print</span>(l, root - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Print</span>(root + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        std::cin &gt;&gt; w[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= n; len++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l + len - <span class="number">1</span> &lt;= n; l++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r = l + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (len == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                f[l][r] = w[l];</span><br><span class="line">                g[l][r] = l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt;= r; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> subl = (k == l) ? <span class="number">1</span> : f[l][k - <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">int</span> subr = (k == r) ? <span class="number">1</span> : f[k + <span class="number">1</span>][r];</span><br><span class="line">                    <span class="keyword">int</span> score = subl * subr + w[k];</span><br><span class="line">                    <span class="keyword">if</span> (f[l][r] &lt; score)</span><br><span class="line">                    &#123;</span><br><span class="line">                        f[l][r] = score;</span><br><span class="line">                        g[l][r] = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; f[<span class="number">1</span>][n] &lt;&lt; std::endl;</span><br><span class="line">    <span class="built_in">Print</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DCOJ2008-蜜雪冰城"><a href="#DCOJ2008-蜜雪冰城" class="headerlink" title="DCOJ2008. 蜜雪冰城"></a><a href="http://dcoj/problem/2008">DCOJ2008. 蜜雪冰城</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>, M = <span class="number">4005</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[M], b[M], c[M];</span><br><span class="line"><span class="keyword">int</span> f[N][N][M], g[N][N][M];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">int</span> cnt[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(cnt));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= a[i] &amp;&amp; b[i] &lt;= r &amp;&amp; a[i] &lt;= k &amp;&amp; k &lt;= b[i]) cnt[c[i]] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ba[N][N][M], reba[N][N][M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wh = ba[l][r][id];</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= wh - <span class="number">1</span>) <span class="built_in">out</span>(l, ba[l][r][id] - <span class="number">1</span>, reba[l][wh - <span class="number">1</span>][id]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, s[id - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(wh + <span class="number">1</span> &lt;= r) <span class="built_in">out</span>(wh + <span class="number">1</span>, r, reba[wh + <span class="number">1</span>][r][id]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++) cin &gt;&gt; a[i] &gt;&gt; b[i] &gt;&gt; c[i], s.<span class="built_in">push_back</span>(c[i]);</span><br><span class="line">    <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">    s.<span class="built_in">erase</span>(<span class="built_in">unique</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>()), s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++) c[i] = <span class="built_in">lower_bound</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), c[i]) - s.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l = n;l &gt;= <span class="number">1</span>;l --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r = l;r &lt;= n;r ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = l, sum;k &lt;= r;k ++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">init</span>(l, r, k);</span><br><span class="line">                sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = s.<span class="built_in">size</span>(), ans;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum += cnt[i];</span><br><span class="line">                    ans = sum * s[i - <span class="number">1</span>] + g[l][k - <span class="number">1</span>][i] + g[k + <span class="number">1</span>][r][i];</span><br><span class="line">                    <span class="keyword">if</span>(ans &gt; f[l][r][i] || !f[l][r][i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        f[l][r][i] = ans;</span><br><span class="line">                        ba[l][r][i] = k;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = s.<span class="built_in">size</span>();k &gt;= <span class="number">1</span>;k --)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(f[l][r][k] &gt; g[l][r][k + <span class="number">1</span>] || !g[l][r][k + <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    g[l][r][k] = f[l][r][k];</span><br><span class="line">                    reba[l][r][k] = k;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    g[l][r][k] = g[l][r][k + <span class="number">1</span>];</span><br><span class="line">                    reba[l][r][k] = reba[l][r][k + <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, g[<span class="number">1</span>][n][<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">out</span>(<span class="number">1</span>, n, reba[<span class="number">1</span>][n][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AcWing-321-棋盘分割"><a href="#AcWing-321-棋盘分割" class="headerlink" title="AcWing-321-棋盘分割"></a><a href="https://www.acwing.com/problem/content/323/">AcWing-321-棋盘分割</a></h2><p>先来一波推导。<br>$$<br>ans^2=\dfrac{\sum_{i=1}^{n}(x_i -\overline x)}{n}\ =\dfrac1n(\sum_{i=1}^n(x_i^2-2x_i\overline x+\overline x^2))<br>$$</p><p>$$<br>=\dfrac1n(\sum_{i=1}^nx_i^2-2\overline x\sum_{i=1}^nx_i+n \overline x^2)<br>$$</p><p>$$<br>=\dfrac {\sum_{i=1}^nx_i^2}n-\overline x^2<br>$$</p><p>本题的划分分为横向和纵向，同时区间也由一维扩展到了二维，因此实现时可以用记忆化搜索的方式减少代码量。用$f_{x1, y1, x2, y2, k}$表示$(x1, y1)$到$(x2, y2)$这个二维区间分割$k$次的最小均方差，那么这个区间可以横向或纵向划分，且可以任意选取划分后的两个子区间，按照这个逻辑，可以写出下面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> m = <span class="number">8</span>, M = <span class="number">9</span>, N = <span class="number">20</span>, PosInf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, s[M][M];</span><br><span class="line"><span class="keyword">double</span> f[M][M][M][M][N];</span><br><span class="line"><span class="keyword">double</span> average;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = s[x2][y2] - s[x2][y1 - <span class="number">1</span>] - s[x1 - <span class="number">1</span>][y2] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> (sum - average) * (sum - average) / n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">Search</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> &amp;v = f[x1][y1][x2][y2][k];</span><br><span class="line">    <span class="keyword">if</span> (v &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> v = <span class="built_in">Calc</span>(x1, y1, x2, y2);</span><br><span class="line"></span><br><span class="line">    v = PosInf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x1; i &lt; x2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(x1, y1, i, y2, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(i + <span class="number">1</span>, y1, x2, y2));</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(i + <span class="number">1</span>, y1, x2, y2, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(x1, y1, i, y2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = y1; i &lt; y2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(x1, y1, x2, i, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(x1, i + <span class="number">1</span>, x2, y2));</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(x1, i + <span class="number">1</span>, x2, y2, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(x1, y1, x2, i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cin &gt;&gt; s[i][j];</span><br><span class="line">            s[i][j] += s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    average = (<span class="keyword">double</span>)s[m][m] / n;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; std::fixed &lt;&lt; std::<span class="built_in">setprecision</span>(<span class="number">3</span>) &lt;&lt; <span class="built_in">sqrt</span>(<span class="built_in">Search</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>, n)) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="洛谷-P1436-棋盘分割"><a href="#洛谷-P1436-棋盘分割" class="headerlink" title="洛谷-P1436-棋盘分割"></a><a href="https://www.luogu.com.cn/problem/P1436">洛谷-P1436-棋盘分割</a></h2><p>这个跟上面一题其实是一样的，经过数学推导，上题求均方差，也就是求平方和，但均方差可以直接求。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> m = <span class="number">8</span>, M = <span class="number">9</span>, N = <span class="number">20</span>, PosInf = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, s[M][M];</span><br><span class="line"><span class="keyword">double</span> f[M][M][M][M][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = s[x2][y2] - s[x2][y1 - <span class="number">1</span>] - s[x1 - <span class="number">1</span>][y2] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> sum * sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Search</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> &amp;v = f[x1][y1][x2][y2][k];</span><br><span class="line">    <span class="keyword">if</span> (v &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> v = <span class="built_in">Calc</span>(x1, y1, x2, y2);</span><br><span class="line"></span><br><span class="line">    v = PosInf;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x1; i &lt; x2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(x1, y1, i, y2, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(i + <span class="number">1</span>, y1, x2, y2));</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(i + <span class="number">1</span>, y1, x2, y2, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(x1, y1, i, y2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = y1; i &lt; y2; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(x1, y1, x2, i, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(x1, i + <span class="number">1</span>, x2, y2));</span><br><span class="line">        v = std::<span class="built_in">min</span>(v, <span class="built_in">Search</span>(x1, i + <span class="number">1</span>, x2, y2, k - <span class="number">1</span>) + <span class="built_in">Calc</span>(x1, y1, x2, i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cin &gt;&gt; s[i][j];</span><br><span class="line">            s[i][j] += s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">Search</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>, n) &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间型动态规划的两种实现方式"><a href="#区间型动态规划的两种实现方式" class="headerlink" title="区间型动态规划的两种实现方式"></a>区间型动态规划的两种实现方式</h2><h3 id="迭代式（推荐）"><a href="#迭代式（推荐）" class="headerlink" title="迭代式（推荐）"></a>迭代式（推荐）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len &lt;= n; len++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l + len - <span class="number">1</span> &lt;= n; l++)</span><br><span class="line">    &#123;</span><br><span class="line">        r = l + len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt; r; k++)</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="记忆化搜索式（适合状态定义较为复杂的情况）"><a href="#记忆化搜索式（适合状态定义较为复杂的情况）" class="headerlink" title="记忆化搜索式（适合状态定义较为复杂的情况）"></a>记忆化搜索式（适合状态定义较为复杂的情况）</h3><p>如果状态定义中数组维数太多，需要些很多重循环，这时可以用记忆化搜索的形式来写。</p><h2 id="2D-1D-的四边形不等式优化"><a href="#2D-1D-的四边形不等式优化" class="headerlink" title="2D/1D 的四边形不等式优化"></a>2D/1D 的四边形不等式优化</h2><p> $2D/1D$ $dp$ 的方程模型如下：<br>$$<br>d[i, j] = \min_{l(i, j) \le k \le r(k, j)} (d[i, k] + d[k + 1, j] + val(i, j))<br>$$</p><p>其中 $2D$ 指枚举的状态数， $1D$ 指枚举的决策数，最典型的是区间 $dp$ ，明显，直接 $dp$ 时间为 $O(n^3)$ （一定要注意 $val(i, j)$ 与 $k$ 无关）</p><p><strong>警告！下面的证明都很繁琐且没啥用（完全不影响做题），可以只记结论</strong></p><h3 id="2D-状态四边形不等式判定"><a href="#2D-状态四边形不等式判定" class="headerlink" title="2D 状态四边形不等式判定"></a>2D 状态四边形不等式判定</h3><p>对于 $2D/1D$ $dp$ 的方程：<br>$$<br>d[i, j] = \min_{l(i, j) \le k \le r(k, j)} (d[i, k] + d[k + 1, j] + val(i, j))<br>$$<br>若 $val$ 满足<strong>四边形不等式</strong>和<strong>区间包含单调性</strong>， $d$ 满足 $d[i, i] =  val(i, i) = 0$ ，且 $i \le l(i, j) \le r(i, j) &lt; j$ 则 $d[i, j]$ 满足四边形不等式</p><p>证明（又臭又长）：</p><p>当 $j = i + 1$ 时， $d[i, j + 1] + d[i + 1, j] = d[i, i + 2] + d[i + 1, i + 1]$ ，又因为 $d[i + 1, i + 1] = 0$ ，故 $d[i, j + 1] + d[i + 1, j] = d[i, i + 2]$ </p><p>由于 $i \le l(i, j) \le r(i, j) &lt; j$ ， $d[i, i + 2]$ 的决策最多只有 $i$ 和 $i + 1$ </p><ol><li><p>若 $d[i, i + 2]$ 的最优决策为 $i + 1$ ，则<br>$$<br>d[i, i + 2] = d[i, i + 1] + d[i + 2, i + 2] + val(i, i + 2) = d[i, i + 1] + val(i, i + 2)<br>$$<br> ，发现 $d[i, i + 1]$ 的决策只有 $i$ ，故 $d[i, i + 1] = d[i, i] + d[i + 1, i + 1] + val(i, i + 1) = val(i, i + 1)$ ，综合两式，有 $d[i, i + 2] = val(i, i + 1) + val(i, i + 2) = d[i, j + 1] + d[i + 1, j]$  </p><p>同样因为 $d[i, i] = 0$ ，有 $d[i, i + 1] + d[i + 1, i + 2] = val(i, i + 2) + val(i + 1, i + 2) = d[i, j] + d[i + 1, j + 1]$ </p><p>由于 $val$ 满足四边形不等式，有 $val(i, i + 1) + val(i, i + 2) \ge val(i, i + 1) + val(i + 1, i + 2)$ </p><p>故 $d[i, j + 1] + d[i + 1, j] \ge d[i, j] + d[i + 1, j + 1]$ ，即 $d$ 满足四边形不等式</p></li><li><p>若 $d[i, i + 2]$ 的最优决策为 $i$  ，同理有<br>$$<br>d[i, i + 2] = d[i, i] + d[i + 1, i + 2] + val(i, i + 2) = d[i + 1, i + 2] + val(i, i + 2) = val(i + 1, i + 2) + val(i, i + 2)<br>$$<br>$d[i + 1, i + 2] + d[i, i + 1] = val(i + 1, i + 2) + val(i, i + 1) = d[i + 1, j + 1] + d[i, j]$ </p><p>同样由 $val$ 满足四边形不等式，得 $d[i, j + 1] + d[i + 1, j] \ge d[i, j] + d[i + 1, j + 1]$ </p></li></ol><p>综上，当 $j = i + 1$ ，即 $j - i = 1$ 时， $d$ 满足四边形不等式</p><p>假设当 $j - i &lt; k$ 时四边形不等式成立，下面证明 $j - i = k$ 时成立</p><p>设 $d[i, j + 1]$ 最优决策为 $x$ ， $d[i + 1, j]$ 最优决策为 $y$  </p><p>有等式 $(1)$ ：<br>$$<br>d[i, j + 1] + d[i + 1, j] = d[i, x] + d[x + 1, j + 1] + val(i, j + 1) + d[i + 1, y] + d[y + 1, j] + val(i + 1, j)<br>$$<br>而对于 $d[i, j]$ 和 $d[i + 1, j + 1]$ ，  $x, y$ 就不一定是最优决策了</p><p>当 $x \le y$ 时，取 $x$ 为 $d[i, j]$ 的决策， $y$ 为 $d[i + 1, j + 1]$ 的决策，由不优得不等式 $(2)$ ：<br>$$<br>d[i, x] + d[x + 1, j] + val(i, j) + d[i + 1, y] + d[y + 1, j + 1] + val(i + 1, j + 1) \ge d[i, j] + d[i + 1, j + 1]<br>$$<br> $(1) + (2)$ 得 $(3)$ ：<br>$$<br>\begin{aligned}<br>d[i, x] + d[x + 1, j] + val(i, j) + d[i + 1, y] + d[y + 1, j + 1] + val(i + 1, j + 1) + d[i, j + 1] + d[i + 1, j] &amp; \ge d[i, j] + d[i + 1, j + 1] + d[i, x] + d[x + 1, j + 1] + val(i, j + 1) + d[i + 1, y] + d[y + 1, j] + val(i + 1, j) \\<br>d[x + 1, j] + d[i + 1, y] + d[y + 1, j + 1] + d[i, j + 1] + d[i + 1, j] + val(i, j) + val(i + 1, j + 1) &amp; \ge d[i, j] + d[i + 1, j + 1] + d[x + 1, j + 1] + d[y + 1, j] + val(i, j + 1) + val(i + 1, j) \\<br>\end{aligned}<br>$$<br>有 $x + 1 \le y + 1 \le j &lt; j + 1$ ，由归纳假设，有 $d[x + 1, j + 1] + d[y + 1, j] \ge d[x + 1, j] + d[y + 1, j + 1]$ ，结合 $val$ 满足四边形不等式，与 $(3)$ 比较得：<br>$$<br>d[i, j + 1] + d[i + 1, j] \ge d[i, j] + d[i + 1, j + 1]<br>$$<br>则 $j - i = k$ 时满足四边形不等式；</p><p>当 $x \ge y$ 时，取 $y$ 为 $d[i, j]$ 的决策， $x$ 为 $d[i + 1, j + 1]$ 的决策，同理可证得 $j - i = k$ 时满足四边形不等式</p><p>由数学归纳法原理，原命题得证</p><p>QED</p><h3 id="2D-决策单调性定理"><a href="#2D-决策单调性定理" class="headerlink" title="2D 决策单调性定理"></a>2D 决策单调性定理</h3><p>对于 2D/1D dp 的方程：<br>$$<br>d[i, j] = \min_{l(i, j) \le k \le r(k, j)} (d[i, k] + d[k + 1, j] + val(i, j))<br>$$<br>记 $d[i, j]$ 的最优决策点为 $bp[i, j]$ ，若 $\forall i &lt; j$ 有 $bp[i, j - 1] \le bp[i, j] \le bp[i + 1, j]$ ，则称 $d$ 具有决策单调性</p><p>若 $d$ 满足 $d[i, i] =  val(i, i) = 0$ ， $i \le l(i, j) \le r(i, j) &lt; j$ ，且 $d$ 满足四边形不等式，则 $d$ 具有决策单调性</p><p>证明：</p><p>记 $p = bp[i, j]$ ，则 $\forall i &lt; k \le p$ ，因为 $d$ 满足四边形不等式，有：<br>$$<br>\begin{aligned}<br>d[i, p] + d[i + 1, k] &amp; \ge d[i, k] + d[i + 1, p] \\<br>d[i + 1, k] - d[i + 1, p] &amp; \ge d[i, k] - d[i, p] \\<br>\end{aligned}<br>$$<br>又由 $p$ 的最优性（带 dp 方程消去 $val$ 可得）：<br>$$<br>\begin{aligned}<br>d[i, k] + d[k + 1, j] &amp; \ge d[i, p] + d[p + 1, j] \\<br>d[i, k] - d[i, p] + d[k + 1, j] - d[p + 1, j] &amp; \ge 0 \\<br>\end{aligned}<br>$$<br>考虑对于 $d[i + 1, j]$ 用 $k$ 为决策减用 $p$ 为决策：<br>$$<br>\begin{aligned}<br>&amp; (d[i + 1, k] + d[k + 1, j] + val(i + 1, j)) - (d[i + 1, p] + d[p + 1, j] + val(i + 1, j)) \\<br>= &amp; (d[i + 1, k] - d[i + 1, p]) + (d[k + 1, j] - d[p + 1, j]) \\<br>\ge &amp; (d[i, k] - d[i, p]) + (d[k + 1, j] - d[p + 1, j]) \\<br>\ge &amp; 0<br>\end{aligned}<br>$$<br>也就是说，对于 $d[i + 1, j]$ ， $p$ 比任意 $k \le p$ 更优，故 $bp[i + 1, j] \ge bp[i, j]$ ，同理可证明 $bp[i, j - 1] \le bp[i, j]$ </p><p>QED</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p> 2D/1D 的实现没有 1D/1D 那么花里胡哨，就是直接记录 $bp$ ，对于 $d[i, j]$ ，只在 $bp[i, j - 1] \le k \le bp[i + 1, j]$ 的范围枚举 $k$ 维护 $d, bp$ </p><p>时间也很好分析：<br>$$<br>\begin{aligned}<br>&amp; \sum _{i = 1}^{n - 1} \sum _{j = i + 1}^{n} (bp[i + 1, j] - bp[i, j - 1] + 1) \\<br>= &amp; \sum _{i = 1} ^ {n - 1} (bp[i + 1, n] - bp[1, n - i] + n - i) \\<br>\le &amp; n^2<br>\end{aligned}<br>$$<br>故时间复杂度优化到了 $O(n^2)$ </p><p>你可能觉得似乎没有 1D/1D 优化的厉害，但其实， 1D/1D 状态数是 $O(n)$ 的，四边形不等式把转移从 $O(n)$ 优化到了 $O(\log n)$ （斜率优化在最简单的情况下可以优化到 $O(1)$ ，最麻烦情况下只有 $O(\log^2 n)$ ）；而 2D/1D 状态数是 $O(n^2)$ 的，四边形不等式把转移从 $O(n)$ 直接优化到 $O(1)$ ，作为<strong>对转移的优化</strong>，已经非常优秀了（事实上，如果你不考虑重新设计状态/排除无用状态， $O(n^2)$ 已经是最好复杂度了）</p><p>最后提醒一点：以上的复杂度分析都没有考虑计算 $val$ 的复杂度！（这一点从例题十中也能看出）</p><h2 id="例题十一"><a href="#例题十一" class="headerlink" title="例题十一"></a>例题十一</h2><p><a href="https://www.acwing.com/problem/content/307/">一个古老的石头游戏</a></p><p>题意同“石子合并”，但要求 $O(n^2)$ ，太经典了，就是板子</p><p>话说好像有 $O(n \log n)$ 做法，但那和我们要讲的没关系了……</p><p>艹，好像数据加强了， $O(n^2)$ 过不了了！ shit ！</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>呃呃，还要思路吗？</p><p>写个方程吧：设 $d[i, j]$ 表示“合并区间 $[i, j]$ 的最小代价”，转移有：<br>$$<br>d[i, j] = \min _{i \le k &lt; j} (d[i, k] + d[k + 1, j]) + \sum _{t = i}^j a _t<br>$$<br> $val(i, j)$ 显然可以前缀和做到 $O(1)$ </p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5000</span> + <span class="number">5</span>, INF = <span class="number">1e9</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[N], d[N][N], bp[N][N];</span><br><span class="line">LL sum[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n), n; sum[<span class="number">0</span>] = <span class="number">0</span>, <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, d[<span class="number">1</span>][n]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), sum[i] = sum[i - <span class="number">1</span>] + a[i], d[i][i] = <span class="number">0</span>, bp[i][i] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; ++len)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j, k; i &lt;= n; ++i)</span><br><span class="line">                <span class="keyword">for</span> (d[i][j = i + len - <span class="number">1</span>] = INF, k = bp[i][j - <span class="number">1</span>]; k &lt;= bp[i + <span class="number">1</span>][j] &amp;&amp; k &lt; j; ++k)</span><br><span class="line">                    <span class="keyword">if</span> (d[i][k] + d[k + <span class="number">1</span>][j] + sum[j] - sum[i - <span class="number">1</span>] &lt; d[i][j]) d[i][j] = d[i][bp[i][j] = k] + d[k + <span class="number">1</span>][j] + sum[j] - sum[i - <span class="number">1</span>];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 区间dp </tag>
            
            <tag> 讲课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蒲公英</title>
      <link href="/2022/03/18/%E8%92%B2%E5%85%AC%E8%8B%B1/"/>
      <url>/2022/03/18/%E8%92%B2%E5%85%AC%E8%8B%B1/</url>
      
        <content type="html"><![CDATA[<p>经典的区间众数（分块永远的神）。</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4168">蒲公英</a></p><p> 考虑分块，令块的大小为 $ \frac{n}{len}$，则一共就有 $len$ 块，预处理出从 $l$  到 $r$ 的区间数的个数和区间众数。</p><p>对于查询，将答案区间分为三部分：$[l,hh)$，$[hh, tt]$，$(tt, r]$ 即将区间分成散块和整块，那么答案只可能是散块中的数或整块中的数。</p><ul><li>当答案的贡献仅来自于整块时，一定是已经与处理好的整块众数。</li><li>如果不是，说明答案一定在散块中存在过，直接扫描散块，然后查询即可。</li></ul><p>关于 $len$ 的取值，考虑时间复杂度为：$O(NT^2 + MN/T)$，空间复杂度为：$O(NT^2)$，不妨设$M=N$，此时可以发现 $T = \sqrt [3] {N}$ 复杂度分配较为平均，可以通过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> last, ans, res;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">40</span>][<span class="number">40</span>], a[N], seg[<span class="number">40</span>][<span class="number">40</span>][N];</span><br><span class="line"><span class="keyword">int</span> len, limit;</span><br><span class="line"><span class="keyword">int</span> pos[N], l[N], r[N], num[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; d;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> st, <span class="keyword">int</span> ed, <span class="keyword">int</span> &amp;hh, <span class="keyword">int</span> &amp;tt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i ++)</span><br><span class="line">        <span class="keyword">if</span>(st &lt;= l[i] &amp;&amp; r[i] &lt;= ed) </span><br><span class="line">        &#123; hh = i; <span class="keyword">break</span>; &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">        <span class="keyword">if</span>(st &lt;= l[i] &amp;&amp; r[i] &lt;= ed)</span><br><span class="line">        &#123; tt = i; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]), d.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    <span class="built_in">sort</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>());</span><br><span class="line">    d.<span class="built_in">erase</span>(<span class="built_in">unique</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>()), d.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) a[i] = <span class="built_in">lower_bound</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), a[i]) - d.<span class="built_in">begin</span>() + <span class="number">1</span>;</span><br><span class="line">    limit = n / (<span class="built_in">cbrt</span>(n) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; len * limit) r[len] = i - <span class="number">1</span>, len ++, l[len] = i;</span><br><span class="line">        pos[i] = len;</span><br><span class="line">    &#125;</span><br><span class="line">    r[len] = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= len;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i, ans;j &lt;= len;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = l[i];k &lt;= r[j];k ++)</span><br><span class="line">            &#123;</span><br><span class="line">                seg[i][j][a[k]] ++;</span><br><span class="line">                <span class="keyword">if</span>(seg[i][j][a[k]] == ans) s[i][j] = <span class="built_in">min</span>(s[i][j], a[k]);</span><br><span class="line">                <span class="keyword">if</span>(seg[i][j][a[k]] &gt; ans) ans = seg[i][j][a[k]], s[i][j] = a[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> st, ed, hh, tt;</span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(st), <span class="built_in">read</span>(ed);</span><br><span class="line">        st = (st + last - <span class="number">1</span>) % n + <span class="number">1</span>, ed = (ed + last - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(st &gt; ed) <span class="built_in">swap</span>(st, ed);</span><br><span class="line">        hh = tt = <span class="number">0</span>;</span><br><span class="line">        ans = res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">ask</span>(st, ed, hh, tt);</span><br><span class="line">        <span class="keyword">if</span>(hh) <span class="keyword">for</span>(<span class="keyword">int</span> i = st;i &lt; l[hh];i ++) num[a[i]] ++;</span><br><span class="line">        <span class="keyword">if</span>(tt) <span class="keyword">for</span>(<span class="keyword">int</span> i = r[tt] + <span class="number">1</span>;i &lt;= ed;i ++) num[a[i]] ++;</span><br><span class="line">        <span class="keyword">if</span>(!hh &amp;&amp; !tt) <span class="keyword">for</span>(<span class="keyword">int</span> i = st;i &lt;= ed;i ++) num[a[i]] ++;</span><br><span class="line">        ans = num[s[hh][tt]] + seg[hh][tt][s[hh][tt]], res = s[hh][tt];</span><br><span class="line">        <span class="keyword">if</span>(hh &amp;&amp; tt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = st;i &lt; l[hh];i ++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(num[a[i]] + seg[hh][tt][a[i]] == ans) res = <span class="built_in">min</span>(res, a[i]);</span><br><span class="line">                <span class="keyword">if</span>(num[a[i]] + seg[hh][tt][a[i]] &gt; ans) ans = num[a[i]] + seg[hh][tt][a[i]], res = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = r[tt] + <span class="number">1</span>;i &lt;= ed;i ++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(num[a[i]] + seg[hh][tt][a[i]] == ans) res = <span class="built_in">min</span>(res, a[i]);</span><br><span class="line">                <span class="keyword">if</span>(num[a[i]] + seg[hh][tt][a[i]] &gt; ans) ans = num[a[i]] + seg[hh][tt][a[i]], res = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = st;i &lt;= ed;i ++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(num[a[i]] == ans) res = <span class="built_in">min</span>(res, a[i]);</span><br><span class="line">                <span class="keyword">if</span>(num[a[i]] &gt; ans) ans = num[a[i]], res = a[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        last = d[res - <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, last);</span><br><span class="line">        <span class="keyword">if</span>(hh) <span class="keyword">for</span>(<span class="keyword">int</span> i = st;i &lt; l[hh];i ++) num[a[i]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(tt) <span class="keyword">for</span>(<span class="keyword">int</span> i = r[tt] + <span class="number">1</span>;i &lt;= ed;i ++) num[a[i]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!hh &amp;&amp; !tt) <span class="keyword">for</span>(<span class="keyword">int</span> i = st;i &lt;= ed;i ++) num[a[i]] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 分块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小割树</title>
      <link href="/2022/03/16/%E6%9C%80%E5%B0%8F%E5%89%B2%E6%A0%91/"/>
      <url>/2022/03/16/%E6%9C%80%E5%B0%8F%E5%89%B2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>考试时再一次撞到了，依旧不会，爆蛋（<del>小编不理解啊</del>）</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>先看看它是干什么的：将一个无向图转化成树，满足树上任意两点的最小割等于原图的最小割。</p><p>抄抄定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">定义一棵树T为最小割树，如果对于树上的所有边(s,t)，树上去掉(s,t)后产生的两个集合恰好是原图上(s,t)的最小割把原图分成的两个集合，且边(u,v)的权值等于原图上(u,v)的最小割</span><br></pre></td></tr></table></figure><p>这时我们就需要构造最小割树，我们得知 $dinic$ 的最后一次增广会以最小割的代价将图割开，此时 我们考虑分治：</p><p>​    <img src="1.png"></p><p>定义 $val[x][y]$ 为 $x$ 和 $y$ 之间的最小割。</p><p>可以发现，$val[x][y] = min(min(val[x][S],val[S][T]),val[T][y])$。证明据巨佬说不显然，有兴趣的童鞋可以上网查一查。</p><p>之后就可以在当前点集随意选取两个点 $u,v$，在原图上跑出他们之间的最小割，然后就在树上连一条从 $u$ 到 $v$,权值为 $val[u][v]$的边，之后递归处理即可。</p><p>时间复杂度：$O(n^3m)$ 然而根本跑不满。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500</span> + <span class="number">5</span>, M = <span class="number">6000</span> + <span class="number">5</span>, Inf = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">namespace</span> flow&#123;</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> e[M], ne[M], h[N];</span><br><span class="line">    <span class="keyword">int</span> w[M];</span><br><span class="line">    <span class="keyword">int</span> S, T;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        idx ++;</span><br><span class="line">        e[idx] = y, ne[idx] = h[x], h[x] = idx, w[idx] = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addage</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">add</span>(x, y, z), <span class="built_in">add</span>(y, x, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> depth[N], now[N];</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(depth, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(depth));</span><br><span class="line">        <span class="built_in">memcpy</span>(now, h, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line">        depth[S] = <span class="number">1</span>;</span><br><span class="line">        queue&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">        q.<span class="built_in">push</span>(S);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> o = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = h[o]; ~i;i = ne[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> j = e[i];</span><br><span class="line">                <span class="keyword">if</span>(depth[j] || !w[i]) <span class="keyword">continue</span>;</span><br><span class="line">                depth[j] = depth[o] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(T == j) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == T || !last) <span class="keyword">return</span> last;</span><br><span class="line">        <span class="keyword">int</span> rest = last, k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = now[x]; ~i &amp;&amp; rest;i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            now[x] = i;</span><br><span class="line">            <span class="keyword">if</span>(depth[j] == depth[x] + <span class="number">1</span> &amp;&amp; w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                k = <span class="built_in">dfs</span>(j, <span class="built_in">min</span>(w[i], rest));</span><br><span class="line">                <span class="keyword">if</span>(!k) </span><br><span class="line">                &#123;</span><br><span class="line">                    depth[j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                w[i] -= k;</span><br><span class="line">                w[i ^ <span class="number">1</span>] += k;</span><br><span class="line">                rest -= k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> last - rest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= idx;i += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            w[i] += w[i ^ <span class="number">1</span>];</span><br><span class="line">            w[i ^ <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        S = s, T = t;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">bfs</span>())</span><br><span class="line">            <span class="keyword">while</span>(res = <span class="built_in">dfs</span>(S, Inf)) ans += res;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[N][N];</span><br><span class="line"><span class="keyword">namespace</span> Seg&#123;</span><br><span class="line">    <span class="keyword">int</span> id[N];</span><br><span class="line">    <span class="keyword">int</span> q[N], p[N];</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> e[M], ne[M], h[N], w[M];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        idx ++;</span><br><span class="line">        e[idx] = y, ne[idx] = h[x], h[x] = idx, w[idx] = z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addage</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">add</span>(x, y, z), <span class="built_in">add</span>(y, x, z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">int</span> num = flow:: <span class="built_in">dinic</span>(id[l], id[r]), st = id[l], ed = id[r];</span><br><span class="line">        ans[id[l]][id[r]] = ans[id[r]][id[l]] = num;</span><br><span class="line">        <span class="keyword">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l;i &lt;= r;i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(flow:: depth[id[i]]) q[++ hh] = id[i];</span><br><span class="line">            <span class="keyword">else</span> p[++ tt] = id[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= hh;i ++) id[i + l - <span class="number">1</span>] = q[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= tt;i ++) id[i + hh + l - <span class="number">1</span>] = p[i];</span><br><span class="line">        <span class="built_in">build</span>(l, l + hh - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">build</span>(l + hh, r);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= hh;i ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>, o, u;j &lt;= tt;j ++)</span><br><span class="line">            &#123;</span><br><span class="line">                o = id[i + l - <span class="number">1</span>], u = id[j + hh + l - <span class="number">1</span>];</span><br><span class="line">                ans[o][u] = ans[u][o] = <span class="built_in">min</span>(<span class="built_in">min</span>(ans[o][st], ans[st][ed]), ans[ed][u]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(ans));</span><br><span class="line">    <span class="built_in">memset</span>(flow:: h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(flow:: h));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, o, u, z;i &lt;= m;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;o, &amp;u, &amp;z);</span><br><span class="line">        flow:: <span class="built_in">addage</span>(o, u, z);</span><br><span class="line">        flow:: <span class="built_in">addage</span>(u, o, z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i ++) Seg:: id[i] = i;</span><br><span class="line">    Seg:: <span class="built_in">build</span>(<span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">    <span class="keyword">while</span>(q --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> o, u;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;o, &amp;u);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[o][u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 最大流 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APIO2014 Split the sequence</title>
      <link href="/2022/02/15/APIO2014-Split-the-sequence/"/>
      <url>/2022/02/15/APIO2014-Split-the-sequence/</url>
      
        <content type="html"><![CDATA[<p>学不动了，做到<em>dp</em>都不顺利<em>QWQ</em>。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>可以证明：切的顺序和答案无关。</p><p>伪证明：对于最后块为$a,b,c$的切法共三种：<br>$$<br>\begin{aligned}<br>1.&amp;(a+b)c+ab=ac+ab+bc \\<br>2.&amp;(a+c)b+ac=ac+ab+bc<br>\end{aligned}<br>$$<br>然后推广（本人数学不太好，只会找规律）</p><p>然后<em>dp</em>方程就显然了：<br>$$<br>f[i][k]=f[j][k-1]+s<a href="s%5Bi%5D-s%5Bj%5D">j</a>，s[i]= \sum_1^ia[i]<br>$$<br>观察数据范围发现无法通过此题。</p><p>考虑优化：因为下一层的答案一定只可能由本层推出，所以令本层的答案为：$g[i]$，下一层的答案：$f[i]$。</p><p>当对于<em>i</em>来说取<em>j</em>比取<em>k</em>优秀时：<br>$$<br>\begin{aligned}<br>&amp;g[j]+s<a href="s%5Bi%5D-s%5Bj%5D">j</a>&gt;g[k]+s<a href="s%5Bi%5D-s%5Bk%5D">k</a>\\<br>&amp;\frac{g[j]-s[j]*s[j]-(g[k]-s[k]*s[k])}{-s[j]-(-s[k])}&gt;s[i]<br>\end{aligned}<br>$$<br>所以每个点都可以表示为：$(-s[j],g[j]-s[j]*s[j])$。</p><p>用斜率优化即可。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span> + <span class="number">5</span>, M = <span class="number">1e6</span> + <span class="number">5</span>, Inf = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line">LL g[N], f[N], hh = <span class="number">1</span>, tt = <span class="number">0</span>, q[N];</span><br><span class="line">LL s[N];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_k</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL y1 = g[x] - s[x] * s[x], y2 = g[y] - s[y] * s[y];</span><br><span class="line">    LL x1 = -s[x], x2 = -s[y];</span><br><span class="line">    <span class="keyword">if</span>(x1 == x2) <span class="keyword">return</span> - Inf;</span><br><span class="line">    <span class="keyword">return</span> (y1 - y2) / (<span class="keyword">double</span>)(x1 - x2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> from[<span class="number">205</span>][N];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x - y) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= m;k ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) g[i] = f[i];</span><br><span class="line">        hh = <span class="number">1</span>, tt = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(hh &lt; tt &amp;&amp; <span class="built_in">compare</span>(<span class="built_in">get_k</span>(q[hh], q[hh + <span class="number">1</span>]), s[i]) != <span class="number">1</span>) hh ++;</span><br><span class="line">            from[k][i] = q[hh];</span><br><span class="line">            f[i] = g[q[hh]] + s[i] * s[q[hh]] - s[q[hh]] * s[q[hh]];</span><br><span class="line">            <span class="keyword">while</span>(hh &lt; tt &amp;&amp; <span class="built_in">compare</span>(<span class="built_in">get_k</span>(q[tt], q[tt - <span class="number">1</span>]), <span class="built_in">get_k</span>(q[tt - <span class="number">1</span>], i)) != <span class="number">-1</span>) tt --;</span><br><span class="line">            q[++ tt] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, f[n]);</span><br><span class="line">    ans = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, from[i][ans]);</span><br><span class="line">        ans = from[i][ans];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 斜率优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ynoi2015 盼君勿忘</title>
      <link href="/2022/02/14/Ynoi2015-%E7%9B%BC%E5%90%9B%E5%8B%BF%E5%BF%98/"/>
      <url>/2022/02/14/Ynoi2015-%E7%9B%BC%E5%90%9B%E5%8B%BF%E5%BF%98/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P5072">题目传送门</a></p><p><em>Ynoi</em>为数不多的可做的题（因为一个垃圾错误，调了一天，<del>醉了</del>）。</p><p>在此，<em>orz</em> wfy。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><em>lxl</em>的题，观察题面可以发现，没有修改操作，再审视题面，我们可以得到每一个相同数对区间的贡献：<br>$$<br>\begin{aligned}<br>ans += (2^{length} - 2^{length - k}) * a[i]<br>\end{aligned}<br>$$<br>区间总长度为$length$，$a[i]$在区间中出现的次数为$k$次。</p><p>证明：考虑简单容斥，总的方案数为$2^{length}$，不取$a[i]$的情况共$2^{length-k}$种，由于子序列已经去重，所以$a[i]$的贡献就为：$(2^{length} - 2^{length - k}) * a[i]$。</p><p>想到这里，不难看出这道题较为适合用莫队解决，但是由于区间长度在改变，修改操作并不是很好进行，我们考虑将每个数的出现次数分块，总区间中出现次数$&gt; \sqrt n$的数单独统计次数（其数量一定小于$\sqrt n$个），而出现次数相同时，上式显然满足乘法结合律，统计出现次数为$cnt$的数的值的和，可以发现只需枚举$cnt$即可，而$cnt$显然小于等于$\sqrt n$即可。</p><p>此时的时间复杂度已经降为$O(n \sqrt n \log n)$，可以拿到暴力分：18分。</p><p>想办法优化掉<em>log</em>，我们看出所有的快速幂的底数都为<em>2</em>，直接套光速幂，预处理出$2^{k \sqrt n}$和$2^k$的值，计算是直接取即可。</p><p>时间复杂度： $O((m + n) \sqrt n)$。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> pos[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">int</span> id, mod;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (node b) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos[l] == pos[b.l]) <span class="keyword">return</span> r &lt; b.r;</span><br><span class="line">        <span class="keyword">return</span> l &lt; b.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;q[N];</span><br><span class="line">LL a[N];</span><br><span class="line"><span class="keyword">int</span> len, limit, cnt, tot[N], num[N];</span><br><span class="line">LL seg[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt ++;</span><br><span class="line">    <span class="keyword">if</span>(tot[a[x]] &gt; limit) <span class="keyword">return</span> num[a[x]] ++, <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    seg[num[a[x]]] -= a[x];</span><br><span class="line">    num[a[x]] ++;</span><br><span class="line">    seg[num[a[x]]] += a[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt --;</span><br><span class="line">    <span class="keyword">if</span>(tot[a[x]] &gt; limit) <span class="keyword">return</span> num[a[x]] --, <span class="built_in"><span class="keyword">void</span></span>();</span><br><span class="line">    seg[num[a[x]]] -= a[x];</span><br><span class="line">    num[a[x]] --;</span><br><span class="line">    seg[num[a[x]]] += a[x];</span><br><span class="line">&#125;</span><br><span class="line">LL ans[N];</span><br><span class="line">LL maxn = <span class="number">0</span>;</span><br><span class="line">LL sum[N], val[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    val[<span class="number">0</span>] = sum[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= limit;i ++)</span><br><span class="line">        val[i] = (val[i - <span class="number">1</span>] + val[i - <span class="number">1</span>]) % mod;</span><br><span class="line">    sum[<span class="number">1</span>] = val[limit];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= limit;i ++)</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] * sum[<span class="number">1</span>] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">make</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum[x / limit] * val[x % limit] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) tot[a[i]] ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;q[i].l, &amp;q[i].r, &amp;q[i].mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++) q[i].id = i;</span><br><span class="line">    limit = <span class="built_in">sqrt</span>(n) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">1e5</span>;i ++)</span><br><span class="line">        <span class="keyword">if</span>(tot[i] &gt; limit) s.<span class="built_in">push_back</span>(i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt; limit * len) len ++;</span><br><span class="line">        pos[i] = len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="number">1</span>, r = <span class="number">0</span>; i &lt;= m;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mod = q[i].mod;</span><br><span class="line">        <span class="built_in">init</span>(mod);</span><br><span class="line">        <span class="keyword">while</span>(l &gt; q[i].l) <span class="built_in">add</span>(-- l);</span><br><span class="line">        <span class="keyword">while</span>(r &lt; q[i].r) <span class="built_in">add</span>(++ r);</span><br><span class="line">        <span class="keyword">while</span>(l &lt; q[i].l) <span class="built_in">del</span>(l ++);</span><br><span class="line">        <span class="keyword">while</span>(r &gt; q[i].r) <span class="built_in">del</span>(r --);</span><br><span class="line">        maxn = <span class="built_in">make</span>(cnt, mod);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= limit; j ++)</span><br><span class="line">            ans[q[i].id] += seg[j] * (maxn - <span class="built_in">make</span>(cnt - j, mod) + mod) % mod;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="keyword">int</span>)s.<span class="built_in">size</span>(); j ++)</span><br><span class="line">            <span class="keyword">if</span>(num[s[j]] != <span class="number">0</span>) ans[q[i].id] += s[j] * (maxn - <span class="built_in">make</span>(cnt - num[s[j]], mod) + mod) % mod;</span><br><span class="line">        </span><br><span class="line">        ans[q[i].id] = ans[q[i].id] % q[i].mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AT2382</title>
      <link href="/2022/02/13/AT2382/"/>
      <url>/2022/02/13/AT2382/</url>
      
        <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/agc015/tasks/agc015_d">题目传送门</a></p><span id="more"></span><p>考试总是考原题，以后还是要将刷题量提上去。</p><p>观察题目，分类讨论两个异或数的定义域。</p><p>1.我们先找出二进制下$A$和$B$最高的的不同位（最低位放右边，位数不同就补零）时（设其为$id$），因为$[A，2^{id} - 1)$之间进行$or$运算一定不会进位，也不会变小，所以$2^{id} - 1 - ((l &gt;&gt; id) &lt;&lt; id) + 1$这些数都可以取（值域还是$[A,2^{id} - 1)$），因为$B$和$A$在$id$左边的位都相同，所以$((B &gt;&gt; id) &lt;&lt; id) - l == (1 &lt;&lt; id) - ((l &gt;&gt; id) &lt;&lt; id)$，故第一部分的答案为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">z = (B &gt;&gt; id) &lt;&lt; id;</span><br><span class="line">ans += z - l; <span class="comment">// (z - 1) - (l - 1)</span></span><br></pre></td></tr></table></figure><p>2.再考虑最高位左边的相同位，$[2^{id},B]$ 间内的数相互运算 , 我们找出$B$中最高不同位以下的最高的一（设位数为$k$) ， 即$AxorB$的倒数第二个$1$，则设数$P$等于将$B$中$k$位以后的所有位改为$1$的值。</p><p>同理也可以证明，其值域也就为：$[2^{id}, P]$。</p><p>3.两个区间内的数相互异或，同理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">LL x, y, z, k, maxn;</span><br><span class="line"><span class="keyword">int</span> T, id, i;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">    <span class="keyword">if</span>(x == y) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    z = x ^ y;</span><br><span class="line">    <span class="keyword">while</span>(z)</span><br><span class="line">    &#123;</span><br><span class="line">        id ++;</span><br><span class="line">        z &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    id --;</span><br><span class="line">    z = (y &gt;&gt; id) &lt;&lt; id;</span><br><span class="line">    k = z ^ y;</span><br><span class="line">    ans = z - x;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        i ++;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i --;</span><br><span class="line">    maxn = y | ((<span class="number">1ll</span> &lt;&lt; (i + <span class="number">1</span>)) - <span class="number">1</span>);</span><br><span class="line">    LL l = x | z, r = z | (z - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(maxn &lt; l) ans += maxn - z + <span class="number">1</span> + r - l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> ans += r - z + <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ATCoder </tag>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AT2390</title>
      <link href="/2022/02/06/AT2390/"/>
      <url>/2022/02/06/AT2390/</url>
      
        <content type="html"><![CDATA[<p>被Dyd教育了（QWQ）。</p><span id="more"></span><p>讲课的第一题，理论应该不是很难，但涉及$SG$函数，本人不会，被现场教育了。</p><p><a href="https://atcoder.jp/contests/agc016/tasks/agc016_f">题目传送门</a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>$n$个点，$m$条边，所有的边$(u, v)$满足：$u &lt; v$，求$SG(1) \ != SG(2)$的方案数。<br>$$<br>\begin{aligned}<br>n &amp;\le 15 \\<br>m &amp;\le n*(n-1)<br>\end{aligned}<br>$$</p><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p>题目要求过于苛刻，考虑转化。可以发现总方案数为：$2^m$，所以我们只要求出$SG(1) = SG(2)$的方案数即可，于是我们考虑状压$dp$，令$dp[S]$为点集为$S$的方案数,考虑转移方程怎么写。</p><p>根据由小推大的原则，考虑$S$的子集$T$和$U=S-T$，令$ \forall SG_{i|U}=0$且$\forall SG_{i|T} \ !=0$，那么我们可以发现：</p><ul><li>1和2必须在同一子集，否则根据定义$SG(1)$不可能等于$SG(2)$。</li><li>根据$SG$函数的<a href="https://baike.baidu.com/item/SG%E5%87%BD%E6%95%B0/1004609?fr=aladdin">定义</a>，$T$中必定有一条边连向$U$，且$U$中有多少条边连向$T$却无所谓。</li></ul><p>那么可以得到$U$，$T$对$dp[S]$的影响就是：<br>$$<br>\begin{aligned}<br>dp[S] &amp;+= 2^{count(g[i] \ \wedge \ U)}, i \in U \\<br>dp[S] &amp;+= 2^{count(g[i] \ \wedge \ T) - 1}, i \in T<br>\end{aligned}<br>$$<br>$g[i]$指从$i$可以一次到达的边的集合。</p><p>其实也非常好理解，对于任意一条从$U$出发到$T$的边（总数为$tem1$）在不影响正确性的情况下可以有任意两种选择，而从$U$出发到$T$的边（总数为$tem2$）只有$tem2 - 1$条边可以有任意两种选择（至少有一条边连向$U$）。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">16</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">LL g[N], dp[<span class="number">1</span> &lt;&lt; N], pow2[<span class="number">1</span> &lt;&lt; N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    dp[<span class="number">0</span>] = pow2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++) pow2[i] = (pow2[i - <span class="number">1</span>] * <span class="number">2</span>) % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> o, u;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;o, &amp;u);</span><br><span class="line">        o --, u --;</span><br><span class="line">        g[o] |= (<span class="number">1</span> &lt;&lt; u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">1</span>; S &lt; (<span class="number">1</span> &lt;&lt; n); S ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((S &amp; <span class="number">1</span>) != (S &gt;&gt; <span class="number">1</span> &amp; <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u = S; u;u = u - <span class="number">1</span> &amp; S)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((u &amp; <span class="number">1</span>) != (u &gt;&gt; <span class="number">1</span> &amp; <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                LL ans = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++)</span><br><span class="line">                    <span class="keyword">if</span>(S &gt;&gt; i &amp; <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(u &gt;&gt; i &amp; <span class="number">1</span>) ans = ans * pow2[__builtin_popcount(g[i] &amp; (S ^ u))] % mod;</span><br><span class="line">                        <span class="keyword">else</span> ans = ans * (pow2[__builtin_popcount(g[i] &amp; u)] - <span class="number">1</span>) % mod;</span><br><span class="line">                    &#125;</span><br><span class="line">                dp[S] = (dp[S] + dp[S ^ u] * ans % mod) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,(pow2[m] - dp[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>] + mod) % mod);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ATCoder </tag>
            
            <tag> SG函数 </tag>
            
            <tag> 状压dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4117 [Ynoi2018] 五彩斑斓的世界</title>
      <link href="/2022/01/26/P4117-Ynoi2018-%E4%BA%94%E5%BD%A9%E6%96%91%E6%96%93%E7%9A%84%E4%B8%96%E7%95%8C/"/>
      <url>/2022/01/26/P4117-Ynoi2018-%E4%BA%94%E5%BD%A9%E6%96%91%E6%96%93%E7%9A%84%E4%B8%96%E7%95%8C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>P7447 [Ynoi2007] rgxsxrs</title>
      <link href="/2022/01/25/P7447-Ynoi2007-rgxsxrs/"/>
      <url>/2022/01/25/P7447-Ynoi2007-rgxsxrs/</url>
      
        <content type="html"><![CDATA[<p>毒瘤的出题人，怪物一样的题目。</p><span id="more"></span><h1 id="题目简介"><a href="#题目简介" class="headerlink" title="题目简介"></a>题目简介</h1><p>维护一个序列，执行一下操作：</p><ul><li><p>$1 \ l \ r \ x$：表示将区间 $[l,r]$ 中所有 $&gt;x$ 的元素减去 $x$。</p></li><li><p>$2 \ l \ r$：表示询问区间 $[l,r]$ 的和，最小值，最大值。</p></li></ul><p>没了，就没了（<del>人没了</del>）。</p><p>数据范围：对于 $100%$ 的数据，$n,m≤5×10^5，1≤a_i,x≤10^9$ 。</p><p>时间：$3.00s$ ~ $6.00s$。</p><p>空间：$64.00MB$</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>观察题面，数据范围，时空限制，然后我们可以（<del>放弃</del>）联想到区间的最大值一定不会变化，在和传说中的第二分块联想了一下，可以联想到值域分块，然而值域过于巨大，我们考虑再次将值域细化成：$B^{i-1}-B^i$ ，这样的话我们发现如果最小值 $\ge$ $x$，打上标记然后返回，最大值 $\le$ $x$ 直接跳过，然后就到了最关键的最大值 $\ge$ x $\ge$ 最小值的时候。</p><p>仔细思考这一步应该怎么处理，如果使用普通线段树的话，时间必定爆炸，于是考虑二次分块，首先分块数列，然后再在每一块中建立一颗值域线段树，在线段树中执行上述操作。</p><p>设上述块的数量为 $cnt$，特殊情况的块长为 $len$，故在值域线段树中最多每次执行$ \frac {len}{x}$次操作，那么最后就要使$\frac{len}{x} * cnt$最小，当 $x$ 很大时我们可以发现没有多少数比它大，当 $x$ 很小的时候我们同理可以发现没有多少数比他小，故我们需要特殊考虑的就是刚好卡在中间的数，此时令$\frac{len}{x} = B$，此时$cnt = \log _{B}{10^9}$时，此时的时间复杂度可以证明当$B = 16$时最小为 $O((n+m) × \log _{B}{10^9} × \log n + n × B × \log n× \log _B 10^9)$。</p><p>然而你打完一交，$MLE$ 了，再次考虑优化，因为线段树的空间随层数的递增而成倍增长，所以重点放在优化叶子节点，我们不妨设置一个数 $limit$ ，让线段树 $\le \ limit$ 的区间直接暴力（底层分块：底层暴力分块）， 理论上 $limit = 4$ 时最优。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(x) x &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(x) x &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> B = <span class="number">32</span>, mod = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> limit = <span class="number">40</span>; <span class="comment">// 事实上40更优秀</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment</span>&#123;</span> <span class="comment">// 线段树的底层 </span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line">&#125;tree[N / limit &lt;&lt; <span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> now[N];</span><br><span class="line"><span class="keyword">int</span> bet[N];</span><br><span class="line"><span class="keyword">int</span> minn, maxn;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line">LL sum;</span><br><span class="line"><span class="keyword">int</span> down[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span>&#123;</span> <span class="comment">// 分块 </span></span><br><span class="line">LL l, r;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span> <span class="comment">// 建树</span></span><br><span class="line"><span class="keyword">int</span> minn = <span class="number">2147483647</span>, maxn, cnt;</span><br><span class="line">LL add, sum;</span><br><span class="line">&#125;tr[N / limit &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[x].sum = tr[x].cnt = tr[x].maxn = <span class="number">0</span>, tr[x].minn = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = tree[x].l;i &lt;= tree[x].r; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(bet[i] == id)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].cnt ++;</span><br><span class="line">tr[x].sum += a[i];</span><br><span class="line">tr[x].minn = <span class="built_in">min</span>(tr[x].minn, a[i]);</span><br><span class="line">tr[x].maxn = <span class="built_in">max</span>(tr[x].maxn, a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[x].flag) <span class="built_in">change</span>(x); <span class="comment">// 小于就暴力</span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tr[x].sum = tr[<span class="built_in">l</span>(x)].sum + tr[<span class="built_in">r</span>(x)].sum;</span><br><span class="line">tr[x].cnt = tr[<span class="built_in">l</span>(x)].cnt + tr[<span class="built_in">r</span>(x)].cnt;</span><br><span class="line">tr[x].minn = <span class="built_in">min</span>(tr[<span class="built_in">l</span>(x)].minn, tr[<span class="built_in">r</span>(x)].minn);</span><br><span class="line">tr[x].maxn = <span class="built_in">max</span>(tr[<span class="built_in">l</span>(x)].maxn, tr[<span class="built_in">r</span>(x)].maxn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addage</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">// 将y下传给x</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[x].sum += tr[x].cnt * tr[y].add;</span><br><span class="line">tr[x].add += tr[y].add;</span><br><span class="line">tr[x].minn += tr[y].add;</span><br><span class="line">tr[x].maxn += tr[y].add;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!tr[x].add) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(tree[x].flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = tree[x].l;i &lt;= tree[x].r;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(bet[i] == id) a[i] += tr[x].add;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">addage</span>(<span class="built_in">l</span>(x), x), <span class="built_in">addage</span>(<span class="built_in">r</span>(x), x);</span><br><span class="line">tr[x].add = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change_all</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">1</span>) <span class="built_in">change_all</span>(x &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> val = a[x];</span><br><span class="line"><span class="built_in">change_all</span>(now[x]);</span><br><span class="line">a[x] = val;</span><br><span class="line">x = now[x];</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">for</span>(x &gt;&gt;= <span class="number">1</span>; x;x &gt;&gt;= <span class="number">1</span>) <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= tree[x].l &amp;&amp; tree[x].r &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">minn = <span class="built_in">min</span>(minn, tr[x].minn);</span><br><span class="line">maxn = <span class="built_in">max</span>(maxn, tr[x].maxn);</span><br><span class="line">sum += tr[x].sum;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">if</span>(tree[x].flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = tree[x].l;i &lt;= tree[x].r;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i &gt;= l &amp;&amp; i &lt;= r &amp;&amp; bet[i] == id)</span><br><span class="line">&#123;</span><br><span class="line">minn = <span class="built_in">min</span>(minn, a[i]);</span><br><span class="line">maxn = <span class="built_in">max</span>(maxn, a[i]);</span><br><span class="line">sum += a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[<span class="built_in">l</span>(x)].r &gt;= l) <span class="built_in">ask</span>(x &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span>(tree[<span class="built_in">r</span>(x)].l &lt;= r) <span class="built_in">ask</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, LL w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].maxn &lt;= w) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(tree[x].l &gt;= l &amp;&amp; tree[x].r &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].minn &gt; w)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].add -= w;</span><br><span class="line">tr[x].maxn -= w;</span><br><span class="line">tr[x].minn -= w;</span><br><span class="line">tr[x].sum -= tr[x].cnt * w;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">if</span>(tree[x].flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = tree[x].l;i &lt;= tree[x].r;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(bet[i] == id) a[i] -= (a[i] &gt; w) * w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">modify</span>(<span class="built_in">l</span>(x), l, r, w), <span class="built_in">modify</span>(<span class="built_in">r</span>(x), l, r, w);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">if</span>(tree[x].flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = tree[x].l;i &lt;= tree[x].r;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= i &amp;&amp; i &lt;= r &amp;&amp; bet[i] == id) a[i] -= (a[i] &gt; w) * w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tree[<span class="built_in">l</span>(x)].r &gt;= l) <span class="built_in">modify</span>(<span class="built_in">l</span>(x), l, r, w);</span><br><span class="line"><span class="keyword">if</span>(tree[<span class="built_in">r</span>(x)].l &lt;= r) <span class="built_in">modify</span>(<span class="built_in">r</span>(x), l, r, w);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].minn &gt;= l) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">if</span>(tree[x].flag)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].sum = tr[x].cnt = tr[x].maxn = <span class="number">0</span>, tr[x].minn = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = tree[x].l;i &lt;= tree[x].r;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(bet[i] == id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt;= l)</span><br><span class="line">&#123;</span><br><span class="line">tr[x].cnt ++;</span><br><span class="line">tr[x].sum += a[i];</span><br><span class="line">tr[x].maxn = <span class="built_in">max</span>(tr[x].maxn, a[i]);</span><br><span class="line">tr[x].minn = <span class="built_in">min</span>(tr[x].minn, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> down[++ tot] = i, bet[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">del</span>(<span class="built_in">l</span>(x)), <span class="built_in">del</span>(<span class="built_in">r</span>(x));</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;seg[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(seg[i].l &lt;= a[x] &amp;&amp; seg[i].r &gt;= a[x])</span><br><span class="line">&#123;</span><br><span class="line">bet[x] = i, seg[i].<span class="built_in">modify</span>(x);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[x].l = l, tree[x].r = r;</span><br><span class="line"><span class="keyword">if</span>(r - l &gt; limit)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">tree[x].flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;l &lt;= r;l ++) now[l] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">minn = <span class="number">2147483647</span>, maxn = sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt;i ++)</span><br><span class="line">seg[i].<span class="built_in">ask</span>(<span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt;i ++)</span><br><span class="line">&#123;</span><br><span class="line">seg[i].<span class="built_in">modify</span>(<span class="number">1</span>, l, r, w);</span><br><span class="line">seg[i].<span class="built_in">del</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;tot;tot --) <span class="built_in">add</span>(down[tot]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> last;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span>(LL j = <span class="number">1</span>;;j *= B)<span class="comment">// 初始化</span></span><br><span class="line">&#123;</span><br><span class="line">seg[++ cnt].l = j;</span><br><span class="line">seg[cnt].id = cnt;</span><br><span class="line">seg[cnt].r = j * B - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(seg[cnt].r &gt;= <span class="number">1e9</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">add</span>(i);</span><br><span class="line"><span class="keyword">int</span> op, l, r, w;</span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(op), <span class="built_in">read</span>(l), <span class="built_in">read</span>(r);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(w);</span><br><span class="line">l ^= last, r ^= last, w ^= last;</span><br><span class="line"><span class="comment">// if(l &gt; r) swap(l, r);</span></span><br><span class="line"><span class="built_in">add</span>(l, r, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">l ^= last, r ^= last;</span><br><span class="line"><span class="comment">// if(l &gt; r) swap(l, r); // 出题人较为良心</span></span><br><span class="line"><span class="built_in">ask</span>(l, r);</span><br><span class="line">last = sum % mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %d %d\n&quot;</span>, sum, minn, maxn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟费用流</title>
      <link href="/2022/01/24/%E6%A8%A1%E6%8B%9F%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
      <url>/2022/01/24/%E6%A8%A1%E6%8B%9F%E8%B4%B9%E7%94%A8%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>这东西强，好用，就是难（<del>其实是本人太菜了</del>）。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>当一类问题被转化成费用流时，一般来讲时间复杂度的上限是 $O(n^2m)$ 只要出题人想卡，分分钟卡掉（前提是出题人能写出更优的算法，<del>这种都不是人</del>），在这类分支中就有一类优化：模拟费用流。</p><p>过于抽象，从模板题讲起走。</p><h1 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h1><h2 id="P5470-NOI2019-序列"><a href="#P5470-NOI2019-序列" class="headerlink" title="P5470 [NOI2019] 序列"></a><a href="https://www.luogu.com.cn/problem/P5470">P5470 [NOI2019] 序列</a></h2><p>不难想到这是费用流，但观察数据范围发现貌似并不可过。</p><p><img src="1.jpg" alt="image"></p><p>由此建图可以跑满暴力分，高贵的 $dinic$ 连暴力分都没有跑满，在 $48$ 分在折戟沉沙。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, M = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL Inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> e[M], ne[M], h[N], w[M], cost[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx, w[idx] = z, cost[idx] = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addage</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">add</span>(x, y, z, c), <span class="built_in">add</span>(y, x, <span class="number">0</span>, -c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, S, T;</span><br><span class="line"><span class="keyword">int</span> dis[N], now[N];</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line">LL ret;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(dis));</span><br><span class="line"><span class="built_in">memcpy</span>(now, h, <span class="built_in"><span class="keyword">sizeof</span></span>(now));</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">q.<span class="built_in">push</span>(S);</span><br><span class="line">dis[S] = <span class="number">1</span>;</span><br><span class="line">dis[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> o = q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">vis[o] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[o]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(w[i] &amp;&amp; dis[j] &gt; dis[o] + cost[i])</span><br><span class="line">&#123;</span><br><span class="line">dis[j] = dis[o] + cost[i];</span><br><span class="line"><span class="keyword">if</span>(!vis[j]) q.<span class="built_in">push</span>(j), vis[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[T] != Inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, LL last)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == T || !last) <span class="keyword">return</span> last;</span><br><span class="line">LL rest = last, k;</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = now[x]; ~i &amp;&amp; rest; i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line">now[x] = i;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(!vis[j] &amp;&amp; w[i] &amp;&amp; dis[j] == dis[x] + cost[i])</span><br><span class="line">&#123;</span><br><span class="line">k = <span class="built_in">dfs</span>(j, <span class="built_in">min</span>((LL)w[i], rest));</span><br><span class="line"><span class="keyword">if</span>(!k)</span><br><span class="line">&#123;</span><br><span class="line">dis[j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">rest -= k;</span><br><span class="line">w[i] -= k;</span><br><span class="line">w[i ^ <span class="number">1</span>] += k;</span><br><span class="line">ret += cost[i] * k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vis[x] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> last - rest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL ans = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">bfs</span>())</span><br><span class="line"><span class="keyword">while</span>(res = <span class="built_in">dfs</span>(S, Inf)) ans += res;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k, l;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line">idx = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;l);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">T = <span class="number">2</span> * n + <span class="number">4</span>;</span><br><span class="line"><span class="built_in">addage</span>(S, <span class="number">2</span> * n + <span class="number">1</span>, k, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">addage</span>(<span class="number">2</span> * n + <span class="number">2</span>, <span class="number">2</span> * n + <span class="number">3</span>, k - l, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">addage</span>(<span class="number">2</span> * n + <span class="number">1</span>, i, <span class="number">1</span>, -a[i]);</span><br><span class="line"><span class="built_in">addage</span>(i, i + n, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">addage</span>(i, n * <span class="number">2</span> + <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">addage</span>(<span class="number">2</span> * n + <span class="number">3</span>, i + n, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">addage</span>(i + n, T, <span class="number">1</span>, -b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dinic</span>();</span><br><span class="line">cout &lt;&lt; -ret &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察建图，不难发现有效流量都集中在左右两边，可以使用带悔贪心的思想找增广路。</p><p>可以发现每一条增广路的选择只可能有以下几种情况：</p><p><img src="2.png" alt="image"></p><p>所以一共5种更新可能：</p><ul><li><p>选择$a_x+b_x$中最大的。</p></li><li><p>选择$a_i + b_i$中最大的。</p></li><li><p>选择$a$和$b$中最大的（$k &gt; l$）。</p></li><li><p>选择$a$中最大的和$b_x$中最大的。</p></li><li><p>选择$a_x$中最大的和$b$中最大的。</p></li></ul><p>其中$a_x$表示取了$b_x$但没有取$a_x$的$a_x$值（$b_x$同理）。</p><p>由上，维护4个堆即可。</p><ul><li>1：可取的$a$中的最大值。</li><li>2：可取的$b$中的最大值。</li><li>3：可取的$a_x$中的最大值。</li><li>4：可取的$b_x$中的最大值。</li></ul><p>每次更新答案即可：</p><ul><li>$1 + 2$($k &gt; l, k-(id_{a_{front}} != id_{b_{front}})$)</li><li>$2 + 3$($l &gt; 0$)</li><li>$1 + 4$($l &gt; 0$)</li><li>$3 + 4$($k ++$)</li></ul><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;LL, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n, k, l;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line">priority_queue&lt;PII&gt;q[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">bool</span> p[N], d[N];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i ++) </span><br><span class="line"><span class="keyword">while</span>(!q[i].<span class="built_in">empty</span>()) q[i].<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i ++)</span><br><span class="line">p[i] = d[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q[<span class="number">0</span>].<span class="built_in">empty</span>() &amp;&amp; (p[q[<span class="number">0</span>].<span class="built_in">top</span>().y] || d[q[<span class="number">0</span>].<span class="built_in">top</span>().y])) q[<span class="number">0</span>].<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">while</span>(!q[<span class="number">1</span>].<span class="built_in">empty</span>() &amp;&amp; p[q[<span class="number">1</span>].<span class="built_in">top</span>().y]) q[<span class="number">1</span>].<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">while</span>(!q[<span class="number">2</span>].<span class="built_in">empty</span>() &amp;&amp; d[q[<span class="number">2</span>].<span class="built_in">top</span>().y]) q[<span class="number">2</span>].<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">while</span>(!q[<span class="number">3</span>].<span class="built_in">empty</span>() &amp;&amp; (p[q[<span class="number">3</span>].<span class="built_in">top</span>().y] || !d[q[<span class="number">3</span>].<span class="built_in">top</span>().y])) q[<span class="number">3</span>].<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">while</span>(!q[<span class="number">4</span>].<span class="built_in">empty</span>() &amp;&amp; (!p[q[<span class="number">4</span>].<span class="built_in">top</span>().y] || d[q[<span class="number">4</span>].<span class="built_in">top</span>().y])) q[<span class="number">4</span>].<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_a</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(d[x]) <span class="keyword">return</span> ;</span><br><span class="line">q[<span class="number">4</span>].<span class="built_in">push</span>(<span class="built_in">mp</span>(b[x], x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_b</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[x]) <span class="keyword">return</span> ;</span><br><span class="line">q[<span class="number">3</span>].<span class="built_in">push</span>(<span class="built_in">mp</span>(a[x], x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;l);</span><br><span class="line"><span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(b[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line">q[<span class="number">0</span>].<span class="built_in">push</span>(<span class="built_in">mp</span>(a[i] + b[i], i));</span><br><span class="line">q[<span class="number">1</span>].<span class="built_in">push</span>(<span class="built_in">mp</span>(a[i], i));</span><br><span class="line">q[<span class="number">2</span>].<span class="built_in">push</span>(<span class="built_in">mp</span>(b[i], i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(k --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">check</span>();</span><br><span class="line">LL cnt = q[<span class="number">0</span>].<span class="built_in">top</span>().x, type = <span class="number">0</span>;</span><br><span class="line">            LL o, u, e, m;</span><br><span class="line">            <span class="keyword">if</span>(!q[<span class="number">1</span>].<span class="built_in">empty</span>()) o = q[<span class="number">1</span>].<span class="built_in">top</span>().x;</span><br><span class="line"><span class="keyword">if</span>(!q[<span class="number">2</span>].<span class="built_in">empty</span>()) u = q[<span class="number">2</span>].<span class="built_in">top</span>().x;</span><br><span class="line"><span class="keyword">if</span>(!q[<span class="number">3</span>].<span class="built_in">empty</span>()) e = q[<span class="number">3</span>].<span class="built_in">top</span>().x;</span><br><span class="line"><span class="keyword">if</span>(!q[<span class="number">4</span>].<span class="built_in">empty</span>()) m = q[<span class="number">4</span>].<span class="built_in">top</span>().x;</span><br><span class="line">            <span class="keyword">if</span>(!q[<span class="number">3</span>].<span class="built_in">empty</span>() &amp;&amp; !q[<span class="number">4</span>].<span class="built_in">empty</span>() &amp;&amp; e + m &gt; cnt) cnt = e + m, type = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span>(!q[<span class="number">1</span>].<span class="built_in">empty</span>() &amp;&amp; !q[<span class="number">4</span>].<span class="built_in">empty</span>() &amp;&amp; o + m &gt; cnt) cnt = o + m, type = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(!q[<span class="number">2</span>].<span class="built_in">empty</span>() &amp;&amp; !q[<span class="number">3</span>].<span class="built_in">empty</span>() &amp;&amp; u + e &gt; cnt) cnt = u + e, type = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">if</span>(l &lt;= k &amp;&amp; !q[<span class="number">1</span>].<span class="built_in">empty</span>() &amp;&amp; !q[<span class="number">2</span>].<span class="built_in">empty</span>() &amp;&amp; o + u &gt; cnt) cnt = o + u, type = <span class="number">1</span>;</span><br><span class="line">ans += cnt;</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">0</span>) p[q[<span class="number">0</span>].<span class="built_in">top</span>().y] = d[q[<span class="number">0</span>].<span class="built_in">top</span>().y] = <span class="number">1</span>, l --;</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">1</span>) p[q[<span class="number">1</span>].<span class="built_in">top</span>().y] = d[q[<span class="number">2</span>].<span class="built_in">top</span>().y] = <span class="number">1</span>, <span class="built_in">make_a</span>(q[<span class="number">1</span>].<span class="built_in">top</span>().y), <span class="built_in">make_b</span>(q[<span class="number">2</span>].<span class="built_in">top</span>().y);</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">2</span>) p[q[<span class="number">1</span>].<span class="built_in">top</span>().y] = d[q[<span class="number">4</span>].<span class="built_in">top</span>().y] = <span class="number">1</span>, l --, <span class="built_in">make_a</span>(q[<span class="number">1</span>].<span class="built_in">top</span>().y);</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">3</span>) p[q[<span class="number">3</span>].<span class="built_in">top</span>().y] = d[q[<span class="number">2</span>].<span class="built_in">top</span>().y] = <span class="number">1</span>, l --, <span class="built_in">make_b</span>(q[<span class="number">2</span>].<span class="built_in">top</span>().y);</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">4</span>) p[q[<span class="number">3</span>].<span class="built_in">top</span>().y] = d[q[<span class="number">4</span>].<span class="built_in">top</span>().y] = <span class="number">1</span>, l -= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P6122-NEERC2016-Mole-Tunnels"><a href="#P6122-NEERC2016-Mole-Tunnels" class="headerlink" title="P6122 [NEERC2016]Mole Tunnels"></a><a href="https://www.luogu.com.cn/problem/P6122">P6122 [NEERC2016]Mole Tunnels</a></h2><p>费用流建图不难看出，$10^{5}$ 的数据范围是个人都不会写网络流。</p><p>再次分析费用流建图，将树的形态画出来的时候，手玩几组样例就可以发现，每个点可拓展的点十分的少（且已经给定），此时我们对于每一个新增只需跑一次树形<code>dp</code>即可，此时的时间复杂度已经降为$O(n^2)$了。</p><p>再次回顾我们树形<code>dp</code>干了啥，找离我们目前点的最近点，而我们的树是一颗完全二叉树，考虑动态维护子树中的有食物的点到根节点的最小距离，和这个点的编号，用<code>flow</code>数组表示我们选择从儿子流向父亲流了多少（从上往下，$flow&gt;0$此边权值为<code>-1</code>，否则为<code>1</code>，反之同理）。所以每一次操作，我们顶多沿着链向上跳，一直跳到<code>1</code>号节点，就可以查询到离这个点最近的有食物的点，之后，对于修改我们顶多会修改两条链上的信息（其他链走都没走），所以时间复杂度降为鼹鼠数$\times$链长度，为$O(m \log n)$，可以通过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &gt; c || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;<span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> ...<span class="title">ARG</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res, ARG &amp;...com)</span></span>&#123;<span class="built_in">read</span>(res), <span class="built_in">read</span>(com...);&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(T res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res &gt;= <span class="number">10</span>) <span class="built_in">write</span>(res / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(res % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, Inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N], c[N], f[N], s[N], flow[N]; <span class="comment">// flow: 从下面流上去时所加的反向边</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[x] = Inf;</span><br><span class="line">    <span class="keyword">if</span>(a[x]) f[x] = <span class="number">0</span>, s[x] = x;</span><br><span class="line">    <span class="keyword">if</span>((x &lt;&lt; <span class="number">1</span>) &lt;= n &amp;&amp; f[x &lt;&lt; <span class="number">1</span>] + (flow[x &lt;&lt; <span class="number">1</span>] &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>) &lt; f[x]) f[x] = f[x &lt;&lt; <span class="number">1</span>] + (flow[x &lt;&lt; <span class="number">1</span>] &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>), s[x] = s[x &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>((x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>) &lt;= n &amp;&amp; f[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] + (flow[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>) &lt; f[x]) f[x] = f[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] + (flow[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>), s[x] = s[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n;i &gt;= <span class="number">1</span>;i --) <span class="built_in">modify</span>(i);</span><br><span class="line">    <span class="keyword">int</span> o, res, v, t, x, y;</span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        res = Inf, t = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">read</span>(o);</span><br><span class="line">        x = o;</span><br><span class="line">        <span class="keyword">while</span>(o)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(f[o] + t &lt; res) res = f[o] + t, v = s[o], y = o;</span><br><span class="line">            t += flow[o] &gt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">            o &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += res;</span><br><span class="line">        <span class="built_in">write</span>(ans), <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="keyword">while</span>(x != y)</span><br><span class="line">        &#123;</span><br><span class="line">            flow[x] --;</span><br><span class="line">            x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">modify</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        a[v] --;</span><br><span class="line">        <span class="built_in">modify</span>(v);</span><br><span class="line">        <span class="keyword">while</span>(v &gt; y)</span><br><span class="line">        &#123;</span><br><span class="line">            flow[v] ++;</span><br><span class="line">            v &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">modify</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(v) <span class="built_in">modify</span>(v), v &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4189 [CTSC2010]星际旅行</title>
      <link href="/2022/01/24/P4189-CTSC2010-%E6%98%9F%E9%99%85%E6%97%85%E8%A1%8C/"/>
      <url>/2022/01/24/P4189-CTSC2010-%E6%98%9F%E9%99%85%E6%97%85%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>看到讨论中有费用流了，就直接上了。</p><p>然而，开始不会建图，建完图后发现图又出现了死循环，弄死过不去，回去看题解发现是模拟费用流，泪目了。</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>仔细想想我们建出来的*一样的图，可以发现除了中间有费用交叉以外没有其他费用，神似<a href="https://www.luogu.com.cn/problem/P5470">P5470 [NOI2019] 序列</a>，然后我们在题目中发现这玩意儿是棵树，我们仔细分析每一个终点在 $0$ 号点的情况又可以得出类似于 <a href="https://www.luogu.com.cn/problem/CF453C">CF453C</a>的震荡操作，于是我们可以得到 $0$ 的答案：</p><ul><li>对于每一条链，由于链两端的值均大于 $1$ 所以我们可以一直从 $x$ 出发走到 $y$ 再回到 $x$（两个值同时减1），故对 $x$ 的答案贡献就是：$\min(val[x], val[y])$，由于根节点始终保证可以走回来，所以我们不妨优先走叶子节点，将叶子压榨干净之后，再回来压榨路径上的其他节点。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(father == j) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(j, x);</span><br><span class="line"><span class="keyword">int</span> v = <span class="built_in">min</span>(val[x], val[j]);</span><br><span class="line">val[x] -= v;</span><br><span class="line">val[j] -= v;</span><br><span class="line">cnt += v * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(val[j]) son[x] = j; <span class="comment">// 记录最后还可以从哪来的 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时不管那个注释，我们接着思考如何由父节点推及其他儿子节点，不难发现如果最后是由这个儿子走到父节点的话我们完全可以不再震荡，故这个儿子可以完全继承父节点的权值，而如果父节点还有值，但儿子节点没有值了我们就可以从父亲再走到儿子，儿子就等于父节点权值 $+ 1$，而当父节点和子节点都没有值了，那就不能上传了，子节点权值等于父节点权值 $- 1$。</p><p>那么就做完了。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[N &lt;&lt; <span class="number">1</span>], ne[N &lt;&lt; <span class="number">1</span>], h[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> val[N], cnt;</span><br><span class="line"><span class="keyword">int</span> son[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(father == j) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(j, x);</span><br><span class="line"><span class="keyword">int</span> v = <span class="built_in">min</span>(val[x], val[j]);</span><br><span class="line">val[x] -= v;</span><br><span class="line">val[j] -= v;</span><br><span class="line">cnt += v * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(val[j]) son[x] = j; <span class="comment">// 记录最后还可以从哪来的 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans[x] = cnt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i], type;</span><br><span class="line"><span class="keyword">if</span>(j == father) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(val[x]) val[x] --, cnt ++, type = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(son[j]) val[son[j]] --, cnt ++, type = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> val[j] ++, cnt --, type = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(j, x);</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">1</span>) val[x] ++, cnt --;</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">2</span>) val[son[j]] ++, cnt --;</span><br><span class="line"><span class="keyword">if</span>(type == <span class="number">3</span>) val[j] --, cnt ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;val[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> o, u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;o, &amp;u);</span><br><span class="line"><span class="built_in">add</span>(o, u);</span><br><span class="line"><span class="built_in">add</span>(u, o);</span><br><span class="line">val[o] --, val[u] --, cnt += <span class="number">2</span>; <span class="comment">// 特别注意1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">-1</span>), <span class="built_in">dfs1</span>(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注，特别注意1：必须要减，上方的贪心过后一定能保证清零。这里减的即为费用流的的贪心流量，如果不减，那就是个裸的贪心。</p>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 模拟费用流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带花树</title>
      <link href="/2022/01/23/%E5%B8%A6%E8%8A%B1%E6%A0%91/"/>
      <url>/2022/01/23/%E5%B8%A6%E8%8A%B1%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>其他博客已经鸽了几篇了，但我依然不会放弃它（<del>考了不下5次，一次都不会QAQ</del>）。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>它是干什么的，解决一般图的最大匹配的，但联想到图的最大匹配，匈牙利坐不住了，但注意看题，是一般图（<del>图是褐的</del>）：</p><p><img src="1.jpg" alt="image"></p><p>此时我们发现，当我们从度数最小的 $1$ 开始走时，遍历途径：$1-&gt;2-&gt;4-&gt;5-&gt;3$，但实际我们不难看出正确的增广路：$1-&gt;3-&gt;5-&gt;4-&gt;2-&gt;6$，显然匈牙利错了。</p><p>但这是为什么呢？当我们多构造几组数据（<del>被毒瘤出题人卡个几遍</del>），就可以总结出规律：错误是因为有奇环（下文将其称之为花）。</p><p>但信息学的勇敢精神（<del>WC上听到的广告</del>）促使毒瘤出题人勇敢探索，追求卓越，终于发明了这么个算法：带花树。</p><p>顾名思义： 将图中的花缩成点，将这棵无奇环的树处理完后，再处理花。</p><p>那么这个花有什么性质呢？</p><h2 id="花的性质"><a href="#花的性质" class="headerlink" title="花的性质"></a>花的性质</h2><p>我们首先在图$G = (V, E)$中找到一个树中找到一个奇环：$v_1-&gt;v_2…-&gt;v_k-&gt;v_1,k \equiv (1 \mod2)$ 大胆假设 $v_1$ 是花中度数最小的点（换成其他点也同理），那么 $v_1$ 的配对点一定不在花中（除去 $v_1$ 点，花中的点的个数为偶数个，一定可以两两匹配，且花与外界相连的只有 $v_1$，证毕），且$(v_2,v_3)…..(v_{k - 1},v_k)$ 一定是匹配边，那么我们可以构建一个图<br>$$<br>\begin{aligned}<br>G’ &amp;= (V’, E’) \\<br>V’ &amp;= V / \{\ v_2,v_3…..,v_k \}\, \\<br>E’ &amp;= \{\ (f(a), f(b)) | (a, b) \in E,(a,b \ != v_i,i \in \{\ 1…k \}\ ) \}\<br>\end{aligned}<br>$$<br> 其中 $f(i) = v_i$，我们可以得到 $G’$中存在增广路 $⇔$ $G$ 中存在增广路。</p><p>证明实在是不会证了，大家看一下巨佬的证明：</p><p>$⇒$：对于<em>G</em>中的任意一条增广路，若其不经过这朵花，那么在<em>G</em>′中也存在这条增广路；否则，令这条从<em>s</em>开始的增广路上的最后一个在花上的点为$v_j$那么这条增广路形如 $s⇝v_j⇝t$，我们在<em>G</em>′上构造如下增广路：先从，其中$s⇝v_1⇝t$第一段路程沿着 $bfs/dfs$树走，第二段路程沿着原图中的增广路走，唯一不同的是$v_j$变成了$v_1$（这是合法的，因为所有从$v_j$出发的边都被连到了$v_1$上，而且我们根据所有$v$都是已覆盖点可以知道$v_j$出发的边是非匹配边，花中的点数为奇数）。</p><p>$⇐$：对于<em>G</em>′中的一条增广路，若它不经过$v_1$，则<em>G</em>中也存在；否则，设这条增广路为$s⇝v_1→x⇝t$（<em>x</em>可能等于<em>t</em>），根据<em>E</em>′的定义存在$(v_i, x) \in E$，从而我们构造<em>G</em>中的增广路：$s⇝v_1⇝v_i→x⇝t$，其中第一段和第三段不变（因为增广路上$v_1$至多出现1次，所以这两段在<em>G</em>中存在），第二段是在花里走（或者精确一点，若<em>i</em>是奇数，走$v_1→v_2…v_i$，否则走$v_1→v_k…v_i$。证毕。</p><p>$bfs$时，我们可以$O(n)$求出$LCA$并$O(kn)$缩花，从而单次$bfs$至多$O(n^2)$，总复杂度至多$O(n^3)$。</p><p>实现上，我们不实际缩点，而是对于每个点维护一个$fa$，表示它所处的最大的花的$LCA$（就是$v_1$）。由于花里可能还有花，这个$fa$要用并查集维护。在证明中构造增广路是通过判断$i$奇偶性，但实际上我们可以直接维护每个点要往哪边走，也即维护一个$link_i$表示如果$i$失配要和谁匹配（例如，$link_{v_2}=v_1, link_{v_3}=v_4$）。找$LCA$的时候直接暴力$O(n)$，但要注意只找每个并查集的根节点（因为非根节点都缩到花里了）；缩花时要注意如果两个点已经在一朵花里就不要再缩了。</p><p>在此，$orz$巨佬。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e3</span> + <span class="number">5</span>, M = <span class="number">2.5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, idx;</span><br><span class="line"><span class="keyword">int</span> h[N], ne[M], e[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> vis[N], father[N], chain[N], mate[N]; <span class="comment">// chain就是link，**的luogu不能用link </span></span><br><span class="line"><span class="keyword">int</span> q[N], st, ed;</span><br><span class="line"><span class="keyword">int</span> ss[N], cnt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> father[x] == x ? x : father[x] = <span class="built_in">find</span>(father[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cnt ++;</span><br><span class="line"><span class="keyword">while</span>(ss[x] != cnt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">ss[x] = cnt;</span><br><span class="line">x = <span class="built_in">find</span>(chain[mate[x]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flower</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">find</span>(x) != p)</span><br><span class="line">&#123;</span><br><span class="line">chain[x] = y;</span><br><span class="line">y = mate[x];</span><br><span class="line">father[y] = father[x] = p;</span><br><span class="line"><span class="keyword">if</span>(vis[y] == <span class="number">1</span>) q[ed ++] = y, vis[y] = <span class="number">2</span>;</span><br><span class="line">x = chain[y];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">st = ed = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) father[i] = i, vis[i] = <span class="number">0</span>;</span><br><span class="line">q[ed ++] = x;</span><br><span class="line">vis[x] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(st != ed)</span><br><span class="line">&#123;</span><br><span class="line">x = q[st ++];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(!vis[j])</span><br><span class="line">&#123;</span><br><span class="line">vis[j] = <span class="number">1</span>;</span><br><span class="line">chain[j] = x;</span><br><span class="line"><span class="keyword">if</span>(mate[j]) q[ed ++] = mate[j], vis[mate[j]] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(j)</span><br><span class="line">&#123;</span><br><span class="line">x = mate[chain[j]];</span><br><span class="line">mate[j] = chain[j];</span><br><span class="line">mate[chain[j]] = j;</span><br><span class="line">j = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[j] == <span class="number">2</span> &amp;&amp; <span class="built_in">find</span>(j) != <span class="built_in">find</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span>  p = <span class="built_in">lca</span>(x, j);</span><br><span class="line"><span class="built_in">flower</span>(x, j, p);</span><br><span class="line"><span class="built_in">flower</span>(j, x, p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m, ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line"><span class="built_in">add</span>(x, y);</span><br><span class="line"><span class="built_in">add</span>(y, x);</span><br><span class="line"><span class="keyword">if</span>(!mate[x] &amp;&amp; !mate[y]) mate[x] = y, mate[y] = x, ans ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line"><span class="keyword">if</span>(!mate[i] &amp;&amp; <span class="built_in">match</span>(i)) ans ++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, mate[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自适应辛普森</title>
      <link href="/2022/01/23/%E8%87%AA%E9%80%82%E5%BA%94%E8%BE%9B%E6%99%AE%E6%A3%AE/"/>
      <url>/2022/01/23/%E8%87%AA%E9%80%82%E5%BA%94%E8%BE%9B%E6%99%AE%E6%A3%AE/</url>
      
        <content type="html"><![CDATA[<p>先搁着。</p><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李超线段树</title>
      <link href="/2022/01/23/%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2022/01/23/%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>考试的时候就听到巨佬们在说了，但一直不会，现在学了，赶快补一下。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>当我们在一定值域内的插入线段，从上往下看查询 $x = k$ 时与线段的最高交点，可支持返回该线段的编号。</p><p>要求时间复杂度：$O(nlog^2(m))$，$n$ 是线段数，$m$ 是值域。</p><p>这玩意根本不可做，所以考试时暴力拿了个 $10$ 分就溜号了（<del>在此orz wfy-暴力拿80的巨佬</del>）。</p><p>在此环境下，李超线段树诞生了。</p><h1 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h1><p>我们在线段树上维护优势线段的编号，由于每一个点都进行更改的话时间复杂度会超标，故我们在每个区间内存储的是区间中点的优势线段，查询时必须递归到单节点。</p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>我们将两条线段在公共区间讨论可得：</p><ul><li>没有优势线段，直接更改编号。</li><li>插入线段完全更优，直接更改编号。</li><li>中点处更优，更改编号并递归处理。</li><li>若两端更高，且中间更低，递归处理。</li></ul><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(st &lt;= l &amp;&amp; r &lt;= ed)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[x], mid), <span class="built_in">calc</span>(line[tr[root]], mid)) &gt; <span class="number">0</span>) <span class="built_in">swap</span>(tr[root], x); <span class="comment">// 由于懒没有递归到单点，保证优势线段存在后（就一定可以更新答案），更新上一条优势线段的优势区间</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[x], l), <span class="built_in">calc</span>(line[tr[root]], l)) &gt; <span class="number">0</span>) <span class="built_in">modify</span>(root &lt;&lt; <span class="number">1</span>, l, mid, st, ed, x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[x], r), <span class="built_in">calc</span>(line[tr[root]], r)) &gt; <span class="number">0</span>) <span class="built_in">modify</span>(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, st, ed, x);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>查询到单点就行了，没有太多问题。</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[root];</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= mid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tem = <span class="built_in">query</span>(root &lt;&lt; <span class="number">1</span>, l, mid, x);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[tem], x), <span class="built_in">calc</span>(line[tr[root]], x)) &gt; <span class="number">0</span> ? tem : tr[root];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> tem = <span class="built_in">query</span>(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[tem], x), <span class="built_in">calc</span>(line[tr[root]], x)) &gt; <span class="number">0</span> ? tem : tr[root];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="luogu-P4097-HEOI2013-Segment"><a href="#luogu-P4097-HEOI2013-Segment" class="headerlink" title="luogu P4097 [HEOI2013]Segment"></a><a href="https://www.luogu.com.cn/problem/P4097">luogu P4097 [HEOI2013]Segment</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, M = <span class="number">4e4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> k, b;</span><br><span class="line">&#125;line[N];</span><br><span class="line"><span class="keyword">int</span> tr[M * <span class="number">4</span> + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> cnt, last;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">(Line x, <span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.b + d * x.k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(x - y) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> st, <span class="keyword">int</span> ed, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(st &lt;= l &amp;&amp; r &lt;= ed)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[x], mid), <span class="built_in">calc</span>(line[tr[root]], mid)) &gt; <span class="number">0</span>) <span class="built_in">swap</span>(tr[root], x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[x], l), <span class="built_in">calc</span>(line[tr[root]], l)) &gt; <span class="number">0</span>) <span class="built_in">modify</span>(root &lt;&lt; <span class="number">1</span>, l, mid, st, ed, x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[x], r), <span class="built_in">calc</span>(line[tr[root]], r)) &gt; <span class="number">0</span>) <span class="built_in">modify</span>(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, st, ed, x);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(st &lt;= mid) <span class="built_in">modify</span>(root &lt;&lt; <span class="number">1</span>, l, mid, st, ed, x);</span><br><span class="line"><span class="keyword">if</span>(ed &gt; mid) <span class="built_in">modify</span>(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, st, ed, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[root];</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= mid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tem = <span class="built_in">query</span>(root &lt;&lt; <span class="number">1</span>, l, mid, x);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[tem], x), <span class="built_in">calc</span>(line[tr[root]], x)) &gt; <span class="number">0</span> ? tem : tr[root];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> tem = <span class="built_in">query</span>(root &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, x);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dcmp</span>(<span class="built_in">calc</span>(line[tem], x), <span class="built_in">calc</span>(line[tr[root]], x)) &gt; <span class="number">0</span> ? tem : tr[root];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">x = (x + last - <span class="number">1</span>) % <span class="number">39989</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ma</span><span class="params">(<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">y = (y + last - <span class="number">1</span>) % <span class="number">1000000000</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> o, <span class="keyword">int</span> u)</span> <span class="comment">// 建立新线段</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == o) line[++ cnt] = &#123;<span class="number">0</span>, <span class="built_in">max</span>(y, u)&#125;;</span><br><span class="line"><span class="keyword">else</span> line[++ cnt] = &#123;<span class="number">1.0</span> * (u - y) / (o - x), y - <span class="number">1.0</span> * (u - y) / (o - x) * x&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> op;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line"><span class="keyword">if</span>(!op)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">x = (x + last - <span class="number">1</span>) % <span class="number">39989</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, last = <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, M, x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, o, u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;o, &amp;u);</span><br><span class="line"><span class="built_in">make</span>(x), <span class="built_in">ma</span>(y), <span class="built_in">make</span>(o), <span class="built_in">ma</span>(u);</span><br><span class="line"><span class="keyword">if</span>(x &gt; o) <span class="built_in">swap</span>(x, o), <span class="built_in">swap</span>(y, u);</span><br><span class="line"><span class="built_in">add</span>(x, y, o, u);</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, M, x, o, cnt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三角剖分</title>
      <link href="/2022/01/21/%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86/"/>
      <url>/2022/01/21/%E4%B8%89%E8%A7%92%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>先搁着。</p><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转卡壳</title>
      <link href="/2022/01/21/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/"/>
      <url>/2022/01/21/%E6%97%8B%E8%BD%AC%E5%8D%A1%E5%A3%B3/</url>
      
        <content type="html"><![CDATA[<p>还是先搁着。</p><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>半平面交</title>
      <link href="/2022/01/21/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/"/>
      <url>/2022/01/21/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<p>又是一篇鸽了许久的博客。</p><span id="more"></span><p>本着以前学的东西就简单写的原则，我们只写重点。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>点积： $a.x * b.y + a.y * b.y$。</li><li>叉积：$a.x * b.y - a.y * b.x$。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三维计算几何基础</title>
      <link href="/2022/01/20/%E4%B8%89%E7%BB%B4%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/01/20/%E4%B8%89%E7%BB%B4%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<ol><li><p>三维向量表示(x, y, z)</p> <span id="more"></span></li><li><p>向量加减法、数乘运算，与二维相同</p></li><li><p>模长 |A| = sqrt(x * x + y * y + z * z)</p></li><li><p>点积<br> (1) 几何意义：A·B = |A| * |B| * cos(C)<br> (2) 代数求解：(x1, y1, z1) · (x2, y2, z2) = (x1x2, y1y2, z1z2);</p></li><li><p>叉积<br> (1) 几何意义：AxB = |A| * |B| * sin(C)，方向：右手定则<br> (2) 代数求解：AxB = (y1z2 - z1y2, z1x2 - x1z2, x1y2 - x2y1)</p></li><li><p>如何求平面法向量<br> 任取平面上两个不共线的向量A、B：AxB</p></li><li><p>判断点D是否在平面里<br> 任取平面上两个不共线的向量A、B：先求法向量C = AxB，然后求平面上任意一点到D的向量E与C的点积，判断点积是否为0。</p></li><li><p>求点D到平面的距离<br> 任取平面上两个不共线的向量A、B：先求法向量C = AxB。然后求平面上任意一点到D的向量E在C上的投影长度即可。即：E·C / |C|</p></li><li><p>多面体欧拉定理<br> 顶点数 - 棱长数 + 表面数 = 2</p></li><li><p>三维凸包</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最小圆覆盖</title>
      <link href="/2022/01/20/%E6%9C%80%E5%B0%8F%E5%9C%86%E8%A6%86%E7%9B%96/"/>
      <url>/2022/01/20/%E6%9C%80%E5%B0%8F%E5%9C%86%E8%A6%86%E7%9B%96/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><span id="more"></span><h2 id="相关性质"><a href="#相关性质" class="headerlink" title="相关性质"></a>相关性质</h2><ul><li>最小覆盖圆是唯一的。</li><li>若 $P$ 不在 $S$ 的最小覆盖圆的内部， 则 $P$ 一定在 ${P}\cup S$ 的最小覆盖圆的边上。</li></ul><h2 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h2><p>由上面的性质我，如果前 $i - 1$ 个点的最小圆覆盖是 $C$  那么我们可以得到：</p><ul><li>如果第 $i$ 个点在圆上的话，那么前$i - 1$ 个点的最小圆覆盖是 $C$。 </li><li>如果不在，那么 $i$ 一定在前 $i$ 个点的最小覆盖圆上。</li><li>因此，我们固定 $i$，以 $P_i$ 为圆心，以0为半径，继续寻找还有那两个点在前 $i$ 个点的最小圆覆盖上。</li><li>从 1 到 $i - 1$ 枚举 $j$ ，找到第一个点 $j$ 不在 $C$ 上，当前圆心就为 $\frac{P_i + P_j} 2$，半径就为 $ |P_i P_j|$。</li><li>紧接着再固定圆心，继续不停寻找第三个点 $P_k$，根据三点固定一圆，$C$ 即可固定。</li></ul><h2 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h2><ul><li>将点随机化。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)</span><br><span class="line">    <span class="keyword">if</span>(i不在圆内则i必须在<span class="number">1</span>~i的圆的边上)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="comment">// 插入i，重构圆</span></span><br><span class="line">遍历圆</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; i;j ++)</span><br><span class="line">             <span class="keyword">if</span>(j不在圆内，则j就必须在<span class="number">1</span>~j - <span class="number">1</span>和i，且i在圆边上的最小圆的边上)</span><br><span class="line">                 圆&lt;-以Pi，Pj为直径的圆</span><br><span class="line">                 <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt; j;k ++)</span><br><span class="line">                        <span class="keyword">if</span>(k不在圆内，则j就必须在<span class="number">1</span>~k - <span class="number">1</span>和i，j，且i，j在圆边上的最小圆的边上)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="外接圆的补充说明"><a href="#外接圆的补充说明" class="headerlink" title="外接圆的补充说明"></a>外接圆的补充说明</h2><p>初中的中垂线确定圆心的方法给予我们启示，我们需要以下工具：</p><ul><li>求得两个向量的中点。</li><li>将一个向量旋转 $90^\circ$。</li><li>用一点和一条向量确定一条直线。</li><li>求两条直线的交点。</li></ul><p>第一个任务，将向量直接 $/2$。</p><p>第二个任务，$rotate$ 函数即可解决。</p><p>第三个任务，不说了。</p><p>第四个任务，根据向量的叉乘我们可以知道    </p><p><img src="1.png" alt="image"></p><p>用 $O = I + Vt$，$(I + Vt - P) * W = 0$ 解得<br>$$<br>\begin{align}<br>t &amp;= \frac {(P - I) * W}{V*W} \\<br>O &amp;= I + Vt<br>\end{align}<br>$$<br>由此，圆心即求出来了。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="P1742-最小圆覆盖"><a href="#P1742-最小圆覆盖" class="headerlink" title="P1742 最小圆覆盖"></a><a href="https://www.luogu.com.cn/problem/P1742">P1742 最小圆覆盖</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">PII q[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">PII p;</span><br><span class="line"><span class="keyword">double</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sign</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(x - y) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 基本运算 </span></span><br><span class="line">PII <span class="keyword">operator</span>- (PII a, PII b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x - b.x, a.y - b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>+ (PII a, PII b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x + b.x, a.y + b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>* (PII a, <span class="keyword">double</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x * b, a.y * b&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>/ (PII a, <span class="keyword">double</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x / b, a.y / b&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">operator</span>* (PII a, PII b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function">PII <span class="title">rotate</span><span class="params">(PII a, <span class="keyword">double</span> b)</span> <span class="comment">// 将向量a旋转b角度 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x * <span class="built_in">cos</span>(b) + a.y * <span class="built_in">sin</span>(b), -a.x * <span class="built_in">sin</span>(b) + a.y * <span class="built_in">cos</span>(b)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_dist</span><span class="params">(PII a, PII b)</span> <span class="comment">// 计算a到 b的距离 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dx = a.x - b.x;</span><br><span class="line">    <span class="keyword">double</span> dy = a.y - b.y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(dx * dx + dy * dy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PII <span class="title">get_line_intersection</span><span class="params">(PII p, PII v, PII q, PII w)</span> <span class="comment">// 求交点 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PII u = p - q;</span><br><span class="line"><span class="keyword">double</span> t = w * u / (v * w);</span><br><span class="line"><span class="keyword">return</span> p + v * t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pair&lt;PII, PII&gt; <span class="title">get_line</span><span class="params">(PII a, PII b)</span> <span class="comment">// 求中垂线 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;(a + b) / <span class="number">2</span>, <span class="built_in">rotate</span>(b - a, PI / <span class="number">2</span>)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Circle <span class="title">get_circle</span><span class="params">(PII a, PII b, PII c)</span> <span class="comment">// 求圆心 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pair&lt;PII, PII&gt; u = <span class="built_in">get_line</span>(a, b), v = <span class="built_in">get_line</span>(a, c);</span><br><span class="line">PII p = <span class="built_in">get_line_intersection</span>(u.x, u.y, v.x, v.y);</span><br><span class="line"><span class="keyword">return</span> &#123;p, <span class="built_in">get_dist</span>(p, a)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;q[i].x, &amp;q[i].y);</span><br><span class="line"><span class="built_in">random_shuffle</span>(q, q + n);</span><br><span class="line"><span class="function">Circle <span class="title">c</span><span class="params">(&#123;q[<span class="number">0</span>], <span class="number">0</span>&#125;)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i ++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(c.r, <span class="built_in">get_dist</span>(c.p, q[i])) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = &#123;q[i], <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; i;j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(c.r, <span class="built_in">get_dist</span>(c.p, q[j])) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = &#123;(q[i] + q[j]) / <span class="number">2</span>, <span class="built_in">get_dist</span>(q[i], q[j]) / <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; j;k ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(c.r, <span class="built_in">get_dist</span>(c.p, q[k])) &lt; <span class="number">0</span>)</span><br><span class="line">c = <span class="built_in">get_circle</span>(q[i], q[j], q[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.10lf\n&quot;</span>, c.r);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.10lf %.10lf\n&quot;</span>, c.p.x, c.p.y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="P4288-SHOI2014-信号增幅仪"><a href="#P4288-SHOI2014-信号增幅仪" class="headerlink" title="P4288 [SHOI2014]信号增幅仪"></a><a href="https://www.luogu.com.cn/problem/P4288">P4288 [SHOI2014]信号增幅仪</a></h2><ul><li>严格来讲如果知道压缩椭圆，旋转坐标轴的话应该还是算模板题的。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;double, double&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50010</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">PII q[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">PII p;</span><br><span class="line"><span class="keyword">double</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sign</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(x - y) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>- (PII a, PII b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x - b.x, a.y - b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>+ (PII a, PII b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x + b.x, a.y + b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>* (PII a, <span class="keyword">double</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x * b, a.y * b&#125;;</span><br><span class="line">&#125;</span><br><span class="line">PII <span class="keyword">operator</span>/ (PII a, <span class="keyword">double</span> b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x / b, a.y / b&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">operator</span>* (PII a, PII b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.x * b.y - a.y * b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">PII <span class="title">rotate</span><span class="params">(PII a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;a.x * <span class="built_in">cos</span>(b) + a.y * <span class="built_in">sin</span>(b), -a.x * <span class="built_in">sin</span>(b) + a.y * <span class="built_in">cos</span>(b)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_dist</span><span class="params">(PII a, PII b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> dx = a.x - b.x;</span><br><span class="line">    <span class="keyword">double</span> dy = a.y - b.y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(dx * dx + dy * dy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PII <span class="title">get_line_intersection</span><span class="params">(PII p, PII v, PII q, PII w)</span> <span class="comment">// 求交点 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PII u = p - q;</span><br><span class="line"><span class="keyword">double</span> t = w * u / (v * w);</span><br><span class="line"><span class="keyword">return</span> p + v * t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pair&lt;PII, PII&gt; <span class="title">get_line</span><span class="params">(PII a, PII b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;(a + b) / <span class="number">2</span>, <span class="built_in">rotate</span>(b - a, PI / <span class="number">2</span>)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Circle <span class="title">get_circle</span><span class="params">(PII a, PII b, PII c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pair&lt;PII, PII&gt; u = <span class="built_in">get_line</span>(a, b), v = <span class="built_in">get_line</span>(a, c);</span><br><span class="line">PII p = <span class="built_in">get_line_intersection</span>(u.x, u.y, v.x, v.y);</span><br><span class="line"><span class="keyword">return</span> &#123;p, <span class="built_in">get_dist</span>(p, a)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;q[i].x, &amp;q[i].y);</span><br><span class="line"><span class="keyword">double</span> a, p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;a, &amp;p);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++)</span><br><span class="line">&#123;</span><br><span class="line">q[i] = <span class="built_in">rotate</span>(q[i], a / <span class="number">180</span> * PI);</span><br><span class="line">q[i].x /= p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">random_shuffle</span>(q, q + n);</span><br><span class="line"><span class="function">Circle <span class="title">c</span><span class="params">(&#123;q[<span class="number">0</span>], <span class="number">0</span>&#125;)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i ++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(c.r, <span class="built_in">get_dist</span>(c.p, q[i])) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = &#123;q[i], <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; i;j ++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(c.r, <span class="built_in">get_dist</span>(c.p, q[j])) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = &#123;(q[i] + q[j]) / <span class="number">2</span>, <span class="built_in">get_dist</span>(q[i], q[j]) / <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; j;k ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dcmp</span>(c.r, <span class="built_in">get_dist</span>(c.p, q[k])) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = <span class="built_in">get_circle</span>(q[i], q[j], q[k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3lf&quot;</span>, c.r);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算几何</title>
      <link href="/2022/01/19/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
      <url>/2022/01/19/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/</url>
      
        <content type="html"><![CDATA[<p>毒瘤码量类。</p><span id="more"></span><h1 id="前置知识点"><a href="#前置知识点" class="headerlink" title="前置知识点"></a>前置知识点</h1><ul><li>$pi = acos(-1)$。</li><li>余弦定理 $c^2 = a^2 + b^2 - 2ab \cos(t)$。</li></ul><h1 id="浮点数的比较"><a href="#浮点数的比较" class="headerlink" title="浮点数的比较"></a>浮点数的比较</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sign</span><span class="params">(<span class="keyword">double</span> x)</span>  <span class="comment">// 符号函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span>  <span class="comment">// 比较函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fabs</span>(x - y) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; y) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h1><ul><li>向量的加减法和数乘运算</li></ul><h2 id="内积（点积）"><a href="#内积（点积）" class="headerlink" title="内积（点积）"></a>内积（点积）</h2><ul><li><p>$ A·B = |A||B|cos(C)$</p></li><li><p>几何意义：向量A在向量B上的投影与B的长度的乘积。</p></li><li><p>代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x * b.x + a.y * b.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="外积（叉积）"><a href="#外积（叉积）" class="headerlink" title="外积（叉积）"></a>外积（叉积）</h2><ul><li><p>$AxB = |A||B| \sin(C)$</p></li><li><p>几何意义：向量A与B张成的平行四边形的有向面积。B在A的逆时针方向为正。</p></li><li><p>代码实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x * b.y - b.x * a.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><ul><li><p>取模</p><pre><code><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_length</span><span class="params">(Point a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">dot</span>(a, a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>计算向量夹角</p><pre><code>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_angle</span><span class="params">(Point a, Point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">acos</span>(<span class="built_in">dot</span>(a, b) / <span class="built_in">get_length</span>(a) / <span class="built_in">get_length</span>(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>计算两个向量构成的平行四边形有向面积</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(Point a, Point b, Point c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cross</span>(b - a, c - a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>向量A顺时针旋转C的角度：</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Point <span class="title">rotate</span><span class="params">(Point a, <span class="keyword">double</span> angle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Point</span>(a.x * <span class="built_in">cos</span>(angle) + a.y * <span class="built_in">sin</span>(angle), -a.x * <span class="built_in">sin</span>(angle) + a.y * <span class="built_in">cos</span>(angle));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="点与线"><a href="#点与线" class="headerlink" title="点与线"></a>点与线</h1><h2 id="直线定理"><a href="#直线定理" class="headerlink" title="直线定理"></a>直线定理</h2><ul><li><p>一般式 $ax + by + c = 0$</p></li><li><p>点向式 $p_0 + \vec vt$</p></li><li><p>斜截式 $y = kx + b$</p></li></ul><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><ul><li><p>判断点在直线上 $\vec A \times \vec B = 0$</p></li><li><p>两直线相交</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  cross(v, w) == 0则两直线平行或者重合</span></span><br><span class="line">    <span class="function">Point <span class="title">get_line_intersection</span><span class="params">(Point p, Vector v, Point q, vector w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        vector u = p - q;</span><br><span class="line">        <span class="keyword">double</span> t = <span class="built_in">cross</span>(w, u) / <span class="built_in">cross</span>(v, w);</span><br><span class="line">        <span class="keyword">return</span> p + v * t;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>点到直线的距离</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">distance_to_line</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       vector v1 = b - a, v2 = p - a;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">cross</span>(v1, v2) / <span class="built_in">get_length</span>(v1));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>点到线段的距离</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">distance_to_segment</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (a == b) <span class="keyword">return</span> <span class="built_in">get_length</span>(p - a);</span><br><span class="line">       Vector v1 = b - a, v2 = p - a, v3 = p - b;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">sign</span>(<span class="built_in">dot</span>(v1, v2)) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">get_length</span>(v2);</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">sign</span>(<span class="built_in">dot</span>(v1, v3)) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">get_length</span>(v3);</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">distance_to_line</span>(p, a, b);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>点在直线上的投影</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_line_projection</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       Vector v = b - a;</span><br><span class="line">       <span class="keyword">return</span> a + v * (<span class="built_in">dot</span>(v, p - a) / <span class="built_in">dot</span>(v, v));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>点是否在线段上</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">on_segment</span><span class="params">(Point p, Point a, Point b)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">sign</span>(<span class="built_in">cross</span>(p - a, p - b)) == <span class="number">0</span> &amp;&amp; <span class="built_in">sign</span>(<span class="built_in">dot</span>(p - a, p - b)) &lt;= <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>判断两线段是否相交</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">segment_intersection</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">double</span> c1 = <span class="built_in">cross</span>(a2 - a1, b1 - a1), c2 = <span class="built_in">cross</span>(a2 - a1, b2 - a1);</span><br><span class="line">       <span class="keyword">double</span> c3 = <span class="built_in">cross</span>(b2 - b1, a2 - b1), c4 = <span class="built_in">cross</span>(b2 - b1, a1 - b1);</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">sign</span>(c1) * <span class="built_in">sign</span>(c2) &lt;= <span class="number">0</span> &amp;&amp; <span class="built_in">sign</span>(c3) * <span class="built_in">sign</span>(c4) &lt;= <span class="number">0</span>;</span><br><span class="line">   &#125; </span><br></pre></td></tr></table></figure></li></ul><h1 id="多边形"><a href="#多边形" class="headerlink" title="多边形"></a>多边形</h1><h2 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h2><ul><li><p>面积</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1) 叉积</span><br><span class="line">(2) 海伦公式:</span><br><span class="line">       p = (a + b + c) / 2;</span><br><span class="line">       S = sqrt(p(p - a) * (p - b) * (p - c));</span><br></pre></td></tr></table></figure></li><li><p>三角形四心</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(1) 外心，外接圆圆心</span><br><span class="line">        三边中垂线交点。到三角形三个顶点的距离相等</span><br><span class="line">    (2) 内心，内切圆圆心</span><br><span class="line">        角平分线交点，到三边距离相等</span><br><span class="line">    (3) 垂心</span><br><span class="line">        三条垂线交点</span><br><span class="line">    (4) 重心</span><br><span class="line">        三条中线交点（到三角形三顶点距离的平方和最小的点，三角形内到三边距离之积最大的点）</span><br></pre></td></tr></table></figure><h2 id="普通多边形"><a href="#普通多边形" class="headerlink" title="普通多边形"></a>普通多边形</h2><ul><li>通常按逆时针存储所有点</li></ul><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><pre><code>  (1) 多边形      由在同一平面且不再同一直线上的多条线段首尾顺次连接且不相交所组成的图形叫多边形  (2) 简单多边形      简单多边形是除相邻边外其它边不相交的多边形  (3) 凸多边形      过多边形的任意一边做一条直线，如果其他各个顶点都在这条直线的同侧，则把这个多边形叫做凸多边形      任意凸多边形外角和均为360°      任意凸多边形内角和为(n-2)180°</code></pre><h2 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h2><ul><li><p>求多边形面积（不一定是凸多边形）</p></li><li><p>我们可以从第一个顶点除法把凸多边形分成 $n - 2$个三角形，然后把面积加起来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">polygon_area</span><span class="params">(Point p[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">double</span> s = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + <span class="number">1</span> &lt; n; i ++ )</span><br><span class="line">           s += <span class="built_in">cross</span>(p[i] - p[<span class="number">0</span>], p[i + <span class="number">1</span>] - p[i]);</span><br><span class="line">       <span class="keyword">return</span> s / <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>判断点是否在多边形内（不一定是凸多边形）</p><pre><code>1. 射线法，从该点任意做一条和所有边都不平行的射线。交点个数为偶数，则在多边形外，为奇数，则在多边形内。    2. 转角法</code></pre></li><li><p>判断点是否在凸多边形内</p><pre><code>只需判断点是否在所有边的左边（逆时针存储多边形）。</code></pre><h2 id="皮克定理"><a href="#皮克定理" class="headerlink" title="皮克定理"></a>皮克定理</h2><pre><code>皮克定理是指一个计算点阵中顶点在格点上的多边形面积公式该公式可以表示为:    S = a + b/2 - 1其中a表示多边形内部的点数，b表示多边形边界上的点数，S表示多边形的面积。</code></pre></li></ul></li></ul><h1 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h1><pre><code>(1) 圆与直线交点(2) 两圆交点(3) 点到圆的切线(4) 两圆公切线(5) 两圆相交面积</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一月三日省选集训</title>
      <link href="/2022/01/03/%E4%B8%80%E6%9C%88%E4%B8%89%E6%97%A5%E7%9C%81%E9%80%89%E9%9B%86%E8%AE%AD/"/>
      <url>/2022/01/03/%E4%B8%80%E6%9C%88%E4%B8%89%E6%97%A5%E7%9C%81%E9%80%89%E9%9B%86%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<p>还没考完就开始写总结的恐怕只有我一个吧。</p><span id="more"></span>]]></content>
      
      
      
        <tags>
            
            <tag> 考后总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4927 梦美与线段树</title>
      <link href="/2022/01/02/P4927-%E6%A2%A6%E7%BE%8E%E4%B8%8E%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2022/01/02/P4927-%E6%A2%A6%E7%BE%8E%E4%B8%8E%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>联赛之后连裸的线段树模板都打得如此痛苦。</p><p>自闭了，$QWQ$</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><ul><li>首先考虑三个点的情况</li></ul><p><img src="https://s2.loli.net/2022/01/02/xHiAGR1ErXyLMql.png" alt="无标题.png"></p><ul><li>不难发现此时答案为：$v_{fa} * 1 + v_{s1} * \frac{v_{s1}}{v_{fa}} + v_{s2} * \frac{v_{s2}}{v_{fa}} = \frac{v_{fa}^2 + v_{s1}^2 + v_{s2}^2}{v_{fa}}$，这时我们再将三个点上推到所有情况，设每个单点的答案为 $w$，可得</li></ul><p>$$<br>w_{fa} = \frac {\sum v_{son}^2 + v_{fa}^2}{v_{fa}}<br>$$</p><ul><li><p>再考虑懒标记下传的情况，具体地，设 $s2$ 表示节点权值示平方和， $sl2$ 表示节点长度平方和（它只用算一次，是不变的）， $sm$ 是 $v_i * len_i$ 的和有：<br>$$<br>\begin{aligned}<br>pushup : \\<br>&amp; v_i = v_{lc} + v_{rc} \\<br>&amp; s2_i = v_i^2 + s2_{lc} + s2_{rc} \\<br>&amp; sl2_i = len_i^2 + sl2_{lc} + sl2_{rc} \\<br>&amp; sm_i = len_i * v_i + sm_{lc} + sm_{rc} \\<br>pushdown : \\<br>&amp; s2_i = sl2_i * d^2 + 2d * sm_i + s2_i \\<br>&amp; v_i = len_i * d + v_i \\<br>&amp; sm_i = sl2_i * d + sm_i \\<br>\end{aligned}<br>$$</p></li><li><p>然后你一交，就 $WA$ 了。</p></li><li><p>在评论区游走了许久，才发现在不约分的情况下，$q$ 可能是 $mod$ 的倍数，所以一模答案就会变成0，而且答案可能在中途爆 $long \ long$ 所以我们直接手写高精（<del>$int128$ 强行水掉</del>）卡过这道题。</p></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> l(x) x &lt;&lt; 1 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(x) x &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL __int128</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line">LL v, flag, len;</span><br><span class="line">LL sum;</span><br><span class="line">LL num;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">LL a[N];</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (res * x) % mod;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">x = (x * x) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> pol</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL len = tr[x].r - tr[x].l + <span class="number">1</span>;</span><br><span class="line">tr[x].sum = (tr[<span class="built_in">l</span>(x)].sum + tr[<span class="built_in">r</span>(x)].sum);</span><br><span class="line">tr[x].num = (tr[<span class="built_in">l</span>(x)].num + tr[<span class="built_in">r</span>(x)].num + tr[x].sum * tr[x].sum);</span><br><span class="line">tr[x].v = (tr[<span class="built_in">l</span>(x)].v + tr[<span class="built_in">r</span>(x)].v + len * tr[x].sum);</span><br><span class="line">tr[x].len = (tr[<span class="built_in">l</span>(x)].len + tr[<span class="built_in">r</span>(x)].len + len * len);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> emb</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL len = tr[x].r - tr[x].l + <span class="number">1</span>;</span><br><span class="line">tr[x].sum = (tr[<span class="built_in">l</span>(x)].sum + tr[<span class="built_in">r</span>(x)].sum);</span><br><span class="line">tr[x].num = (tr[<span class="built_in">l</span>(x)].num + tr[<span class="built_in">r</span>(x)].num + tr[x].sum * tr[x].sum);</span><br><span class="line">tr[x].v = (tr[<span class="built_in">l</span>(x)].v + tr[<span class="built_in">r</span>(x)].v + len * tr[x].sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, LL w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL len = tr[x].r - tr[x].l + <span class="number">1</span>;</span><br><span class="line">tr[x].num = ((tr[x].len * w * w + <span class="number">2</span> * w * tr[x].v) + tr[x].num);</span><br><span class="line">tr[x].flag = (tr[x].flag + w);</span><br><span class="line">tr[x].sum = (tr[x].sum + w * len);</span><br><span class="line">tr[x].v = (tr[x].len * w + tr[x].v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add</span>(<span class="built_in">l</span>(x), tr[x].flag);</span><br><span class="line"><span class="built_in">add</span>(<span class="built_in">r</span>(x), tr[x].flag);</span><br><span class="line">tr[x].flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) </span><br><span class="line">&#123;</span><br><span class="line">tr[x].sum = a[l];</span><br><span class="line">tr[x].l = tr[x].r = l;</span><br><span class="line">tr[x].num = a[l] * a[l];</span><br><span class="line">tr[x].v = a[l];</span><br><span class="line">tr[x].len = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">tr[x].l = l, tr[x].r = r;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line"><span class="built_in">build</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">pol:: <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, LL w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= tr[x].l &amp;&amp; tr[x].r &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">add</span>(x, w);</span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line"><span class="keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= mid) <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span>, l, r, w);</span><br><span class="line"><span class="keyword">if</span>(r &gt; mid) <span class="built_in">modify</span>(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, w);</span><br><span class="line">emb:: <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL x, LL y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> y ? <span class="built_in">gcd</span>(y, x % y) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">ask</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL t = <span class="built_in">gcd</span>(tr[<span class="number">1</span>].sum, tr[<span class="number">1</span>].num);</span><br><span class="line">LL x1 = tr[<span class="number">1</span>].num / t;</span><br><span class="line">LL x2 = tr[<span class="number">1</span>].sum / t;</span><br><span class="line"><span class="keyword">return</span> x1  % mod * <span class="built_in">qpow</span>(x2, mod - <span class="number">2</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">10</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(a[i]);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> op;</span><br><span class="line"><span class="built_in">read</span>(op);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">write</span>((<span class="built_in">ask</span>() + mod) % mod);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line">LL w;</span><br><span class="line"><span class="built_in">read</span>(l), <span class="built_in">read</span>(r), <span class="built_in">read</span>(w);</span><br><span class="line"><span class="built_in">modify</span>(<span class="number">1</span>, l, r, w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平衡树</title>
      <link href="/2022/01/01/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
      <url>/2022/01/01/%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>$splay$ 应该不用讲吧，就写写 $fhq \ Treap$ 就可以了。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="可执行的操作"><a href="#可执行的操作" class="headerlink" title="可执行的操作"></a>可执行的操作</h2><ul><li>分离（$split$）将一棵树分成两棵树。</li><li>合并（$merge$）将两棵树合成一棵树。</li></ul><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><ul><li>它的主要思想是将一个 $Treap$ 分成两个。</li><li>这样的操作有两种类型：1.按权值来分。2.按前 $k$ 个来分。</li></ul><h3 id="权值版"><a href="#权值版" class="headerlink" title="权值版"></a>权值版</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> k, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!now) x = y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (val[now] &lt;= k) x = now, <span class="built_in">split</span>(ch[now][<span class="number">1</span>], k, ch[now][<span class="number">1</span>], y);</span><br><span class="line">        <span class="keyword">else</span> y = now, <span class="built_in">split</span>(ch[now][<span class="number">0</span>], k, x, ch[now][<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">pushup</span>(now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前k个"><a href="#前k个" class="headerlink" title="前k个"></a>前k个</h3><ul><li>其实这和 $Splay$ 的找 $k$ 大数差不多。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> k, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!now) x = y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(val[now] &lt;= k) x = now, <span class="built_in">split</span>(ch[now][<span class="number">1</span>], k, ch[now][<span class="number">1</span>], y);</span><br><span class="line"><span class="keyword">else</span> y = now, <span class="built_in">split</span>(ch[now][<span class="number">0</span>], k, x, ch[now][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><ul><li>将两个 $Treap$ 合成一个，保证第一个的权值小于第二个。</li><li>满足大数一定在右边，小数一定在左边，但是因为是按随机权值插入，所以树的形状不固定（考试时 $TLE$  了一定要申诉）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line"><span class="keyword">if</span>(pri[x] &lt; pri[y])</span><br><span class="line">&#123;</span><br><span class="line">ch[x][<span class="number">1</span>] = <span class="built_in">merge</span>(ch[x][<span class="number">1</span>], y);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ch[y][<span class="number">0</span>] = <span class="built_in">merge</span>(x, ch[y][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展之后的操作"><a href="#拓展之后的操作" class="headerlink" title="拓展之后的操作"></a>拓展之后的操作</h2><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><ul><li>插入一个权值为 $v$ 的点，先把树按照 $v$ 的权值 $split$ 成两个，在按照顺序merge回去。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root, v, x, y);</span><br><span class="line">root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(x, <span class="built_in">make</span>(v)), y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root, v, x, z);</span><br><span class="line"><span class="built_in">split</span>(x, v - <span class="number">1</span>, x, y);</span><br><span class="line">y = <span class="built_in">merge</span>(ch[y][<span class="number">0</span>], ch[y][<span class="number">1</span>]);</span><br><span class="line">root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(x, y), z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="near"><a href="#near" class="headerlink" title="near"></a>near</h3><ul><li>就是前驱后继</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">near</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">bool</span> op)</span> <span class="comment">// op == 1 为前驱，反之即为后继 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root, v - (op == <span class="number">0</span>), x, y);</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">0</span>) k = val[<span class="built_in">get_k</span>(x, sz[x])];</span><br><span class="line"><span class="keyword">else</span>  k = val[<span class="built_in">get_k</span>(y, <span class="number">1</span>)];</span><br><span class="line">root = <span class="built_in">merge</span>(x, y);</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例题：luoguP3369-【模板】普通平衡树"><a href="#例题：luoguP3369-【模板】普通平衡树" class="headerlink" title="例题：luoguP3369 【模板】普通平衡树"></a>例题：<a href="https://www.luogu.com.cn/problem/P3369">luoguP3369 【模板】普通平衡树</a></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100001</span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)&#123;<span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>, c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line"><span class="keyword">int</span> ch[N][<span class="number">3</span>]; <span class="comment">// 儿子</span></span><br><span class="line"><span class="keyword">int</span> val[N]; <span class="comment">// 每个点的权值 </span></span><br><span class="line"><span class="keyword">int</span> pri[N]; <span class="comment">// 随机生成的附件权值？ </span></span><br><span class="line"><span class="keyword">int</span> sz[N]; <span class="comment">// 以 i 为节点的树的节点的数量 </span></span><br><span class="line"><span class="keyword">int</span> tot; <span class="comment">// 总节点数量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sz[x] = sz[ch[x][<span class="number">0</span>]] + sz[ch[x][<span class="number">1</span>]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">make</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sz[++ tot] = <span class="number">1</span>, val[tot] = v, pri[tot] = <span class="built_in">rand</span>();</span><br><span class="line"><span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">// 合并 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line"><span class="keyword">if</span>(pri[x] &lt; pri[y])</span><br><span class="line">&#123;</span><br><span class="line">ch[x][<span class="number">1</span>] = <span class="built_in">merge</span>(ch[x][<span class="number">1</span>], y);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ch[y][<span class="number">0</span>] = <span class="built_in">merge</span>(x, ch[y][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> k, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!now) x = y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(val[now] &lt;= k) x = now, <span class="built_in">split</span>(ch[now][<span class="number">1</span>], k, ch[now][<span class="number">1</span>], y);</span><br><span class="line"><span class="keyword">else</span> y = now, <span class="built_in">split</span>(ch[now][<span class="number">0</span>], k, x, ch[now][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_k</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k &lt;= sz[ch[now][<span class="number">0</span>]]) now = ch[now][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k == sz[ch[now][<span class="number">0</span>]] + <span class="number">1</span>) <span class="keyword">return</span> now;</span><br><span class="line"><span class="keyword">else</span> k -= sz[ch[now][<span class="number">0</span>]] + <span class="number">1</span>, now = ch[now][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> pol</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, z;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root, v, x, y);</span><br><span class="line">root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(x, <span class="built_in">make</span>(v)), y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root, v, x, z);</span><br><span class="line"><span class="built_in">split</span>(x, v - <span class="number">1</span>, x, y);</span><br><span class="line">y = <span class="built_in">merge</span>(ch[y][<span class="number">0</span>], ch[y][<span class="number">1</span>]);</span><br><span class="line">root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(x, y), z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">near</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">bool</span> op)</span> <span class="comment">// op == 1 为前驱，反之即为后继 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">split</span>(root, v - (op == <span class="number">0</span>), x, y);</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">0</span>) k = val[<span class="built_in">get_k</span>(x, sz[x])];</span><br><span class="line"><span class="keyword">else</span>  k = val[<span class="built_in">get_k</span>(y, <span class="number">1</span>)];</span><br><span class="line">root = <span class="built_in">merge</span>(x, y);</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>((<span class="keyword">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line"><span class="built_in">read</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> op, a;</span><br><span class="line"><span class="built_in">read</span>(op), <span class="built_in">read</span>(a);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">pol:: <span class="built_in">insert</span>(a);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">pol:: <span class="built_in">remove</span>(a);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">split</span>(root, a - <span class="number">1</span>, x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sz[x] + <span class="number">1</span>);</span><br><span class="line">root = <span class="built_in">merge</span>(x, y);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, val[<span class="built_in">get_k</span>(root, a)]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">5</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pol:: <span class="built_in">near</span>(a, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, pol:: <span class="built_in">near</span>(a, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>点分治</title>
      <link href="/2022/01/01/%E7%82%B9%E5%88%86%E6%B2%BB/"/>
      <url>/2022/01/01/%E7%82%B9%E5%88%86%E6%B2%BB/</url>
      
        <content type="html"><![CDATA[<p>又忘了写了， $whk$ 又搞不过来，先鸽一下。</p><span id="more"></span><h1 id="例题Acwing-252-树"><a href="#例题Acwing-252-树" class="headerlink" title="例题Acwing 252. 树"></a>例题<a href="https://www.acwing.com/problem/content/description/254/">Acwing 252. 树</a></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10010</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> h[N], e[M], ne[M], w[M];</span><br><span class="line"><span class="keyword">bool</span> st[N];<span class="comment">//每个数有没有被删掉</span></span><br><span class="line"><span class="keyword">int</span> p[N], q[N]; <span class="comment">// p[] 存当前重心的所有子树的距离， q[] 存当前子树的距离 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx, w[idx] = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_size</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father)</span> <span class="comment">//求子树大小</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line"><span class="keyword">if</span>(e[i] != father)</span><br><span class="line">res += <span class="built_in">get_size</span>(e[i], x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_wc</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father, <span class="keyword">int</span> tot, <span class="keyword">int</span>&amp; wc)</span><span class="comment">// 求重心</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">1</span>, ms = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(j == father) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> t = <span class="built_in">get_wc</span>(j, x, tot, wc);</span><br><span class="line">ms = <span class="built_in">max</span>(ms, t);</span><br><span class="line">sum += t;</span><br><span class="line">&#125;</span><br><span class="line">ms = <span class="built_in">max</span>(ms, tot - sum);</span><br><span class="line"><span class="keyword">if</span>(ms &lt;= tot / <span class="number">2</span>) wc = x;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dist</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father, <span class="keyword">int</span> dist, <span class="keyword">int</span>&amp; qt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st[x]) <span class="keyword">return</span> ;</span><br><span class="line">q[++ qt] = dist;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line"><span class="keyword">if</span>(e[i] != father)</span><br><span class="line"><span class="built_in">get_dist</span>(e[i], x, dist + w[i], qt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(a + <span class="number">1</span>, a + k + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = k, j = <span class="number">0</span>;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(j + <span class="number">1</span> &lt; i &amp;&amp; a[j + <span class="number">1</span>] + a[i] &lt;= m) j ++;</span><br><span class="line">j = <span class="built_in">min</span>(i - <span class="number">1</span>, j);</span><br><span class="line">res += j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_wc</span>(x, <span class="number">-1</span>, <span class="built_in">get_size</span>(x, <span class="number">-1</span>), x);</span><br><span class="line">st[x] = <span class="number">1</span>; <span class="comment">// 删除重心 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i], qt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">get_dist</span>(j, <span class="number">-1</span>, w[i], qt);</span><br><span class="line">res -= <span class="built_in">get</span>(q, qt);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= qt;k ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(q[k] &lt;= m) res ++; <span class="comment">// 其中一个点是重心 </span></span><br><span class="line">p[++ pt] = q[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">res += <span class="built_in">get</span>(p, pt);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">res += <span class="built_in">calc</span>(e[i]);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m), n || m)</span><br><span class="line">&#123;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(st));</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="built_in">add</span>(a, b, c), <span class="built_in">add</span>(b, a, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">calc</span>(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多项式</title>
      <link href="/2021/12/26/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
      <url>/2021/12/26/%E5%A4%9A%E9%A1%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>大佬前辈在线讲课，无奈完全听不懂啊（<del>QWQ</del>）</p><span id="more"></span><ul><li>先写点自己的多项式没家桶。</li></ul><h1 id="多项式乘法luoguP3803-【模板】多项式乘法（FFT）"><a href="#多项式乘法luoguP3803-【模板】多项式乘法（FFT）" class="headerlink" title="多项式乘法luoguP3803 【模板】多项式乘法（FFT）"></a>多项式乘法<a href="https://www.luogu.com.cn/problem/P3803">luoguP3803 【模板】多项式乘法（FFT）</a></h1><ul><li>$NTT / FFT$ 均可。 </li><li>$FFT$</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line">Node <span class="keyword">operator</span>+(<span class="keyword">const</span> Node &amp; t) <span class="keyword">const</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;x + t.x, y + t.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">Node <span class="keyword">operator</span>-(<span class="keyword">const</span> Node &amp; t) <span class="keyword">const</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;x - t.x, y - t.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line">Node <span class="keyword">operator</span>*(<span class="keyword">const</span> Node &amp; t) <span class="keyword">const</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;x * t.x - y * t.y, x * t.y + y * t.x&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;a[N], b[N];</span><br><span class="line"><span class="keyword">int</span> rev[N], bit, tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(Node a[], <span class="keyword">int</span> inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i &lt; rev[i]) <span class="built_in">swap</span>(a[i], a[rev[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> mid = <span class="number">1</span>;mid &lt; tot;mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Node w1 = <span class="built_in">Node</span>(&#123;<span class="built_in">cos</span>(Pi / mid), inv * <span class="built_in">sin</span>(Pi / mid)&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i += mid * <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">Node wk = <span class="built_in">Node</span>(&#123;<span class="number">1</span>, <span class="number">0</span>&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; mid;j ++, wk = wk * w1)</span><br><span class="line">&#123;</span><br><span class="line">Node x = a[i + j], y = wk * a[i + j + mid];</span><br><span class="line">a[i + j] = x + y, a[i + j + mid] = x - y;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i].x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= m;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;b[i].x);</span><br><span class="line"><span class="keyword">while</span>((<span class="number">1</span> &lt;&lt; bit) &lt; n + m + <span class="number">1</span>) bit ++;</span><br><span class="line">tot = <span class="number">1</span> &lt;&lt; bit;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line">rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line"><span class="built_in">fft</span>(a, <span class="number">1</span>), <span class="built_in">fft</span>(b, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= tot;i ++) a[i] = a[i] * b[i];</span><br><span class="line"><span class="built_in">fft</span>(a, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n + m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, (<span class="keyword">int</span>)(a[i].x / tot + <span class="number">0.5</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>$NTT$</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e6</span> + <span class="number">5</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> r[N], bit, tot;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N];</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * x % mod;</span><br><span class="line">x = (x * x) % mod;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot; i ++)</span><br><span class="line"><span class="keyword">if</span>(i &lt; r[i]) <span class="built_in">swap</span>(x[i], x[r[i]]);</span><br><span class="line"><span class="keyword">int</span> mid, len, gn, g, a, b;</span><br><span class="line"><span class="keyword">for</span>(mid = <span class="number">1</span>; mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">len = mid &lt;&lt; <span class="number">1</span>;</span><br><span class="line">gn = <span class="built_in">qpow</span>(<span class="number">3</span>, (mod - <span class="number">1</span>) / len);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">-1</span>) gn = <span class="built_in">qpow</span>(gn, mod - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i += len)</span><br><span class="line">&#123;</span><br><span class="line">g = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; mid;j ++, g = (LL) g * gn % mod)</span><br><span class="line">&#123;</span><br><span class="line">a = x[i + j], b = (LL)g * x[i + j + mid] % mod;</span><br><span class="line">x[i + j] = (a + b) % mod;</span><br><span class="line">x[i + j + mid] = (a - b + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), a[i] = (a[i] + mod) % mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= m;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]), b[i] = (b[i] + mod) % mod;</span><br><span class="line">bit = <span class="number">0</span>, tot = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(tot &lt;= n + m) tot &lt;&lt;= <span class="number">1</span>, bit ++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line">r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line"><span class="built_in">NTT</span>(a, <span class="number">1</span>), <span class="built_in">NTT</span>(b, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line">a[i] = (LL)a[i] * b[i] % mod;</span><br><span class="line"><span class="built_in">NTT</span>(a, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> inv = <span class="built_in">qpow</span>(tot, mod - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n + m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, (LL)a[i] * inv % mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多项式求逆luoguP4238-【模板】多项式乘法逆"><a href="#多项式求逆luoguP4238-【模板】多项式乘法逆" class="headerlink" title="多项式求逆luoguP4238 【模板】多项式乘法逆"></a>多项式求逆<a href="https://www.luogu.com.cn/problem/P4238">luoguP4238 【模板】多项式乘法逆</a></h1><ul><li><p>题目：给定一个多项式 $F(x)$ ，请求出一个多项式 $G(x)$， 满足 $F(x) * G(x) \equiv 1 \pmod{x^n}$。系数对 $998244353$ 取模。</p></li><li><p>我们考虑倍增，设 $G_1(x)$ 满足：$G_1(x) * F(x) \equiv 1 \pmod {x^{\lceil \frac{n}{2} \rceil}}$。</p></li><li><p>那么 $G(X)-G_1(x) \equiv 0 \pmod {x^{\lceil \frac{n}{2} \rceil}}$。</p></li><li><p>$(G(x) - G_0(x))^2 \equiv 0 \pmod {x^n}$。</p></li><li><p>$G^2(x) - 2G(x)G_0(x) + G_0^2(x) \equiv 0 \pmod {x^n}$。</p></li><li><p>我们再根据题目 $F(x) * G(x) \equiv 1 \pmod{x^n}$ 等价变形一下。</p></li><li><p>$G(x) - 2G_0(x) + G_0^2(x)F(x) \equiv 0 \pmod {x^n}$。</p></li><li><p>$G(x) \equiv (2 - G_0(x)F(x))G_0(x) \pmod {x^n}$。</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">5</span>, Mod = <span class="number">998244353</span>, G = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> rev[N], a[N], b[N], n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> bit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; (<span class="number">1</span> &lt;&lt; bit);i ++) rev[i] = (rev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (bit - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">mod</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x %= Mod) &lt; <span class="number">0</span> ? x + Mod : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL a, LL k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (res * a) % Mod;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">a = (a * a) % Mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> bit, <span class="keyword">int</span> inv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">calc</span>(bit);</span><br><span class="line"><span class="keyword">int</span> tot = (<span class="number">1</span> &lt;&lt; bit);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line"><span class="keyword">if</span>(rev[i] &lt; i) <span class="built_in">swap</span>(a[rev[i]], a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> mid = <span class="number">1</span>;mid &lt; tot; mid &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> gn = <span class="built_in">qpow</span>(G, (Mod - <span class="number">1</span>) / (mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span>(inv == <span class="number">-1</span>) gn = <span class="built_in">qpow</span>(gn, Mod - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i += mid * <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> g = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; mid;j ++, g = <span class="number">1ll</span> * g * gn % Mod)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = a[i + j], y = <span class="number">1ll</span> * g * a[i + j + mid] % Mod;</span><br><span class="line">a[i + j] = (x + y) % Mod, a[i + j + mid] = <span class="built_in">mod</span>(x - y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(inv == <span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">LL Inv = <span class="built_in">qpow</span>(tot, Mod - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++) a[i] = <span class="number">1ll</span> * a[i] % Mod * Inv % Mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_ni</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">int</span> a[], <span class="keyword">int</span> b[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> c[N];</span><br><span class="line"><span class="keyword">if</span>(len == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">b[<span class="number">0</span>] = <span class="built_in">qpow</span>(a[<span class="number">0</span>], Mod - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">get_ni</span>((len + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, a, b);</span><br><span class="line"><span class="keyword">int</span> bit = <span class="number">0</span>, tot;</span><br><span class="line"><span class="keyword">while</span>((<span class="number">1</span> &lt;&lt; bit) &lt; (len &lt;&lt; <span class="number">1</span>)) bit ++;</span><br><span class="line">tot = (<span class="number">1</span> &lt;&lt; bit);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line"><span class="keyword">if</span>(i &lt; len) c[i] = a[i];</span><br><span class="line"><span class="keyword">else</span> c[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">NTT</span>(c, bit, <span class="number">1</span>), <span class="built_in">NTT</span>(b, bit, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; tot;i ++)</span><br><span class="line">b[i] = <span class="built_in">mod</span>(<span class="built_in">mod</span>(<span class="number">2ll</span> - <span class="number">1ll</span> * c[i] * b[i] % Mod) * b[i]);</span><br><span class="line"><span class="built_in">NTT</span>(b, bit, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len;i &lt; tot;i ++) b[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="built_in">get_ni</span>(n, a, b);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, b[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多项式除法和取模"><a href="#多项式除法和取模" class="headerlink" title="多项式除法和取模[]"></a>多项式除法和取模[]</h1><ul><li>问题：</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后缀自动机</title>
      <link href="/2021/12/23/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
      <url>/2021/12/23/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>后缀数组都没懂得蒻犇就被巨佬们卷来听后缀自动机，太难了QWQ</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="SAM的性质"><a href="#SAM的性质" class="headerlink" title="SAM的性质"></a>SAM的性质</h2><ul><li>$SAM$ 是一个状态机。一个起点，若干终点。原串的所有的字串和从 $SAM$ 起点开始的所有路径一一对应，不重不漏。所以终点就是包含所有后缀的点。</li><li>每个点包含若干字串，每个子串都一一对应一条从起点到该点的路径。且这些字串一定是里面最长字串的连续后缀。</li></ul><h3 id="SAM问题中经常考虑的两种边"><a href="#SAM问题中经常考虑的两种边" class="headerlink" title="SAM问题中经常考虑的两种边"></a>SAM问题中经常考虑的两种边</h3><ul><li>普通边，类似于 $Trie$。表示在某个状态所表示的所有字串的后面添加一个字串。</li><li>$Link$、$Father$。表示将某个状态所表示的最短字串的首字母删除。这类边构成一棵树。</li></ul><h2 id="SAM的构造思路"><a href="#SAM的构造思路" class="headerlink" title="SAM的构造思路"></a>SAM的构造思路</h2><ul><li>$endpos(s)$：子串s所有出现的位置（尾字母下标）集合。$SAM$ 中的每个状态都一一对应一个 $endpos$ 的等价类。</li></ul><h3 id="endpos的性质："><a href="#endpos的性质：" class="headerlink" title="endpos的性质："></a>endpos的性质：</h3><ul><li>令 $s1,s2$ 为 S 的两个子串 ，不妨设 $|s1|≤|s2|$ （我们用 $|s|$ 表示 $s$ 的长度 ，此处等价于 $s_1$ 不长于 $s_2$ ）。则 $s_1$ 是 $s_2$ 的后缀当且仅当 $endpos(s_1)⊇endpos(s_2)$ ，$s_1$ 不是 $s_2$ 的后缀当且仅当  $endpos(s_1)∩endpos(s_2)=∅$　。</li><li>两个不同子串的 $endpos$，要么有包含关系，要么没有交集。</li><li>两个子串的 $endpos$ 相同，那么短串为长串的后缀。</li><li>对于一个状态 $st$ ，以及任意的 $longest(st)$ 的后缀 $s$ ，如果 $s$ 的长度满足：$|shortest(st)|≤|s|≤|longsest(st)|$ ，那么 $s∈substrings(st)$ 。</li></ul><h2 id="SAM的构造过程"><a href="#SAM的构造过程" class="headerlink" title="SAM的构造过程"></a>SAM的构造过程</h2><ul><li>分类讨论，具体看板书。</li><li>证明较为复杂，略。</li></ul><h2 id="SAM时间复杂度"><a href="#SAM时间复杂度" class="headerlink" title="SAM时间复杂度"></a>SAM时间复杂度</h2><ul><li>线性。</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">1</span>, last = <span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> len, fa;</span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">26</span>];</span><br><span class="line">&#125;node[N];</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line">LL f[N];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[N], ne[N], h[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = last, np = last = ++ tot; <span class="comment">// 插入新状态</span></span><br><span class="line">f[tot] = <span class="number">1</span>;</span><br><span class="line">node[np].len = node[p].len + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(; p &amp;&amp; !node[p].ch[c]; p = node[p].fa) node[p].ch[c] = np;</span><br><span class="line"><span class="keyword">if</span>(!p) node[np].fa = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> q = node[p].ch[c];</span><br><span class="line"><span class="keyword">if</span>(node[q].len == node[p].len + <span class="number">1</span>) node[np].fa = q;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> nq = ++ tot;</span><br><span class="line">node[nq] = node[q], node[nq].len = node[p].len + <span class="number">1</span>;</span><br><span class="line">node[q].fa = node[np].fa = nq;</span><br><span class="line"><span class="keyword">for</span>(; p &amp;&amp; node[p].ch[c] == q; p = node[p].fa) node[p].ch[c] = nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i; i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dfs</span>(e[i]);</span><br><span class="line">f[x] += f[e[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f[x] &gt; <span class="number">1</span>) ans = <span class="built_in">max</span>(ans, f[x] * node[x].len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; str[i];i ++) <span class="built_in">extend</span>(str[i] - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= tot; i ++) <span class="built_in">add</span>(node[i].fa, i);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后缀数组</title>
      <link href="/2021/12/21/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
      <url>/2021/12/21/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>只会倍增</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="前置知识：基数排序"><a href="#前置知识：基数排序" class="headerlink" title="前置知识：基数排序"></a>前置知识：基数排序</h2><ul><li>$O(n)$，通过离散化，前缀和可求出字符串的排名（如果要稳定的话，记得从后往前枚举）。</li></ul><h2 id="算法目的"><a href="#算法目的" class="headerlink" title="算法目的"></a>算法目的</h2><ul><li>在 $O(n \log n)$ 的时间里，将所有的后缀按字典序排序。</li><li>$sa[i]$：排名第 $i$ 位的是第几个后缀。</li><li>$rk[i]$：第 $i$ 个后缀的排名是多少。</li><li>$height[i]$：$sa[i]$ 和 $sa[i - 1]$ 的最长公共前缀的长度。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li>我们从前往后处理，假设我们已经将序列的前 $k$ 个字符作为第一关键字排好了序，根据倍增思想，我们下一步就应该将前 $2k$ 个字符作为第一关键字排序。那该如何实现呢？可以发现，我们可以先将后 $k$ 个字符作为第一关键字排序，再将前 $k$ 个字符作为第一关键字排序即可。</li><li>$sa_i$ 已经求出来了，那 $height_i$ 呢？</li><li>其实关于 $height_i$ 我们有一个定理，对于 $lcp(i,j)$ 恒等于 $\min(lcp(i,k), lcp(k, j)),i \le k \le j$ 这个用夹逼法（<del>作者也一脸懵，还请读者自行证明</del>）</li></ul><h1 id="例题：Acwing2715-后缀数组"><a href="#例题：Acwing2715-后缀数组" class="headerlink" title="例题：Acwing2715. 后缀数组"></a>例题：<a href="https://www.acwing.com/problem/content/2717/">Acwing2715. 后缀数组</a></h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> sa[N], x[N], y[N], c[N], rk[N], height[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_sa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) c[x[i] = s[i]] ++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= m;i ++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n; i;i --) sa[c[x[i]] --] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= n;k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n - k + <span class="number">1</span>;i &lt;= n;i ++) y[ ++ num] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(sa[i] &gt; k)</span><br><span class="line">y[++ num] = sa[i] - k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++) c[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) c[x[i]] ++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= m;i ++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n; i;i --) sa[c[x[y[i]]] --] = y[i], y[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line">x[sa[<span class="number">1</span>]] = <span class="number">1</span>, num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n;i ++)</span><br><span class="line">x[sa[i]] = (y[sa[i]] == y[sa[i - <span class="number">1</span>]] &amp;&amp; y[sa[i] + k] == y[sa[i - <span class="number">1</span>] + k]) ? num : ++ num;</span><br><span class="line"><span class="keyword">if</span>(num == n) <span class="keyword">break</span>;</span><br><span class="line">m = num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_height</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) rk[sa[i]] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, k = <span class="number">0</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(rk[i] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(k) k --;</span><br><span class="line"><span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(i + k &lt;= n &amp;&amp; j + k &lt;= n &amp;&amp; s[i + k] == s[j + k]) k ++;</span><br><span class="line">height[rk[i]] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">n = <span class="built_in">strlen</span>(s + <span class="number">1</span>), m = <span class="number">122</span>;</span><br><span class="line"><span class="built_in">get_sa</span>();</span><br><span class="line"><span class="built_in">get_height</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, sa[i]);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, height[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>左偏树</title>
      <link href="/2021/12/19/%E5%B7%A6%E5%81%8F%E6%A0%91/"/>
      <url>/2021/12/19/%E5%B7%A6%E5%81%8F%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>不知道为什么没保存，只能鸽着了，下次再来补。</p><p>不鸽了，开补。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>对于一个数据结构，我们需要知道这东西是用来做什么的，效率怎么样。左偏树是一种支持在 $O(\log n)$ 的时间复杂度内进行合并查询的类堆式（本来就含并查集）数据结构。</li></ul><h2 id="支持的操作"><a href="#支持的操作" class="headerlink" title="支持的操作"></a>支持的操作</h2><ul><li>插入一个新堆 $O(1)$。</li><li>合并两个堆 $O(\log n)$。</li><li>查询一个堆里的最值 $O(1)$。</li><li>删除一个堆里的最小、大值。</li></ul><h2 id="满足的基本性质"><a href="#满足的基本性质" class="headerlink" title="满足的基本性质"></a>满足的基本性质</h2><ul><li>左偏树具有 <strong>堆性质</strong> ，即若其满足小根堆的性质，则对于每个结点 $x$ ，有 $v_x≤v_{lc},v_x≤v_{rc}$。</li><li>左偏树具有 <strong>左偏性质</strong> ，即对于每个结点 $x$ ,有 $dist_{lc}\ge dist_{rc}$ 。</li></ul><h2 id="核心操作：合并操作"><a href="#核心操作：合并操作" class="headerlink" title="核心操作：合并操作"></a>核心操作：合并操作</h2><ul><li>其实需要的函数就这么一个。</li><li>定义 $merge(x,y)$ 为合并两棵分别以 $x,y$ 为根节点的左偏树，其返回值为合并之后的根节点。</li><li>首先不考虑左偏性质，我们描述一下合并两个具有堆性质的树的过程。假设我们要合并的是小根堆。</li><li>1.若$v_x \le v_y$ 则将 $x$ 作为根节点，否则交换 $x,y$。</li><li>2.向下递归使 $y$ 与 $x$ 的右儿子合并，并返回新儿子节点的编号。</li><li>3.当 $x$ 或 $y$ 之中有空节点时，返回 $x + y$（避免分类讨论）。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">cmp</span>(y, x)) <span class="built_in">swap</span>(x, y);</span><br><span class="line">r[x] = <span class="built_in">merge</span>(r[x], y);</span><br><span class="line"><span class="keyword">if</span>(dist[r[x]] &gt; dist[l[x]]) <span class="built_in">swap</span>(l[x], r[x]);</span><br><span class="line">dist[x] = dist[r[x]] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="例题Acwing2714-左偏树"><a href="#例题Acwing2714-左偏树" class="headerlink" title="例题Acwing2714. 左偏树"></a>例题<a href="https://www.acwing.com/problem/content/description/2716/">Acwing2714. 左偏树</a></h1><ul><li>$luogu$ 的例题太 $large$ 了</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> v[N], dist[N], l[N], r[N];</span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v[x] != v[y]) <span class="keyword">return</span> v[x] &lt; v[y];</span><br><span class="line"><span class="keyword">return</span> x &lt; y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[x] != x) <span class="keyword">return</span> p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line"><span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">cmp</span>(y, x)) <span class="built_in">swap</span>(x, y);</span><br><span class="line">r[x] = <span class="built_in">merge</span>(r[x], y);</span><br><span class="line"><span class="keyword">if</span>(dist[r[x]] &gt; dist[l[x]]) <span class="built_in">swap</span>(l[x], r[x]);</span><br><span class="line">dist[x] = dist[r[x]] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">v[<span class="number">0</span>] = <span class="number">2e9</span>;</span><br><span class="line"><span class="keyword">while</span>(n --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t, x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;t, &amp;x);</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">v[++ idx] = x;</span><br><span class="line">p[idx] = idx;</span><br><span class="line">dist[idx] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;y);</span><br><span class="line">x = <span class="built_in">find</span>(x), y = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span>(x != y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">cmp</span>(y, x)) <span class="built_in">swap</span>(x, y);</span><br><span class="line">p[y] = x;</span><br><span class="line"><span class="built_in">merge</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, v[<span class="built_in">find</span>(x)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">x = <span class="built_in">find</span>(x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">cmp</span>(r[x], l[x])) <span class="built_in">swap</span>(l[x], r[x]);</span><br><span class="line">p[x] = l[x], p[l[x]] = l[x];</span><br><span class="line"><span class="built_in">merge</span>(l[x], r[x]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>P2387 [NOI2014] 魔法森林</title>
      <link href="/2021/12/13/P2387-NOI2014-%E9%AD%94%E6%B3%95%E6%A3%AE%E6%9E%97/"/>
      <url>/2021/12/13/P2387-NOI2014-%E9%AD%94%E6%B3%95%E6%A3%AE%E6%9E%97/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2387">题目传送门</a></p><span id="more"></span><h1 id="solution："><a href="#solution：" class="headerlink" title="solution："></a>solution：</h1><ul><li>优先按照 $A$ 为关键字排序，然后按照顺序，动态加边，使边的代价变成 $B$ 的最大值，则加入第 $i$ 条边后的最小代价就是 $A_i$ + $\min_1^n{v_i}$。</li><li>动态加边， $LCT$ 的裸题，但是题目中的代价明显是在边上，怎么办呢，我们可以将边拆成（边-点-边），将边上的代价等价转移到点上。断开时在相应的选择代价最大的边就可以了</li></ul><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">150010</span>, Inf = <span class="number">1e9</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, a, b;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> Edge&amp; t) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; t.a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;e[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> s[<span class="number">2</span>], p, v;</span><br><span class="line"><span class="keyword">int</span> mx, rev;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">int</span> stk[N], p[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line"><span class="keyword">return</span> p[x]; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushrev</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">swap</span>(tr[x].s[<span class="number">0</span>], tr[x].s[<span class="number">1</span>]);</span><br><span class="line">tr[x].rev ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[x].mx = x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">2</span>;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[tr[tr[x].s[i]].mx].v &gt; tr[tr[x].mx].v)</span><br><span class="line">tr[x].mx = tr[tr[x].s[i]].mx;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].rev)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pushrev</span>(tr[x].s[<span class="number">0</span>]), <span class="built_in">pushrev</span>(tr[x].s[<span class="number">1</span>]);</span><br><span class="line">tr[x].rev = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> tr[tr[x].p].s[<span class="number">0</span>] != x &amp;&amp; tr[tr[x].p].s[<span class="number">1</span>] != x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line"><span class="keyword">int</span> k = tr[y].s[<span class="number">1</span>] == x;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isroot</span>(y)) tr[z].s[tr[z].s[<span class="number">1</span>] == y] = x;</span><br><span class="line">tr[x].p = z;</span><br><span class="line">tr[y].s[k] = tr[x].s[k ^ <span class="number">1</span>], tr[tr[x].s[k ^ <span class="number">1</span>]].p = y;</span><br><span class="line">tr[x].s[k ^ <span class="number">1</span>] = y, tr[y].p = x;</span><br><span class="line"><span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>, r = x;</span><br><span class="line">stk[++ top] = r;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isroot</span>(r)) stk[++ top] = r = tr[r].p;</span><br><span class="line"><span class="keyword">while</span>(top) <span class="built_in">pushdown</span>(stk[top --]);</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isroot</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isroot</span>(y))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((tr[y].s[<span class="number">1</span>] == x) ^ (tr[z].s[<span class="number">1</span>] == y)) <span class="built_in">rotate</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">// 建立一条从根到x的路径，同时将x变成splay的根节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> z = x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; x; y = x, x = tr[x].p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line">tr[x].s[<span class="number">1</span>] = y, <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">splay</span>(z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_root</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">// 将x变为原树的根节点 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">access</span>(x);</span><br><span class="line"><span class="built_in">pushrev</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//找到x所在的原树根节点，再将原树的根节点旋转到splay的根节点 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">access</span>(x);</span><br><span class="line"><span class="keyword">while</span>(tr[x].s[<span class="number">0</span>]) <span class="built_in">pushdown</span>(x), x = tr[x].s[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line"><span class="keyword">return</span> x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">// 给x和y之间的路径建立一个splay，其根节点是y</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_root</span>(x);</span><br><span class="line"><span class="built_in">access</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><span class="comment">// 如果x和y不连通，则加入一条x和y之间的边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_root</span>(x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find_root</span>(y) != x) tr[x].p = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><span class="comment">// 如果x和y之间存在边，则删除该边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_root</span>(x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find_root</span>(y) == x &amp;&amp; tr[y].p == x &amp;&amp; !tr[y].s[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">tr[x].s[<span class="number">1</span>] = tr[y].p = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;e[i].x, &amp;e[i].y, &amp;e[i].a, &amp;e[i].b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(e + <span class="number">1</span>, e + m + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n + m;i ++)</span><br><span class="line">&#123;</span><br><span class="line">p[i] = i;</span><br><span class="line"><span class="keyword">if</span>(i &gt; n) tr[i].v = e[i - n].b;</span><br><span class="line">tr[i].mx = i;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> res = Inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = e[i].x, y = e[i].y, a = e[i].a, b = e[i].b;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(x) == <span class="built_in">find</span>(y))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">split</span>(x, y);</span><br><span class="line"><span class="keyword">int</span> t = tr[y].mx;</span><br><span class="line"><span class="keyword">if</span>(tr[t].v &gt; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cut</span>(e[t - n].x, t), <span class="built_in">cut</span>(t, e[t - n].y);</span><br><span class="line"><span class="built_in">link</span>(x, n + i), <span class="built_in">link</span>(n + i, y); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">p[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="built_in">link</span>(x, n + i), <span class="built_in">link</span>(n + i, y); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(<span class="number">1</span>) == <span class="built_in">find</span>(n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">split</span>(<span class="number">1</span>, n);</span><br><span class="line">res = <span class="built_in">min</span>(res, a + tr[tr[n].mx].v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(res == Inf) res = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12月13号考试</title>
      <link href="/2021/12/13/12%E6%9C%8813%E5%8F%B7%E8%80%83%E8%AF%95/"/>
      <url>/2021/12/13/12%E6%9C%8813%E5%8F%B7%E8%80%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="87f403cf17ca9991fba67a046115609772431605dc2041471898d74762ba7dd0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">パスワードが必要だ</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态树</title>
      <link href="/2021/12/12/%E5%8A%A8%E6%80%81%E6%A0%91/"/>
      <url>/2021/12/12/%E5%8A%A8%E6%80%81%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>思想类似于树链剖分。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>建立虚边和实边，动态在线查询两点间的路径</li></ul><h2 id="可实现的操作"><a href="#可实现的操作" class="headerlink" title="可实现的操作"></a>可实现的操作</h2><ul><li>$access(x)$：建立一条从 $x$ 到根节点的实边路径。</li><li>$make-root(x)$：将x变成根节点。</li><li>$find-root(x)$：找到 $x$ 所在树的根节点。</li><li>$splay(x, y)$：将 $x$ 到 $y$ 的路径变成实边路径。</li><li>$link(x, y)$：若 $x$ 和 $y$ 不连通的话，则加入$(x, y)$这条边。</li><li>$cut(x, y)$：若 $x$ 和 $y$ 之间有边的话就删掉这条边。</li><li>$isroot$：$x$ 是否是所在 $splay$ 的根节点。</li></ul><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><ul><li>用 $Splay$ 维护所有实边路径的中序遍历（本质上是维护实边），用 $splay$ 的后继前驱来维护原树的父子关系，其中虚边用 $splay$ 的根节点来维护</li><li>$access(x)$：首先将 $x$ 转到当前树的根节点去，再使x所在树的父亲节点y成为另一棵树的根节点，然后删去 $y$ 的右儿子，使 $y$ 的右儿子等于 $x$ （其中序遍历不变），然后不断的进行操作。</li><li>$make-root(x)$：同理先 $access(x)$再翻转 $x$ 所在的子树（原来 $x$ 在右下角，根在左下角，所以需要将 $x$ 转到左下角，使其成为根（一般还会将它转到最上面）。</li><li>$find-root$：一直向当前左子树走，直到走不动为止。</li><li>$splay(x, y)$：就是将 $x$ 转到 $y$ 的子树上，特别的 $splay(x, 0)$ 就是将 $x$ 转到根。</li><li>$link(x, y)$：$make-root(x)$，再$access(y)$。</li><li>$cut(x, y)$：先$make-root(x)$，再判断 $x$ 的右子树是不是 $y$，若不是，则 $x$ 和 $y$ 之间没有边，如果是，再判断 $y$ 有无左儿子，若有，则 $x$ 和 $y$ 之间没有边，否则断掉 $x$ 和 $y$ 的边，使 $x$ 的右儿子为 $y$ 的右儿子</li><li>$isroot$：找到 $x$ 的父节点 $y$，判断 $x$ 是否是 $y$ 的左右儿子，如果是，则 $x$ 不是根，否则 $x$ 就是根。</li></ul><h1 id="例题P3690-【模板】动态树（Link-Cut-Tree）："><a href="#例题P3690-【模板】动态树（Link-Cut-Tree）：" class="headerlink" title="例题P3690 【模板】动态树（Link Cut Tree）："></a>例题<a href="https://www.luogu.com.cn/problem/P3690">P3690 【模板】动态树（Link Cut Tree）</a>：</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> s[<span class="number">2</span>], p, v;</span><br><span class="line"><span class="keyword">int</span> sum, rev;</span><br><span class="line">&#125;tr[N];</span><br><span class="line"><span class="keyword">int</span> stk[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushrev</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// 翻转 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">swap</span>(tr[x].s[<span class="number">0</span>], tr[x].s[<span class="number">1</span>]);</span><br><span class="line">tr[x].rev ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tr[x].sum = tr[tr[x].s[<span class="number">0</span>]].sum ^ tr[x].v ^ tr[tr[x].s[<span class="number">1</span>]].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// 下传懒标记 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tr[x].rev)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">pushrev</span>(tr[x].s[<span class="number">0</span>]), <span class="built_in">pushrev</span>(tr[x].s[<span class="number">1</span>]);</span><br><span class="line">tr[x].rev = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//是否是当前splay的根 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> tr[tr[x].p].s[<span class="number">0</span>] != x &amp;&amp; tr[tr[x].p].s[<span class="number">1</span>] != x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line"><span class="keyword">int</span> k = tr[y].s[<span class="number">1</span>] == x;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isroot</span>(y)) tr[z].s[tr[z].s[<span class="number">1</span>] == y] = x;</span><br><span class="line">tr[x].p = z;</span><br><span class="line">tr[y].s[k] = tr[x].s[k ^ <span class="number">1</span>], tr[tr[x].s[k ^ <span class="number">1</span>]].p = y;</span><br><span class="line">tr[x].s[k ^ <span class="number">1</span>] = y, tr[y].p = x;</span><br><span class="line"><span class="built_in">pushup</span>(y), <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// 动态树是无根树，所以默认直接转到根 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> top = <span class="number">0</span>, r = x;</span><br><span class="line">stk[++ top] = r;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isroot</span>(r)) stk[++ top] = r = tr[r].p; <span class="comment">//动态暴搜到根节点，stk存储 </span></span><br><span class="line"><span class="keyword">while</span>(top) <span class="built_in">pushdown</span>(stk[top --]);</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isroot</span>(x))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y = tr[x].p, z = tr[y].p;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isroot</span>(y))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((tr[y].s[<span class="number">1</span>] == x) ^ (tr[z].s[<span class="number">1</span>] == y)) <span class="built_in">rotate</span>(x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">rotate</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">// 建立一条x到根的路 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> z = x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; x; y = x, x = tr[x].p)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line">tr[x].s[<span class="number">1</span>] = y, <span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">splay</span>(z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_root</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">// 将x变为原树的根节点 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">access</span>(x);</span><br><span class="line"><span class="built_in">pushrev</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//找到x所在的原树根节点，再将原树的根节点旋转到splay的根节点 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">access</span>(x);</span><br><span class="line"><span class="keyword">while</span>(tr[x].s[<span class="number">0</span>]) <span class="built_in">pushdown</span>(x), x = tr[x].s[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line"><span class="keyword">return</span> x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_root</span>(x);</span><br><span class="line"><span class="built_in">access</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_root</span>(x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find_root</span>(y) != x) tr[x].p = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">make_root</span>(x);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find_root</span>(y) == x &amp;&amp; tr[y].p == x &amp;&amp; !tr[y].s[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line">tr[x].s[<span class="number">1</span>] = tr[y].p = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;tr[i].v);</span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t, x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;t, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">split</span>(x, y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, tr[y].sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">1</span>) <span class="built_in">link</span>(x, y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">2</span>) <span class="built_in">cut</span>(x, y);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">splay</span>(x);</span><br><span class="line">tr[x].v = y;</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF600E Lomsat gelral</title>
      <link href="/2021/12/05/CF600E-Lomsat-gelral/"/>
      <url>/2021/12/05/CF600E-Lomsat-gelral/</url>
      
        <content type="html"><![CDATA[<p>启发式合并裸的模板题，就是要用树剖优化</p><span id="more"></span><p>存个代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>;</span><br><span class="line">c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> h[N], e[M], ne[M];</span><br><span class="line">LL ans[N], sum;</span><br><span class="line"><span class="keyword">int</span> color[N], cnt[N], sz[N], son[N];</span><br><span class="line"><span class="keyword">int</span> mx;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sz[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(j == father) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(j, x);</span><br><span class="line">sz[x] += sz[j];</span><br><span class="line"><span class="keyword">if</span>(sz[j] &gt; sz[son[x]]) son[x] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father, <span class="keyword">int</span> y, <span class="keyword">int</span> pson)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = color[x];</span><br><span class="line">cnt[c] += y;</span><br><span class="line"><span class="keyword">if</span>(cnt[c] &gt; mx) mx = cnt[c], sum = c;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(cnt[c] == mx) sum += c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(j == father || j == pson) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">update</span>(j, x, y, pson);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father, <span class="keyword">int</span> op)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i; i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(j == son[x] || j == father) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(j, x, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(son[x]) <span class="built_in">dfs2</span>(son[x], x, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">update</span>(x, father, <span class="number">1</span>, son[x]);</span><br><span class="line">ans[x] = sum;</span><br><span class="line"><span class="keyword">if</span>(!op) <span class="built_in">update</span>(x, father, <span class="number">-1</span>, <span class="number">0</span>), sum = mx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="built_in">read</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">read</span>(color[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">read</span>(a), <span class="built_in">read</span>(b);</span><br><span class="line"><span class="built_in">add</span>(a, b), <span class="built_in">add</span>(b, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CF </tag>
            
            <tag> 启发式合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启发式合并</title>
      <link href="/2021/12/05/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/"/>
      <url>/2021/12/05/%E5%90%AF%E5%8F%91%E5%BC%8F%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<p>暴力的优化？</p><span id="more"></span><h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><ul><li>类似于并查集的按积合并。</li><li>思想：观察每个元素，计算最终计算量的贡献</li><li>时间复杂度：对于每个元素所在集合进行合并，最终进行 $n &gt;&gt; i$ 的合并，可见最多只会合并 $\log n$次，最坏情况下会合并 $n$ 个数， 故时间复杂度为 $O(n \log n)$ 。</li></ul><h2 id="操作方法："><a href="#操作方法：" class="headerlink" title="操作方法："></a>操作方法：</h2><ul><li>将两个数据结构合并时，应将小的数据结构中的元素一个一个分别插入大的数据结构（<del>真的好像就这个</del>）。</li></ul><h2 id="例题P3201-HNOI2009-梦幻布丁："><a href="#例题P3201-HNOI2009-梦幻布丁：" class="headerlink" title="例题P3201 [HNOI2009] 梦幻布丁："></a>例题<a href="https://www.luogu.com.cn/problem/P3201">P3201 [HNOI2009] 梦幻布丁</a>：</h2><h2 id="solution："><a href="#solution：" class="headerlink" title="solution："></a>solution：</h2><ul><li>不难看出这道题就只需要瞎暴力就可以（被<del>毒瘤</del>hack了，<del>为什么线段树合并没有被hack？</del>）</li><li>虽然暴力被干点掉了，但这道题我们好像也想不到什么奇奇怪怪的算法，那么正解只有一个——优化暴力。</li><li>怎么优化呢，我们考虑将每一种颜色拉成链，每次只将小的链接到大的链上，这样貌似巨快<del>雾</del>，但是我们的正确性呢？如图：</li></ul><p><img src="https://s2.loli.net/2021/12/05/bqjEgsapczZLd3R.png" alt="无标题.png"></p><ul><li>如果我们考虑讲1接到2上，2接到3上的话，无疑会发现，当我们将1接到2上的时候，实际上是将2接到1上，而我们要将2接到3上时，2已经空了。所以单是这样的做法的话，正确性是有误的，我们不得不考虑如何修正。</li><li>事实上，2接到1上是可取的，我们只需要离散化出一个数组，用它来存储元素的实际颜色，再用另一个数组指向它所对应的颜色即可，我们按照如图所示的方式将2接到1上：</li></ul><p><img src="https://s2.loli.net/2021/12/05/5hNMsqHYEor3tQm.png" alt="无标题.png"></p><ul><li>不难发现，此时2的实质颜色是1，再将3接到2所对的1下方就完全没有问题了。</li></ul><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> h[M], e[M], ne[M];</span><br><span class="line"><span class="keyword">int</span> color[M], sz[M], p[M];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>;</span><br><span class="line">c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">sz[x] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == y) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(sz[x] &gt; sz[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line">ans -= (color[j - <span class="number">1</span>] == y) + (color[j + <span class="number">1</span>] == y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line">color[j] = y;</span><br><span class="line"><span class="keyword">if</span>(ne[i] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ne[i] = h[y], h[y] = h[x];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">h[x] = <span class="number">-1</span>;</span><br><span class="line">sz[y] += sz[x], sz[x] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">read</span>(color[i]);</span><br><span class="line"><span class="keyword">if</span>(color[i] != color[i - <span class="number">1</span>]) ans ++;</span><br><span class="line"><span class="built_in">add</span>(color[i], i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; M;i ++) p[i] = i;<span class="comment">//离散化，必须初始化到M</span></span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> op;</span><br><span class="line"><span class="built_in">read</span>(op);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">read</span>(x), <span class="built_in">read</span>(y);</span><br><span class="line"><span class="built_in">merge</span>(p[x], p[y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 启发式合并 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2538 城堡</title>
      <link href="/2021/12/02/P2538-%E5%9F%8E%E5%A0%A1/"/>
      <url>/2021/12/02/P2538-%E5%9F%8E%E5%A0%A1/</url>
      
        <content type="html"><![CDATA[<p>退火模板题</p><span id="more"></span><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><ul><li>对于这道题， 也没什么好说的，退火那些建立城堡，对于单次询问，跑一边最短路就结束了。</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || <span class="string">&#x27;9&#x27;</span> &lt; c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>;</span><br><span class="line">c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">uniform_int_distribution&lt;<span class="keyword">unsigned</span>&gt; p;</span><br><span class="line">default_random_engine mu&#123;<span class="built_in">time</span>(<span class="number">0</span>)&#125;;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[N &lt;&lt; <span class="number">1</span>], ne[N &lt;&lt; <span class="number">1</span>], h[N], w[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx, w[idx] = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> r[N];</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> b[N], tot; </span><br><span class="line"><span class="keyword">int</span> ans = Inf;</span><br><span class="line"><span class="keyword">int</span> dist[N];</span><br><span class="line"><span class="keyword">bool</span> d[N];</span><br><span class="line">priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt; &gt; q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++)</span><br><span class="line">&#123;</span><br><span class="line">d[i] = <span class="number">0</span>;</span><br><span class="line">dist[i] = Inf;</span><br><span class="line"><span class="keyword">if</span>(vis[i])</span><br><span class="line">&#123;</span><br><span class="line">dist[i] = <span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> o = q.<span class="built_in">top</span>().second;</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(d[o]) <span class="keyword">continue</span>;</span><br><span class="line">d[o] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[o]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(dist[j] &gt; dist[o] + w[i])</span><br><span class="line">&#123;</span><br><span class="line">dist[j] = dist[o] + w[i];</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dist[j], j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++) res = <span class="built_in">max</span>(res, dist[i]);</span><br><span class="line">ans = <span class="built_in">min</span>(ans, res);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= tot;i ++) vis[b[i]] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">shuffle</span>(b + <span class="number">1</span>, b + tot + <span class="number">1</span>, mu);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= k;i ++) vis[b[i]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> o = <span class="built_in">calc</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span> t = <span class="number">1e4</span>;t &gt; <span class="number">1e-4</span>;t *= <span class="number">0.997</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">p</span>(mu), y = <span class="built_in">p</span>(mu);</span><br><span class="line"><span class="built_in">swap</span>(vis[b[x]], vis[b[y]]);</span><br><span class="line"><span class="keyword">int</span> u = <span class="built_in">calc</span>();</span><br><span class="line"><span class="keyword">int</span> delte = u - o;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>(-delte / t) &lt; (<span class="keyword">double</span>)<span class="built_in">rand</span>() / RAND_MAX) <span class="built_in">swap</span>(vis[b[x]], vis[b[y]]);</span><br><span class="line"><span class="keyword">else</span> o = u;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(k);</span><br><span class="line"><span class="keyword">if</span>(m + k == n)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++)</span><br><span class="line"><span class="built_in">read</span>(r[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> o;</span><br><span class="line"><span class="built_in">read</span>(o);</span><br><span class="line"><span class="keyword">if</span>(i == r[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">add</span>(i, r[i], o);</span><br><span class="line"><span class="built_in">add</span>(r[i], i, o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j ++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> o;</span><br><span class="line"><span class="built_in">read</span>(o);</span><br><span class="line">vis[o] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i ++)</span><br><span class="line"><span class="keyword">if</span>(!vis[i]) b[++ tot] = i;</span><br><span class="line">p.<span class="built_in">param</span>(uniform_int_distribution&lt;<span class="keyword">unsigned</span>&gt;::param_type&#123;<span class="number">1</span>, tot&#125;);</span><br><span class="line"><span class="keyword">while</span>((<span class="keyword">double</span>)<span class="built_in">clock</span>() / CLOCKS_PER_SEC &lt; <span class="number">0.6</span>) <span class="built_in">sim</span>();</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 模拟退火 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟退火</title>
      <link href="/2021/12/02/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
      <url>/2021/12/02/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/</url>
      
        <content type="html"><![CDATA[<p>很久之前学的了，这次算是补个漏</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li><p>退火，来自于物理，模拟退火算法来源于固体退火原理，是一种基于概率的算法，将固体加温至充分高，再让其徐徐冷却，加温时，固体内部<a href="https://baike.baidu.com/item/%E7%B2%92%E5%AD%90/81757">粒子</a>随<a href="https://baike.baidu.com/item/%E6%B8%A9%E5%8D%87/10468133">温升</a>变为无序状，内能增大，而徐徐冷却时粒子渐趋有序，在每个温度都达到<a href="https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E6%80%81/8965512">平衡态</a>，最后在<a href="https://baike.baidu.com/item/%E5%B8%B8%E6%B8%A9/1144996">常温</a>时达到基态，内能减为最小。</p></li><li><p>模拟退火（下文简称退火）是一种高效的骗分算法，以简单易背的模板和优秀的效率闻名于世（<del>就比暴力好一点</del>），常常用于求解答案是连续不断（接近也行）的函数的最大值或最小值，强于三分，可求解多峰函数。</p></li><li><p>其运行效果如图所示：</p></li></ul><p><img src="https://i.loli.net/2021/12/02/5kNy2wDCbE8YxqK.jpg" alt="1.png"></p><h1 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h1><ul><li>说到随机算法，就一定要考虑其的正确性，退火算法理论上是一种贪心算法，它会尽可能找到离自己更近，且更接近正解的答案的点，然后跳过去。但不同于贪心算法的是，它有一定概率越过这个点，去其他峰试试运气，但越到后期越不容易跳过去，就越趋近稳定。所以，可以肯定的是，它不会只停留在一个峰上，而是会四处寻找其他答案。</li><li>我们设每一次错误的概率为$0.9999$，但是当我们在这次退火的基础上再加上$50000$次退火，正确性就为：$0.9999^{50001} = 0.0067$ 就是一个极小的概率了，所以退火是一个稳定的正确的算法。</li></ul><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><ul><li>当我们理解到这个算法是随机的算法时，一定要充分运用到随机的艺术，对于初始温度和结束温度，还有温度变化率一定要在平日里积累经验，这里给出核心代码：</li></ul> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">exp</span>(-delte / t) &lt; (<span class="keyword">double</span>)<span class="built_in">rand</span>() / RAND_MAX)<span class="comment">//delte为上一个解和当前解的差值</span></span><br></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><ul><li><p>这里以<a href="https://www.luogu.com.cn/problem/P3878">luogu P2503 [HAOI2006]均分数据</a> 为例来简单介绍退火的运用</p></li><li><p>根据题目，不难发现这是DP，但当我们在考场上不会的时候该怎么办呢？根据题目，我们可以发现，当我们更改一个值后，答案并不会增大很多，所以我们可以通过模拟退火解决此题</p></li><li><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2></li><li><pre><code class="cpp">#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;cstdio&gt;#include&lt;cstdlib&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;#include&lt;ctime&gt;#define x first#define y second#define PII pair&lt;int, int&gt;using namespace std;const int N = 25, M = 10, Inf = 0x3f3f3f3f3f;int n;int w[N], q[N], s[M];double ans = 1e8;int m;int calc()//求解单次答案&#123;    memset(s, 0, sizeof(s));    for(int i = 0;i &lt; n;i ++)    &#123;        int k = 0;        for(int j = 0;j &lt; m;j ++)        &#123;            if(s[j] &lt; s[k]) k = j;        &#125;        s[k] += w[i];    &#125;    double avg = 0;    for(int i = 0;i &lt; m; i ++) avg += (double)s[i] / m;    double res = 0;    for(int i = 0;i &lt; m;i ++) res += (s[i] - avg) * (s[i] - avg);    res = sqrt(res / m);    ans = min(ans, res);    return res;&#125;void sim()//退火&#123;    random_shuffle(w, w + n);    for(double t = 1e4;t &gt; 1e-6;t *= 0.99)    &#123;        int a = rand() % n, b = rand() % n;//随机我们交换的数        double x = calc();        swap(w[a], w[b]);        double y = calc();        double delta = y - x;        if(exp(- delta / t) &lt; (double)rand() / RAND_MAX) swap(w[a], w[b]);    &#125;&#125;int main()&#123;    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);    for(int i = 0;i &lt; n;i ++) scanf(&quot;%d&quot;, &amp;w[i]);    while((double)clock() / CLOCKS_PER_SEC &lt; 0.8) sim();//决定退火次数    printf(&quot;%.2lf&quot;, ans);    return 0;&#125;</code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 模拟退火 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1108 低价购买</title>
      <link href="/2021/11/28/P1108-%E4%BD%8E%E4%BB%B7%E8%B4%AD%E4%B9%B0/"/>
      <url>/2021/11/28/P1108-%E4%BD%8E%E4%BB%B7%E8%B4%AD%E4%B9%B0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1108#submit">题目传送门</a></p><p>$Noip2021$ 被 $Dp$ 打爆了，回来开始刷 $Dp$ 的题（一道不会），自闭了…….</p><span id="more"></span><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>怎么说呢？刚刚看题的时候，就觉得这道题其实就是最长下降子序列的裸题（<del>看到5000的数据，甚至还以为有点水</del>），兴冲冲的开了，写完才发现还要求方案数，仔细想了想，才发现自己只会 $O(n)$ 记录，$O(n ^ 2)$ 枚举， 时间复杂度 $O(n ^ 3)$ ，被打爆了 $QWQ$。</p><p>仔细想想（<del>一上午没了</del>），其实这题还是可做，我们设 $f_i$ 为以第 $i$ 项结尾的最长下降子序列的长度，然后 $t_i$ 为构成这类序列（以第 $i$ 项结尾，长度为 $f_i$）的方案数，我们不难发现，如果第 $i$ 项和第 $j$ 项的值相同，那么对于能够接在 $j$ 前面的数，一定能够接在 $i$ 前面，那么我们只需将 $t_j$ 清空，就完成了去重（<del>作者太懒，不想画图</del>）。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define LL long long</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 5005;</span><br><span class="line">int n, k;</span><br><span class="line">int root;</span><br><span class="line">LL f[N];</span><br><span class="line">LL a[N];</span><br><span class="line">LL ans, cnt;</span><br><span class="line">int t[N];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">for(int i = 1;i &lt;= n;i ++)</span><br><span class="line">scanf(&quot;%lld&quot;, &amp;a[i]);</span><br><span class="line">for(int i = 1;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line">for(int j = 1;j &lt; i;j ++)</span><br><span class="line">if(a[i] &lt; a[j]) f[i] = max(f[i], f[j] + 1);</span><br><span class="line">if(f[i] == 0) f[i] = 1;</span><br><span class="line">if(ans &lt; f[i]) ans = f[i];</span><br><span class="line">for(int j = 1;j &lt; i;j ++)</span><br><span class="line">&#123;</span><br><span class="line">if(f[i] == f[j] &amp;&amp; a[i] == a[j]) t[j] = 0;</span><br><span class="line">if(f[i] == f[j] + 1 &amp;&amp; a[i] &lt; a[j]) t[i] += t[j];</span><br><span class="line">&#125;</span><br><span class="line">if(!t[i]) t[i] = 1;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 1;i &lt;= n;i ++)</span><br><span class="line">if(f[i] == ans) cnt += t[i];</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; &quot; &quot; &lt;&lt; cnt;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双倍经验"><a href="#双倍经验" class="headerlink" title="双倍经验"></a>双倍经验</h1><p><a href="https://www.luogu.com.cn/problem/P2687">题目传送门</a>， 题目一摸一样，只不过卡了高精，但貌似 $double$ 可以卡过去？</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line">LL f[N];</span><br><span class="line">LL a[N];</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> cnt;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">9</span>) <span class="built_in">write</span>(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>((x % <span class="number">10</span>) + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> t[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; i;j ++)</span><br><span class="line"><span class="keyword">if</span>(a[i] &lt; a[j]) f[i] = <span class="built_in">max</span>(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(f[i] == <span class="number">0</span>) f[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ans &lt; f[i]) ans = f[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; i;j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(f[i] == f[j] &amp;&amp; a[i] == a[j]) t[j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(f[i] == f[j] + <span class="number">1</span> &amp;&amp; a[i] &lt; a[j]) t[i] += t[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!t[i]) t[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line"><span class="keyword">if</span>(f[i] == ans) cnt += t[i];</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.0Lf&quot;</span>, cnt);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成函数</title>
      <link href="/2021/11/22/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
      <url>/2021/11/22/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>不会， 先鸽着吧。</p><p>还是不怎么会，写点简单的吧。</p><span id="more"></span><p>写不来，记点简单的笔记。</p><!-- more --><p>$\frac{1}{1-x}=1+x+x^2\dots$</p><p>$\frac{1}{1-kx}=1+kx+k^2x^2\dots$</p><p>$\frac{1}{(1-x)^n}=\sum_{k=0}C_{n+k-1}^{k-1}x^k$</p><p>$e^x=\sum_{i=0}\frac{x^i}{i!}$（跟排列有关）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 生成函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Noip2021游记</title>
      <link href="/2021/11/22/Noip2021%E6%B8%B8%E8%AE%B0/"/>
      <url>/2021/11/22/Noip2021%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>…….</p><span id="more"></span><h1 id="考前前一天"><a href="#考前前一天" class="headerlink" title="考前前一天"></a>考前前一天</h1><ul><li>吸取Csp崩盘的经验，我们来刷板子题，重心略偏数据结构，顺手复习一下国赛的内容，以免又跳出形如网络流等毒瘤东西，仔细的重读了考试大纲之后将树的板子都写了一遍，虽然2019年几乎将所有和树有关的题考的差不多了，但还是觉得树挺重要的。根据这几年NoIp，Csp的走向，数学这东西考的越来越多了。于是复习了一下差分约束，CRT。Dp这东西就放弃吧，自己找了找往年的题，估了一下，自己最多会三维Dp（很多时候三维也会裂开），反正Dp的公式完全靠题目，推不出来的话暴力的分一般也不少，而且Csp才考过Dp，还不如多复习一下一旦不会就有可能会爆零的数据结构。话是这么说，但还是刷了几道题，<a href="https://www.luogu.com.cn/problem/P1850">换教室</a>调的我怀疑人生（还是太菜了）。做到期望Dp时才想起来，这东西一般还配套一个高斯消元，就去刷了它的模板题，刷到一半，luogu就炸了，于是就去膜拜了巨佬（rp ++）。这次又是主场考试，希望还是rp ++（别崩啊）。</li></ul><h1 id="考试当天"><a href="#考试当天" class="headerlink" title="考试当天"></a>考试当天</h1><ul><li>买了一堆零食，铺下了题太难的后路（其实根本没时间吃），$8:20$ 进考场了。</li><li>再次吸取经验，现将4道题读完，$T1$ 貌似是道签到题，还是耐下性子去看了$T2$，没有什么思路，又去看了一下 $T3$，马上就紧张起来了，全是数学题（<del>像我这样的数学学渣完全就是送命</del>），乱翻了一下 $T4$，毒瘤模拟（也许可以用数据结构优化，细节绝对巨多，代码量绝对巨大）。</li><li>回过头来开$T1$，小分析了一下，写了个$O(n)$，就准备跑路，但测大样例的时候发现有点卡，测了下时间$0.85s$，我又联想到Csp的时候，CCF的少爷机吃了我15分（离一等差8分），就缩小了一下N的范围，和原来的代码对拍了一下，没什么问题，看着用时大概$0.5s$，觉得没什么问题，就跑路了。</li><li>这时大概过了$20min$，手上有分了，心态就比较平稳了，开始看第二题，还是完全没什么思路，认为是个Dp，但推了一下发现推不出来（我定的三维，正解四维，还是实力限制了我的想象），准备写个暴力Dp跑路，但自己手算了一下发现记忆化搜索似乎时间差不多（而且更好写），于是写了个搜索，加了几个优化跑路了（没注意到超时，还以为是机子卡了）。</li><li>这时再想去上个厕所却被告知禁止上厕所，苦求 $5min$ 还是放我去了（什么破规定）。</li><li>这时只剩下1.25h，有一点慌，再读了一下$T3$，发现又是一道Dp题，但没时间了，上了个退火跑路了。</li><li>1h攻$T4$，实在还是写不完，最后打了个表遗憾退场，这次在$T2$上浪费的时间太多了，$T4$暴力24分都没拿。</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li><p>下来遇见了巨佬们，一交谈才发现自己退火精度低了（还以为是次数少了），这下分数只有再跌。wfy巨佬300+了，其他巨佬也都比我高，自闭了。</p></li><li><p>去小图灵上测了测，$T2$爆蛋，$T3$果不其然被卡了手精度，这下凉凉了。</p></li><li><p>估分<br>$$<br>100 + 0 + 32 + 0<br>$$</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>其实开始还是有希望一等的，第二题推出暴力Dp后就应该跑路，第三题应该吸取<a href="https://www.luogu.com.cn/problem/P3878">分金币</a>的经验卡一下精度的（明明考前才做过，自闭了），第四题（如果有时间的话…)</li><li>202 $-&gt;$ 132，自闭了QAQ。</li><li>出分了，和估的一样，一等奖150，又差一点，自闭了QWQ。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1484 种树</title>
      <link href="/2021/11/18/P1484-%E7%A7%8D%E6%A0%91/"/>
      <url>/2021/11/18/P1484-%E7%A7%8D%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>为什么每次考试的原题我都没做过呀， $QAQ$</p><span id="more"></span><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><p><del>当我们看到这道题时，不难想到这是一道 $dp$ 题</del>。 开个玩笑， $2e5$ 的数据范围，怎么可能 $n ^ 2 Dp$ 。 </p><p>回到正题：一道经典的带悔贪心。</p><p>我们先模拟一下一般的贪心策略，每次选取最大的可取的值，直到不能取为止。</p><p>不难发现，这个策略是错的。我们来看一下这个图：</p><p><img src="https://i.loli.net/2021/11/18/lp5cVaDb3EAfhW4.png" alt="无标题.png"></p><p>对于第一次策略，我们会优先选择最大的20号点，紧接着，我们就只能憋屈的选择1号点，很明显正解不可能是21， $19+19 = 38$ 明显更优，那么我们应该怎样调整我们的贪心策略才能保证我们贪心的正确性呢，其实并不是很难，我们重新看一幅图。</p><p><img src="https://i.loli.net/2021/11/18/McZyx5Y3tqnIQa4.png" alt="无标题.png"></p><p>对于这次贪心策略，我们取走20以后顺手删除（左）19点和（右）19点，并将20号点更新为： $19 + 19 - 20 = 18$ ，即：</p><p><img src="https://i.loli.net/2021/11/18/Sk6M9U1Pqgcvy4x.png" alt="无标题.png"></p><p>此时，我们再取走18号点，并删除与18号点相邻的1号点，并将 $-17$ 号点加入队列中：</p><p><img src="https://i.loli.net/2021/11/18/HxPfvF7bKog6eGT.png" alt="无标题.png"></p><p>根据题目的意思，现在我们无论取多少都无所谓，所以放弃-17，得到答案38正解，这样不但避免了选择相邻的两个（选一个的时候，另外两个被删除了），还保证了价值守恒（请自行理解），那么这道题就完结撒花啦。</p><h2 id="三倍经验：luogu-P1792-国家集训队-种树，-luogu-P3620-APIO-CTSC-2007-数据备份-此题具有一定的思考难度-主要还是板子"><a href="#三倍经验：luogu-P1792-国家集训队-种树，-luogu-P3620-APIO-CTSC-2007-数据备份-此题具有一定的思考难度-主要还是板子" class="headerlink" title="三倍经验：luogu P1792 [国家集训队]种树， luogu P3620 [APIO/CTSC 2007] 数据备份(此题具有一定的思考难度 (主要还是板子))"></a>三倍经验：<a href="https://www.luogu.com.cn/problem/P1792">luogu P1792 [国家集训队]种树</a>， <a href="https://www.luogu.com.cn/problem/P3620">luogu P3620 [APIO/CTSC 2007] 数据备份</a>(此题具有一定的思考难度 (主要还是板子))</h2><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;<span class="comment">//上一个和下一个的下标  </span></span><br><span class="line">LL val;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">LL val;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(Node b)<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> val &lt; b.val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">bool</span> vis[N];<span class="comment">//判断当前节点是否可选</span></span><br><span class="line">priority_queue&lt;Node&gt;q;<span class="comment">//大根堆维护最大值 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a[x].l = a[a[x].l].l;<span class="comment">//左右边界移动，删除 x的左右节点 </span></span><br><span class="line">a[x].r = a[a[x].r].r;</span><br><span class="line">a[a[x].l].r = x;</span><br><span class="line">a[a[x].r].l = x;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;a[i].val);</span><br><span class="line">a[i].l = i - <span class="number">1</span>;</span><br><span class="line">a[i].r = i + <span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>((Node)&#123;i, a[i].val&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(vis[q.<span class="built_in">top</span>().id]) <span class="comment">//延迟删除标记 </span></span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">Node now = q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(now.val &lt; <span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">ans += now.val;</span><br><span class="line">vis[a[now.id].l] = vis[a[now.id].r] = <span class="number">1</span>;</span><br><span class="line">a[now.id].val = a[a[now.id].l].val + a[a[now.id].r].val - a[now.id].val; </span><br><span class="line">q.<span class="built_in">push</span>((Node)&#123;now.id, a[now.id].val&#125;);<span class="comment">//加入新点 </span></span><br><span class="line"><span class="built_in">Del</span>(now.id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
            <tag> 带悔贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF453C Little Pony and Summer Sun Celebration</title>
      <link href="/2021/11/17/CF453C%20Little%20Pony%20and%20Summer%20Sun%20Celebration/"/>
      <url>/2021/11/17/CF453C%20Little%20Pony%20and%20Summer%20Sun%20Celebration/</url>
      
        <content type="html"><![CDATA[<p>一道有意思的树形dp</p><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>给定一个 $n$ 个点， $m$ 条边的无向图和一个01序列，若 $a[i] = 1$ ，则需遍历这个节点奇数次，否则需要遍历此节点偶数次（可以不遍历），求一个可行的方案，要求此方案的长度不超过 $4n$</li></ul><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>首先我们观察本题的规律，不难发现：</p><ul><li><p>当本图未联通时，任意两个连通块中有需要走奇数遍的点时一定无解（应该不需要解释吧）</p></li><li><p>因为一个节点可能有多个儿子，所以当我们未对当前节点的其他儿子进行判断前，一个可行的策略一定可以是：先处理当前节点的其中一个儿子节点，再从这个儿子节点（儿子节点的子树已经处理完了）回溯到当前节点，接着再由当前节点来处理它的其他儿子并回溯到它的父亲节点（以此递归处理问题）。</p></li><li><p>我们顺着这个思路往下走，将一个需要走奇数次的节点作为根节点，递归处理它的子树，不难发现当我们处理完一个节点的子树，将要回溯到这个节点的父节点时，若这个节点还需要再遍历一遍，我们可以和此节点的父亲节点进行循环（由此节点跳到它的父节点，再由它的父节点跳到它，再由此节点进行回溯，即可更新此节点）。那么根节点如何处理呢？我们进行画图分析：<br><img src="https://i.loli.net/2021/11/17/PSAbMTjc53Z8amL.png" alt="无标题.png"></p></li><li><p>此时可以看到3号节点需要回溯了，但根节点不需要被再次遍历，不然根节点会回溯到我们传的-1号虚根节点上，对此，我们只需要进行特判，如果-1号虚根节点入队了，队列数-3（最后3个数应该为 $root$ ，-1 ， $root$ ），即停止从3号节点回溯到根节点，在根节点的前一个节点停止回溯，这样就保证了正确性。</p></li></ul><p>我们再来分析此代码的效率，不难发现每一个叶子节点的最坏入队次数为两次，使其父节点多进队2次，即一个点最多对答案贡献4次，但一定有如同 $root$ 一样的节点，它一定不会和自己的儿子节点循环，所以答案一定严格小于 $4n$ 。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, M = N &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> e[M], h[N], ne[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">idx ++;</span><br><span class="line">e[idx] = y, ne[idx] = h[x], h[x] = idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[N], root;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> st[N &lt;&lt; <span class="number">2</span>], cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line">st[++ cnt] = x;</span><br><span class="line">a[x] ^= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h[x]; ~i;i = ne[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = e[i];</span><br><span class="line"><span class="keyword">if</span>(vis[j]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(j, x);</span><br><span class="line">st[++ cnt] = x, a[x] ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[x]) st[++ cnt] = father, st[++ cnt] = x, a[x] ^= <span class="number">1</span>, a[father] ^= <span class="number">1</span>;<span class="comment">//和父节点循环 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(h));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> o, u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;o, &amp;u);</span><br><span class="line"><span class="built_in">add</span>(o, u);</span><br><span class="line"><span class="built_in">add</span>(u, o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), root = (a[i] == <span class="number">1</span> ? i : root);</span><br><span class="line"><span class="keyword">if</span>(!root)<span class="comment">//不用遍历就不遍历 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(root, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt &gt; <span class="number">1</span> &amp;&amp; st[cnt - <span class="number">1</span>] == <span class="number">-1</span>) cnt -= <span class="number">3</span>;<span class="comment">//特判 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cnt);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt;i ++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, st[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CF </tag>
            
            <tag> 树形dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫比乌斯反演</title>
      <link href="/2021/11/16/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
      <url>/2021/11/16/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</url>
      
        <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="整数分块"><a href="#整数分块" class="headerlink" title="整数分块"></a>整数分块</h3><span id="more"></span><p>整除分块是用于快速处理形似 $\sum_{i = 1}^{n}\lfloor\dfrac{n}{i}\rfloor$ 的式子的方法<br> 很显然，这个可以<em>O</em>(<em>n</em>)得到答案。但是，在某些题目中，毒瘤出题人将数据加强到了 $10^{10}$ 以上，这个时候我们就无法通过<em>O</em>(<em>n</em>)的解法来得到答案了。我们需要一个$O(\sqrt n)$的更为优秀的解法<br> 首先观察这个式子，找几个特殊值代入<br><code>n=5时，sum=5+2+1+1+1</code><br> 可以发现的是：（这里给的例子并不明显，其实应该找一个大的n来代入才直观，读者可以自行尝试）<br> 对于单一的$⌊\frac{n}i⌋$，某些地方的值是相同的，并且<strong>呈块状分布</strong><br> 通过进一步的探求规律与推理以及打表与瞎猜，我们可以惊喜的发现一个规律，这些<strong>块状分布的值是有规律的</strong><br> 对于一个块，假设它的起始位置的下标为l，那么可以得到的是，它的结束位置的下标为$⌊\frac{n}{⌊\frac {n}i⌋}⌋$<br> 如果实在看的有点懵逼，可以继续采用代入特殊值的方法，验证一下上方的规律，用程序表现出来即为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>, r;l &lt;= n;l = r + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    r = n / (n / l);</span><br><span class="line">    ans += (r - l + <span class="number">1</span>) * mu[l];<span class="comment">//mu只是举个例子，可以带入任意符合的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重要函数：<br>$$<br>μ(x) = \begin{cases}<br> 0 &amp; (d_i \ge 2)\\<br> 1 &amp; (d_i = 1)<br>\end{cases}<br>$$</p><p>$$<br>I = 1<br>$$</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>莫比乌斯反演主要用来简化运算，通常有性质：</li></ul><p>$$<br>F(n) = \sum_{d|n}f(d) \\<br>    f(n) = \sum_{d|n}μ(d)F(\frac{n}{d})\\<br>$$</p><p>简要证明：</p><p>1.直接证</p><p>$$<br>\begin{aligned}<br>\sum_{d|n}μ(d)F(\frac{n}{d})<br>&amp;=\sum_{d|n}μ(d)\sum_{i|\frac{n}{d}}f(i)\\<br>&amp;=\sum_{i|n}f(i)\sum_{d|\frac{n}{i}}\mu(d)\\<br>&amp;=\sum_{i|n}f(i)[\frac{n}{i}==1]\\<br>&amp;=f(n)\\<br>\end{aligned}<br>$$</p><p>2.运用狄利克雷卷积</p><p>$$<br>\begin{aligned}<br>F &amp;= f*I\\<br>F * \mu &amp;= f * I * \mu \\<br>(I * \mu) &amp;= \varepsilon \\<br>F * \mu &amp;= f * \varepsilon = f \\<br>f &amp;= \mu * F<br>\end{aligned}<br>$$</p><p>如果看不懂的话, 我将1的详细步骤写一下:</p><p>我们将原式化简可得<br>$$<br>f(x) = \sum_{d|n}μ(d)\sum_{i| \frac{n}{d}}f(i)<br>$$</p><p>我们令<br>$$<br>S(n) = \sum_{d|n}μ(d)<br>$$<br>即可化简的<br>$$<br>S(n)=[n==1]<br>$$<br>我们再令<br>$$<br>d = \frac{n}{d}<br>$$<br>带回原式可得<br>$$<br>f(n) = \sum_{d|n}μ(d)\sum_{i| \frac{n}{d}}f(i)<br>$$<br>我们不妨设x = n / d, 则x * d = n, 那么当x确定时，d同样也确定，反之亦然同理, 则f(x)和μ(d)所枚举到的数完全一样，即我们可以交换f(x)和μ(d)，那么原式即可变形为<br>$$<br>f(n) = \sum_{i|n}f(i)\sum_{d| \frac{n}{i}}μ(d)<br>$$<br>此时我们再联想到S(x), 再令x = n / i, 就可以得到<br>$$<br>f(i) = \sum_{i|n}f(i)S(\frac{n}{i})<br>$$</p><p>此时再将F(n)代回</p><p>$$<br>\begin{align}<br>\sum_{n|d}μ(\frac{d}{n})F(d) &amp;= \sum_{n|d}μ(\frac{d}{n})\sum_{d|i}f(i)\\<br>&amp;= \sum_{n|i}f(i)\sum_{d| \frac{i}{n}}μ(d) \\<br>&amp;= f(n)<br>\end{align}<br>$$</p><p>证毕</p><h2 id="例题：luogu-P2257-YY的GCD"><a href="#例题：luogu-P2257-YY的GCD" class="headerlink" title="例题：luogu P2257 YY的GCD"></a>例题：<a href="https://www.luogu.com.cn/problem/P2257">luogu P2257 YY的GCD</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> prime[N], cnt, n, phi[N], g[N];</span><br><span class="line"><span class="keyword">bool</span> d[N];</span><br><span class="line">LL s[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!d[i]) prime[++ cnt] = i, phi[i] = - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= cnt &amp;&amp; i * prime[j] &lt; N;j ++)</span><br><span class="line">&#123;</span><br><span class="line">d[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i % prime[j] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">phi[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> phi[i * prime[j]] = - phi[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= cnt;j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i * prime[j] &lt; N;i ++)</span><br><span class="line">&#123;</span><br><span class="line">g[i * prime[j]] += phi[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; N;i ++) s[i] = s[i - <span class="number">1</span>] + g[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span>(T --)</span><br><span class="line">&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n, m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r;l &lt;= n;l = r + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            r = <span class="built_in">min</span>(n, <span class="built_in">min</span>(n / (n / l), m / (m / l)));</span><br><span class="line">            ans += (s[r] - s[l - <span class="number">1</span>]) * (LL)(n / l) * (m / l);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 莫比乌斯反演 </tag>
            
            <tag> 数学 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2480 古代猪文</title>
      <link href="/2021/11/16/P2480-%E5%8F%A4%E4%BB%A3%E7%8C%AA%E6%96%87/"/>
      <url>/2021/11/16/P2480-%E5%8F%A4%E4%BB%A3%E7%8C%AA%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>感觉自己的脑子要瓦特了…..</p><span id="more"></span><h1 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h1><ul><li>对于所有的k($k | n$),求</li></ul><p>$$<br>g^{\sum_{k|n} C_n^k}<br>$$</p><h1 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h1><ul><li><p>我们首先根据欧拉定理的推论：<br>$$<br>a^p\equiv a^{p\  \bmod\ \varphi(n)}(\bmod n)<br>$$</p></li><li><p>即可确定$\sum_{k|n}C_n^k$的模数$\varphi(n)$， 又因为n为一个极大的质数，所以$\varphi(n) = n -1$(我竟然兴奋的上了一个杜教筛，唉……)，但n过于庞大，达到了$1e9$的级别，所以我们还得运用卢卡斯定理：</p></li><li><p>$$<br>C_a^b = C_{a / p}^{b / p} * C_{a\ \bmod\ p} ^ {b\ \bmod\ p}, p\in{primes}<br>$$</p></li><li><p>这个时候，这个题的大体结构已经确定了，我们只需略略加一点小优化。 不难发现p = 999911658时，我们无法使用卢卡斯（p不是质数），就算我们不顾一切使用了卢卡斯，它的效率也低的离谱（应该会溢出或者报错吧），我们接着考虑能否将p拆分成质数，再将各个因数所算出来的答案相加</p></li><li><p>运用暴力程序，我们成功的得到$999911658 = 2 * 3 * 4679 * 35617$,将其分别带入$Lucas$中求解答案，再利用中国剩余定理：</p></li><li><p>$$<br>\begin{cases}<br>  &amp;x\ \equiv &amp;a_1(\bmod\ 2) \\<br>  &amp;x\ \equiv &amp;a_2(\bmod\ 3) \\<br>  &amp;x\ \equiv  &amp;a_3(\bmod\ 4679)\\<br>  &amp;x\ \equiv  &amp;a_4(\bmod\ 45617)<br>\end{cases}<br>$$</p></li><li><p>然后我们就得到了最小的非负整数， 直接快速幂计算答案即可。</p></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">999911658</span>, N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, g;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4679</span>, <span class="number">35617</span>&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res = <span class="number">0</span>; <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">1</span>;</span><br><span class="line">c = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + c - <span class="string">&#x27;0&#x27;</span>, c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">if</span>(flag) res = -res;</span><br><span class="line">&#125;</span><br><span class="line">LL ans[N];</span><br><span class="line">LL fac[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//对不同模数的乘积进行线性预处理</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= x;i ++)</span><br><span class="line">fac[i] = fac[i - <span class="number">1</span>] * i % x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL b, LL k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = (res * x) % k;</span><br><span class="line">x = (x * x) % k;</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a &lt; b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> fac[a] * <span class="built_in">qpow</span>(fac[b], k - <span class="number">2</span>, k) % k * <span class="built_in">qpow</span>(fac[a - b], k - <span class="number">2</span>, k) % k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">lucas</span><span class="params">(<span class="keyword">int</span> b, <span class="keyword">int</span> a, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b &lt; a) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(b &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lucas</span>(b / k, a / k, k) * <span class="built_in">C</span>(b % k, a % k, k) % k;</span><br><span class="line">&#125;</span><br><span class="line">LL res = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CRT</span><span class="params">()</span><span class="comment">//有些奇怪的中国剩余定理</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">4</span>;i ++)</span><br><span class="line">&#123;</span><br><span class="line">res = (res + ans[i] * (mod / p[i]) % mod * <span class="built_in">qpow</span>(mod / p[i], p[i] - <span class="number">2</span>, p[i])) % mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">read</span>(n), <span class="built_in">read</span>(g);</span><br><span class="line"><span class="keyword">if</span>(g % (mod + <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= <span class="number">4</span>;k ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">init</span>(p[k]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="built_in">sqrt</span>(n);i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans[k] = (ans[k] + <span class="built_in">lucas</span>(n, i, p[k]) % p[k]) % p[k]; </span><br><span class="line"><span class="keyword">if</span>(i * i != n)</span><br><span class="line">ans[k] = (ans[k] + <span class="built_in">lucas</span>(n, n / i, p[k]) % p[k]) % p[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">CRT</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, <span class="built_in">qpow</span>(g, res, mod + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉路径</title>
      <link href="/2021/11/16/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/"/>
      <url>/2021/11/16/%E6%AC%A7%E6%8B%89%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>对于任意一个无向图，我们必须不重复地走过所有的边（点可以不走完，也可以重复走），求方案是否存在，并输出其中一种（应该是最小字典序。</li></ul><span id="more"></span><h2 id="题目链接：P7771-欧拉路径"><a href="#题目链接：P7771-欧拉路径" class="headerlink" title="题目链接：P7771 欧拉路径"></a>题目链接：<a href="https://www.luogu.com.cn/problem/P7771">P7771 欧拉路径</a></h2><h1 id="结论及推导"><a href="#结论及推导" class="headerlink" title="结论及推导"></a>结论及推导</h1><ul><li><p>我们先来看一下这个两个图<br><img src="https://i.loli.net/2021/11/16/ZTCRLMVfgmXy7sv.png" alt="p4sz29zn.png"><br><img src="https://i.loli.net/2021/11/16/MxQgbTo41nBqEVf.png" alt="3yx89bfn.png"></p><h1 id="从这两个图中我们不难发现："><a href="#从这两个图中我们不难发现：" class="headerlink" title="从这两个图中我们不难发现："></a>从这两个图中我们不难发现：</h1><h2 id="1-对于无向图，所有边联通。"><a href="#1-对于无向图，所有边联通。" class="headerlink" title="1.对于无向图，所有边联通。"></a>1.对于无向图，所有边联通。</h2></li><li><p>(1).存在欧拉路径的充分必要条件：度数为奇数的点只能有0个或两个。</p></li><li><p>(2).存在欧拉回路的充分必要条件：度数为奇数的点只能有0个</p></li></ul><h2 id="2-对于有向图，所有边都是连通的"><a href="#2-对于有向图，所有边都是连通的" class="headerlink" title="2.对于有向图，所有边都是连通的"></a>2.对于有向图，所有边都是连通的</h2><ul><li>(1).存在欧拉路径的充分必要条件：要么所有点的出度均等于入度；要么除了两个点之外，其余所有点的出度等于入度，剩余的两个点：一个满足出度比入度多1（起点），另一个满足入度比出度多1（终点）</li><li>(2)存在欧拉回路的充分必要条件：所有点的出度均等于入度.<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1></li><li>我们任意取一个点，然后进行dfs，每次递归到下一层（如果求最小字典序就取最小的）一边递归，一边存储路径，当dfs结束之后，倒序输出（应该不用解释吧）<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> ru[N], cu[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;k[N];</span><br><span class="line"><span class="keyword">int</span> o[N];</span><br><span class="line"><span class="keyword">int</span> root, End;</span><br><span class="line"><span class="keyword">int</span> st[N], l;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(o[x] &lt; k[x].<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = k[x][o[x]];</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;x : &quot; &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; o[x] &lt;&lt; &quot; &quot; &lt;&lt; k[x].size()&lt;&lt; endl;</span></span><br><span class="line">cu[x] ++;</span><br><span class="line">ru[j] ++;</span><br><span class="line">o[x] ++;</span><br><span class="line"><span class="built_in">dfs</span>(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(o[x] &lt; k[x].<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = k[x][o[x]];</span><br><span class="line">o[x] ++;</span><br><span class="line"><span class="built_in">dfs1</span>(j);</span><br><span class="line">&#125;</span><br><span class="line">st[++ l] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p, u;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;p, &amp;u);</span><br><span class="line">k[p].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sort</span>(k[i].<span class="built_in">begin</span>(), k[i].<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(o[i] &lt; k[i].<span class="built_in">size</span>()) &#123;<span class="built_in">dfs</span>(i); <span class="keyword">break</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> u = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cu[i] != ru[i]) u ++;</span><br><span class="line"><span class="keyword">if</span>(cu[i] == <span class="number">0</span> &amp;&amp; ru[i] == <span class="number">0</span>) u = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(cu[i] == ru[i] + <span class="number">1</span>) root = i;</span><br><span class="line"><span class="keyword">if</span>(ru[i] == cu[i] + <span class="number">1</span>) End = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u != <span class="number">0</span> &amp;&amp; u != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!root &amp;&amp; !End) root = End = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(o, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(o));</span><br><span class="line"><span class="built_in">dfs1</span>(root);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = l;i &gt;= <span class="number">1</span>;i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, st[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 csp-s爆炸记</title>
      <link href="/2021/11/16/2021-csp-s%E7%88%86%E7%82%B8%E8%AE%B0/"/>
      <url>/2021/11/16/2021-csp-s%E7%88%86%E7%82%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="考前一天"><a href="#考前一天" class="headerlink" title="考前一天"></a>考前一天</h2><span id="more"></span><ul><li>感觉没什么好复习的,随随便便看看模板就过了，感觉会考图论，一个猜想，不一定对。<h2 id="考试当天上午"><a href="#考试当天上午" class="headerlink" title="考试当天上午"></a>考试当天上午</h2></li><li>坐在机房，闲的心里发慌，开始过模板，突然发现整个机房就我一个 (不会的都会更高级的算法)不会st表（还在倍增lca）急急忙忙去过，理解了半天还是不敢保证考场会打，人一下子就慌了，距离中午吃饭还有2h，冷静下来看图论（CCF一定要考啊），隔壁的巨佬在用网络流写dp，蒟蒻不懂联赛看网络流干啥。回过头来过了一下tarjan，仔细想了一下去年有<a href="https://www.luogu.com.cn/problem/P7115">移球游戏</a>，今年肯定有毒瘤题，于是溜过去看平衡树，痛苦地挣扎了两小时，勉勉强强调过了。上午就这么过了，今天主场作战，csp-s rp ++<h2 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h2></li></ul><ul><li>进考场前路遇几位外校的巨佬，赶紧膜拜，众所周知，考前膜巨佬有益于rp++。</li><li>进考场了，熟悉的系统，熟悉的键盘（还是这么难用），完全不熟悉的考题，大概扫了一眼，T1大概有点贪心的意思，毕竟每个飞机能停在那个廊桥是定死的，但想了想，还是先看看后面的题，T2肯定是区间dp（模拟赛有道相似的），仔细看了看发现这道题细节巨多，自己掂量掂量自己的码力水平，觉得还是不行，自己推了一下式子，但过不了大样例，回过头来重新看了看题，才发现S在A的左右两边时必须又要括号，当时人都傻了，这是已经开考45min了。出去上了个厕所，回来准备看T3。</li><li>T3乍一看，真的认为是道数学题（5e5的数据范围，完全想不到什么数据结构）认真读了读，发现T1更可做，还是先看一下T4，又是很长的题面，联想了一下去年的<a href="https://www.luogu.com.cn/problem/P7078">贪吃蛇</a>，一想到现在我一道题都没做出来，背后一凉，赶紧去看T1。</li><li>怎么说呢？还是数学学的太差了（其实是没怎么没用过STL模板库），推导了一下，发现每一个廊桥停的上一个飞机的起飞时间和下一个飞机降落时间都成严格上升。想了想<br>$$f(n) = \sum_{i=1}^{n-1}{f(i)} + g(n)$$</li><li>其中f指能停的飞机数，g指在n号机场能停的飞机数。意味着只要在log(n)的时间复杂度内查询出这架飞机停在哪，用线段树维护区间和即可。自己兴奋的打完，一测样例：没过，然后极其痛苦的查了30min后，才发现是lower_bound炸掉了，点开lower_bound才发现ta就是帮我写了个二分，仔细思考了一下如何在随时修改的无序序列中快速查询出第一个比大的值。一敲脑袋，发现自己完全不会只能硬枚举，复杂度为$O(n^2 -n\log n)$希望CCF的数据水一点，别把我卡掉。</li><li>已经考了2h，开始码T3，仔细分析了一下发现当第一个出去的数确定了以后，后面每一个出去的数就确定了，开始疯狂码贪心，然后打了1h发现自己无法确定中间加数时的顺序（后来问了大佬才知道，其实可以确定，打的也没有问题，就是自己太弱了，没想到），在激烈的思想斗争之后，还是决定打暴力拿40分跑路，打了暴力就走了。</li><li>在自己语文能力的限制下，自己还是没从第四题的题面中挖出点什么，总感觉大纲里的考点一个也匹配不上，果断放弃继续打第二题，结果还是没打完。</li><li>崩了呀，还是自己平时没复习好，平时除了部分数据结构题什么也不想做，看来后续做题思路要改改了<h3 id="估分："><a href="#估分：" class="headerlink" title="估分："></a>估分：</h3>$(60-70) + 0 + 40 + 0$<h3 id="实测"><a href="#实测" class="headerlink" title="实测"></a>实测</h3>$85 + 0 + 12$(差了8分tg1=)<h2 id="考后"><a href="#考后" class="headerlink" title="考后"></a>考后</h2></li><li>第四题原来真的可以用网络流吗，这玩意不是不考吗（早上看网络流的巨佬就A掉了），第三题暴力写挂了，第一题民间数据倒还没卡掉（希望CCF也没卡掉）</li><li>接下来该多看看数学题了，再不看就AFO了（可能已经AFO了）（数据结构，图论都没怎么考（除了该死的超了刚的网络流））</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1072 Hankson的趣味题（解题概要）</title>
      <link href="/2021/11/16/P1072-Hankson%E7%9A%84%E8%B6%A3%E5%91%B3%E9%A2%98%EF%BC%88%E8%A7%A3%E9%A2%98%E6%A6%82%E8%A6%81%EF%BC%89/"/>
      <url>/2021/11/16/P1072-Hankson%E7%9A%84%E8%B6%A3%E5%91%B3%E9%A2%98%EF%BC%88%E8%A7%A3%E9%A2%98%E6%A6%82%E8%A6%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1072">题目传送门</a></p><span id="more"></span><p>(数论) $O(n \sqrt{b_1} / log(b_1))$</p><p>由于 $[x, b_0] = b_1$，因此 $x$ 一定是 $b_1$ 的约数。<br>所以我们可以枚举 $b_1$ 的所有约数，然后依次判断是否满足 $[x, b_0] = b_1$ 以及 $(x, a_0) = a_1$ 即可。</p><p>如果直接用试除法求 $b_1$ 的所有约数，那么总计算量是 $n \sqrt{b_1} = 2000 * \sqrt{2 \times 10^9} \approx 10^8$，会有一个测试数据超时。</p><p>我们可以先预处理出 $1 \sim \sqrt{b_1}$ 内的所有质数，然后用这些质数去试除 $b_1$。</p><p>由质数定理：</p><ul><li>$1 \sim n$ 中的质数个数约为 $\frac{n}{ln(n)}$。</li></ul><p>因此我们可以在 $\sqrt{b_i} / log(b_i)$ 的时间复杂度内将 $b_1$ 分解质因数。然后通过DFS枚举出 $b_1$ 的所有约数。</p><p>时间复杂度分析：</p><ul><li>一共 $n$ 组测试数据，每组测试数据分解 $b_1$ 的计算量是 $n \sqrt{b_1} / log(b_1) \approx 10^7$。</li></ul><p>平均每个数的约数个数为 $logn$ 个，计算最小公倍数和最大公约数的时间复杂度也是 $O(logn)$，因此判断 $x$ 是否合法的计算量是 $nlog^2n \approx 2 \times 10^6$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">45005</span>,M = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">int</span> pr[N], cnt;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> bl[N];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;q[M];</span><br><span class="line"><span class="keyword">int</span> cnta;</span><br><span class="line"><span class="keyword">int</span> di[N], cntd;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inti</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//筛质数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!bl[i]) pr[cnt ++] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; pr[j] &lt;= x/i; j ++)</span><br><span class="line">&#123;</span><br><span class="line">bl[pr[j] * i] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (!(i % pr[j])) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><span class="comment">//最小公约数 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a%b) : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> p)</span><span class="comment">//枚举可能的 x </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt; cnta)<span class="comment">//已经没有因数了 </span></span><br><span class="line">&#123;</span><br><span class="line">di[cntd ++] = p;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= q[l].second;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">dfs</span>(l + <span class="number">1</span>,p);</span><br><span class="line">p *= q[l].first;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">inti</span>(N);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span>(n --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a0, a1, b0, b1;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;a0, &amp;a1, &amp;b0, &amp;b1);</span><br><span class="line"><span class="keyword">int</span> d = b1;</span><br><span class="line">cnta = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; pr[i] &lt;= d/pr[i]; i ++)<span class="comment">//枚举出可行的 X的因数 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = pr[i];</span><br><span class="line"><span class="keyword">if</span>(!(d%p))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(d%p == <span class="number">0</span>) s ++, d /= p;</span><br><span class="line">q[++ cnta] = &#123;p, s&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d &gt; <span class="number">1</span>) q[++ cnta] = &#123;d, <span class="number">1</span>&#125;;</span><br><span class="line">cntd = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cntd; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x = di[i];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">gcd</span>(x, a0) == a1 &amp;&amp;(<span class="keyword">long</span> <span class="keyword">long</span>)x*b0/<span class="built_in">gcd</span>(x, b0) == b1)</span><br><span class="line">&#123;</span><br><span class="line">res ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主定理</title>
      <link href="/2021/11/16/%E4%B8%BB%E5%AE%9A%E7%90%86/"/>
      <url>/2021/11/16/%E4%B8%BB%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>记得复习</p><span id="more"></span><p>$T(n)=2 T\left(\frac{n}{2}\right)+\Theta(n)=\Theta(n \log n)$  </p><p>$T(n)=T\left(\frac{n}{2}\right)+\Theta(n)=\Theta(n) $  </p><p>$T(n)=T\left(\frac{n}{2}\right)+\Theta(1)=\Theta(\log n)$  </p><p>$T(n)=2 T\left(\frac{n}{2}\right)+\Theta(n \sqrt{n})=\Theta(n \sqrt{n}) $</p>]]></content>
      
      
      
        <tags>
            
            <tag> 初赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Miller Robin</title>
      <link href="/2021/11/16/Miller-Robin/"/>
      <url>/2021/11/16/Miller-Robin/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>玄学的概率测素数， 这是一种随机的算法， 出错率大约在$($1/4$)^n$， 所以当n &gt; 50以后正确率就接近于1了（反正比计算机本身的正确率要高）</p><span id="more"></span><p><a href="https://www.luogu.com.cn/problem/P4718">题目传送门</a></p><h2 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h2><h3 id="费马小定理："><a href="#费马小定理：" class="headerlink" title="费马小定理："></a>费马小定理：</h3><p>当a于p互质时，$(a^p) \equiv a (\bmod p)$</p><h3 id="二次探测定理"><a href="#二次探测定理" class="headerlink" title="二次探测定理"></a>二次探测定理</h3><p>内容：如果 φ(p)=p−1,p&gt;1,p&gt;X，且$X^2 ≡ 1(\bmod p)$，那么 $X = 1 || p - 1$</p><p>证明：</p><p>∵$X^2≡1 \pmod p$</p><p>∴ $p|X^2 - 1$</p><p>∴$p|(X - 1)(X+ 1)$</p><p>∵p是大于X的质数</p><p>∴ $p = X + 1 || p \equiv X-1\pmod p$ 即$X = 1 || p - 1$</p><p>证毕</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>好， 那么接下来让我们走进它的原理。</p><p>首先，如果当满足$(a^p-1) \equiv a \pmod p$时p都为质数那这个问题是不是就迎刃而解了呢？（就可以和愚蠢的二次探测定理说再见了）</p><p>但愿望是美好的，现实是骨感的，当你自信地将这个代码交上去以后，你会发现：你Wa了。</p><p>我们来看一下这个数据：$2^{340} \equiv 1 \pmod {341}$，然而 341=31∗11</p><p>……</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul><li>1.将$p - 1$提出所有2的因数， 我们假设有t个。然后将剩余的部分定义为res（用于二次探测定理）</li></ul><ul><li>2.枚举一个数a，并定义一个数$x = a^{res} \pmod p $</li></ul><ul><li><p>3.如果 $\forall y = x^2 \pmod p, y != p - 1$ 那么p就不是一个质数</p></li><li><p>4.当我们的底数已经足够多了时，就可以跳出了</p><h2 id="主函数及其他流程"><a href="#主函数及其他流程" class="headerlink" title="主函数及其他流程"></a>主函数及其他流程</h2><p>牛B的大佬就可以去刷题了（<del>别来找茬了</del>）</p></li><li><p>我们先判断当前数是否为素数</p></li><li><p>如果不是素数的话，就找它的因子</p></li><li><p>递归对该因子和约出来的另一个因子进行分解（直到为质数）</p><h2 id="因子从何而来"><a href="#因子从何而来" class="headerlink" title="因子从何而来"></a>因子从何而来</h2><p>   <del>如果不嫌弃的话，我们可以一个一个试</del></p><p>   咳，我们来说正解。</p></li><li><p>我们假设要找的因子为a</p></li><li><p>我们运用随机的艺术find一个$x,y$,并不停随机$x$, 具体的法子一般是$x = x^2 + c$(c就是随机艺术的产物)</p></li><li><p>使$a = gcd(y - x, n) &amp;&amp; a \in(1, n)$则我们就找到了一个因子（<del>至于为什么</del>……）</p></li><li><p>那如果$x = y$出现了呢，这就说明出现了循环，所以我们就要判环，运用倍增的思想，让$y$记住$x$，当$x = {x_0}^2$时，y = x，所以当x跑到y时，已经跑完一个圈。</p></li><li><p>定义一个$i = 1,j = 2$,当执行$gcd$时$i ++$,如果i == j, 则$y = x, j &lt;&lt;= 1$ </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">LL n, ans;</span><br><span class="line">LL a[<span class="number">30</span>] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">41</span>,<span class="number">61</span>,<span class="number">24251</span>&#125;;</span><br><span class="line"><span class="function">LL <span class="title">Gcd</span><span class="params">(LL x, LL y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y ? <span class="built_in">Gcd</span>(y, x % y) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">mul</span><span class="params">(LL x, LL k, LL mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res += x, res %= mod;</span><br><span class="line">        x += x;</span><br><span class="line">        x %= mod;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL k, LL mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, x, mod);</span><br><span class="line">        x = <span class="built_in">mul</span>(x, x, mod);</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Robin</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(p % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LL d = p - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(d &amp; <span class="number">1</span>)) d &gt;&gt;= <span class="number">1</span>, s ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">9</span> &amp;&amp; a[i] &lt; p;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x = <span class="built_in">qpow</span>(a[i], d, p), y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= s;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            y = <span class="built_in">mul</span>(x, x, p);</span><br><span class="line">            <span class="keyword">if</span>(y == <span class="number">1</span> &amp;&amp; x != <span class="number">1</span> &amp;&amp; x != (p - <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            x = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(y != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">pollard</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL y = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL c = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL i = <span class="number">0</span>, j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            x = (<span class="built_in">mul</span>(x, x, p) + c) % p;</span><br><span class="line">            <span class="keyword">if</span>(x == y) <span class="keyword">break</span>;</span><br><span class="line">            LL d = <span class="built_in">Gcd</span>(<span class="built_in">abs</span>(y - x), p);</span><br><span class="line">            <span class="keyword">if</span>(d &gt; <span class="number">1</span>) <span class="keyword">return</span> d;</span><br><span class="line">            <span class="keyword">if</span>(i == j)</span><br><span class="line">            &#123;</span><br><span class="line">                y = x;</span><br><span class="line">                j &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Robin</span>(p)) </span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, p);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    LL k = p;</span><br><span class="line">    <span class="keyword">while</span>(p &lt;= k) k = <span class="built_in">pollard</span>(k);</span><br><span class="line">    <span class="built_in">Find</span>(k), <span class="built_in">Find</span>(p / k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">9</span>) <span class="built_in">print</span>(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(T --)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">        <span class="built_in">Find</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(ans == n) <span class="built_in">puts</span>(<span class="string">&quot;Prime&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">print</span>(ans),<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>我们会发现：咦怎么T了</p><p>这时就要卡常（<del>打表</del>）了，经过被巨佬一顿嘲讽，我们终于问到了卡常的办法</p><h2 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a>快速乘</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">qmul</span><span class="params">(ull a,</span></span></span><br><span class="line"><span class="params"><span class="function">    ull b,<span class="keyword">const</span> ull mod)</span></span>&#123;</span><br><span class="line">    ll c=(ll)(a)*b-(ll)((ull)((ld)(a)*b/mod)*mod);</span><br><span class="line">    <span class="keyword">return</span> c&lt;<span class="number">0</span>? c+mod:(c&lt;mod? c:c-mod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>连简单的$\log(n)$的龟速乘都不放过……</del></p><p>然后我们就可以得到优秀的93分</p><h2 id="最后的优化"><a href="#最后的优化" class="headerlink" title="最后的优化"></a>最后的优化</h2><p><del>93分了，冲鸭</del></p><p>向哪冲呢？</p><p>还记得我们的$Gcd$吗，当然，$Gcd$函数是不能再优化了，但我们调用$Gcd$的次数是可以再优化的。</p><ul><li>我们都知道， 龟速乘的模数都是质数， 但我们的模数可能并不是质数</li><li>所以我们可以根据取模的性质：如果模数和被模的数都含有一个公约数$k$，那么这次模运算的结果必然也会是这个公约数$k$的倍数。所以如果我们将若干个$(y - x)$ 相乘，因为模数是$n$ ，所以如果若干个$(y - x)$中有一个与$n$有公约数，最后的结果定然也会含有这个公约数。</li><li>所以我们可以多算几次$(y - x)$, 再来求$Gcd$（63次擦不多吧）</li><li>记得一边欧拉$(y - x)$，一边倍增，判环哟<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">LL n, ans;</span><br><span class="line">LL a[<span class="number">30</span>] = &#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">41</span>,<span class="number">61</span>,<span class="number">24251</span>&#125;;</span><br><span class="line"><span class="function">LL <span class="title">Gcd</span><span class="params">(LL x, LL y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y ? <span class="built_in">Gcd</span>(y, x % y) : x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">mul</span><span class="params">(ull a,ull b, ull mod)</span></span>&#123;</span><br><span class="line">    ll c=(ll)(a)*b-(ll)((ull)((ld)(a)*b/mod)*mod);</span><br><span class="line">    <span class="keyword">return</span> c&lt;<span class="number">0</span>? c+mod:(c&lt;mod? c:c-mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x, LL k, LL mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = <span class="built_in">mul</span>(res, x, mod);</span><br><span class="line">        x = <span class="built_in">mul</span>(x, x, mod);</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Robin</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(p % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LL d = p - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(d &amp; <span class="number">1</span>)) d &gt;&gt;= <span class="number">1</span>, s ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">9</span> &amp;&amp; a[i] &lt; p;i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x = <span class="built_in">qpow</span>(a[i], d, p), y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= s;j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            y = <span class="built_in">mul</span>(x, x, p);</span><br><span class="line">            <span class="keyword">if</span>(y == <span class="number">1</span> &amp;&amp; x != <span class="number">1</span> &amp;&amp; x != (p - <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            x = y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(y != <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">pollard</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        LL x = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL y = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL c = <span class="built_in">rand</span>() % (p - <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">        LL i = <span class="number">0</span>, j = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(++ i)</span><br><span class="line">        &#123;</span><br><span class="line">            x = (<span class="built_in">mul</span>(x * <span class="number">1ull</span>, x * <span class="number">1ull</span>, p * <span class="number">1ull</span>) + c) % p;</span><br><span class="line">            b = <span class="built_in">mul</span>(b * <span class="number">1ull</span>, <span class="built_in">abs</span>(y - x) * <span class="number">1ull</span>, p * <span class="number">1ull</span>);</span><br><span class="line">            <span class="keyword">if</span>(!b || x == y) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(i == j || !(i % <span class="number">63</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                LL d = <span class="built_in">Gcd</span>(b, p);</span><br><span class="line">                <span class="keyword">if</span>(d &gt; <span class="number">1</span>) <span class="keyword">return</span> d;</span><br><span class="line">                <span class="keyword">if</span>(i == j) y = x, j &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(LL p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p &lt;= ans || p == <span class="number">1</span>) <span class="keyword">return</span> ;<span class="comment">//小优化 </span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Robin</span>(p)) </span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, p);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    LL k = <span class="built_in">pollard</span>(p);</span><br><span class="line">    <span class="keyword">while</span>(p % k == <span class="number">0</span>) p /= k;</span><br><span class="line">    <span class="built_in">Find</span>(k), <span class="built_in">Find</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) x = -x, <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">9</span>) <span class="built_in">print</span>(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(T --)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">        <span class="built_in">Find</span>(n);</span><br><span class="line">        <span class="keyword">if</span>(ans == n) <span class="built_in">puts</span>(<span class="string">&quot;Prime&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">print</span>(ans),<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 质数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可持久化线段树(主席树)</title>
      <link href="/2021/11/16/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91-%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
      <url>/2021/11/16/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91-%E4%B8%BB%E5%B8%AD%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="可持久化前提"><a href="#可持久化前提" class="headerlink" title="可持久化前提"></a>可持久化前提</h2><ul><li>数据结构本身的拓扑结构不变</li></ul><span id="more"></span><h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><ul><li>无法使用懒标记，很难进行区间修改（但可以标记永久化（局限性也大的不行））</li></ul><h2 id="所解决的问题"><a href="#所解决的问题" class="headerlink" title="所解决的问题"></a>所解决的问题</h2><ul><li>查询数据结构的所有历史版本</li></ul><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><ul><li><p>只记录当前版本和之前版本不一样的地方-目的：降低算法空间复杂度，对于线段树的每一次修改，我们最多涉及$\log(n)$个节点，最多进行n次操作，空间复杂度级别就被降为$n\log(n)$。</p></li><li><p>线段树建立</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;<span class="comment">//表示左右节点的下标</span></span><br><span class="line">    <span class="keyword">int</span> cnt;<span class="comment">//当前区间中一共有多少个数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="例题：Acwing-查找第K小数"><a href="#例题：Acwing-查找第K小数" class="headerlink" title="例题：Acwing  查找第K小数"></a>例题：<a href="https://www.acwing.com/problem/content/3536/">Acwing  查找第K小数</a></h2><ul><li><p>时空复杂度：$n\log(n)$.</p></li><li><p>我们不难发现（<del>读题可知</del>）只有100000个数,但每个数的大小可以到达1000000000，所以对于每一个数进行离散化在数值上建立线段树，维护每个数值区间中一共有多少个数</p></li><li><p>我们先来考虑在$[1,n]$上维护k小值<img src="C:\Users\s01\Desktop\无标题.png" alt="无标题"></p></li><li><p>我们还是不难发现，对于这个序列整体进行二分操作使左边的数的个数等于k-1即可，以此我们只需推论到区间$[l, r]$即可，我们再根据线段树的性质可知，每一个点所在的线段树的区间是一定的，且每一个数在线段树中出现的次数也是一定的，于是我们运用前缀和的思想，查询线段树上$[l, r]$的第k个值(因为它前面的数字都比它小) （听不懂的话，请看具体操作（<del>语文还是太差了</del>））</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, M = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line">&#125;tr[(<span class="keyword">int</span>)<span class="number">5e6</span>];</span><br><span class="line"><span class="keyword">int</span> root[N], idx; <span class="comment">// 每个版本的根节点 </span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;nums;<span class="comment">//离散化</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), x) - nums.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = ++ idx;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> p;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">tr[p].l = <span class="built_in">build</span>(l, mid), tr[p].r = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q = ++ idx;</span><br><span class="line">    tr[q] = tr[p];</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[q].cnt ++ ;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) tr[q].l = <span class="built_in">insert</span>(tr[p].l, l, mid, x);</span><br><span class="line">    <span class="keyword">else</span> tr[q].r = <span class="built_in">insert</span>(tr[p].r, mid + <span class="number">1</span>, r, x);</span><br><span class="line">    tr[q].cnt = tr[tr[q].l].cnt + tr[tr[q].r].cnt;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> r;</span><br><span class="line">    <span class="keyword">int</span> cnt = tr[tr[q].l].cnt - tr[tr[p].l].cnt;<span class="comment">//前缀和思想 </span></span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= cnt) <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].l, tr[p].l, l, mid, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].r, tr[p].r, mid + <span class="number">1</span>, r, k - cnt);<span class="comment">//减去左区间的</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        nums.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    nums.<span class="built_in">erase</span>(<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()), nums.<span class="built_in">end</span>());</span><br><span class="line">root[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        root[i] = <span class="built_in">insert</span>(root[i - <span class="number">1</span>], <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>, <span class="built_in">find</span>(a[i]));</span><br><span class="line"><span class="comment">//for(int i = 0;i &lt;= n;i ++) cout &lt;&lt; root[i] &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> l, r, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, nums[<span class="built_in">query</span>(root[r], root[l - <span class="number">1</span>], <span class="number">0</span>, nums.<span class="built_in">size</span>() - <span class="number">1</span>, k)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 3</span></span><br><span class="line"><span class="comment">1 5 2 6 3 7 4</span></span><br><span class="line"><span class="comment">2 5 3</span></span><br><span class="line"><span class="comment">4 4 1</span></span><br><span class="line"><span class="comment">1 7 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>顺便捞一下(思想相同)<a href="https://www.luogu.com.cn/problem/P3919">luogu P3919可持久化线段树</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line">&#125;tr[N &lt;&lt; <span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">int</span> root[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = ++ idx;</span><br><span class="line"><span class="keyword">if</span>(l == r)</span><br><span class="line">&#123;</span><br><span class="line">tr[p].v = a[l];</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">tr[p].l = <span class="built_in">build</span>(l, mid);</span><br><span class="line">tr[p].r = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = ++ idx;</span><br><span class="line">tr[p] = tr[q];</span><br><span class="line"><span class="keyword">if</span>(l == r)</span><br><span class="line">&#123;</span><br><span class="line">tr[p].v = y;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= mid) tr[p].l = <span class="built_in">modify</span>(tr[q].l, l, mid, x, y);</span><br><span class="line"><span class="keyword">else</span> tr[p].r = <span class="built_in">modify</span>(tr[q].r, mid + <span class="number">1</span>, r, x, y);</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> tr[q].v;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].l, l, mid, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(tr[q].r, mid + <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">root[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">int</span> x, op, t, y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;op, &amp;t);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;y);</span><br><span class="line">root[i] = <span class="built_in">modify</span>(root[x], <span class="number">1</span>, n, t, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(root[x], <span class="number">1</span>, n, t));</span><br><span class="line">root[i] = root[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">7 3</span></span><br><span class="line"><span class="comment">1 5 2 6 3 7 4</span></span><br><span class="line"><span class="comment">2 5 3</span></span><br><span class="line"><span class="comment">4 4 1</span></span><br><span class="line"><span class="comment">1 7 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
